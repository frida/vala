/* methods_varargs_struct.c generated by valac, the Vala compiler
 * generated from methods_varargs_struct.vala, do not modify */

#include <glib.h>
#include <string.h>
#include <stdarg.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Bar Bar;
#define _bar_free0(var) ((var == NULL) ? NULL : (var = (bar_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Bar {
	gint i;
	gint j;
};

VALA_EXTERN Bar* bar_dup (const Bar* self);
VALA_EXTERN void bar_free (Bar* self);
VALA_EXTERN void foo (gint first_arg,
          ...);
VALA_EXTERN void faz (gint first_arg,
          ...);
VALA_EXTERN void fab (gint first_arg,
          ...);
static void _vala_main (void);

Bar*
bar_dup (const Bar* self)
{
	Bar* dup;
	dup = g_new0 (Bar, 1);
	memcpy (dup, self, sizeof (Bar));
	return dup;
}

void
bar_free (Bar* self)
{
	g_free (self);
}

void
foo (gint first_arg,
     ...)
{
	va_list args = {0};
	Bar bar = {0};
	Bar _tmp0_;
	Bar _tmp1_;
	va_start (args, first_arg);
	bar = *(va_arg (args, Bar*));
	_vala_assert (first_arg == 42, "first_arg == 42");
	_tmp0_ = bar;
	_vala_assert (_tmp0_.i == 23, "bar.i == 23");
	_tmp1_ = bar;
	_vala_assert (_tmp1_.j == 4711, "bar.j == 4711");
	va_end (args);
}

void
faz (gint first_arg,
     ...)
{
	va_list args = {0};
	Bar* bar = NULL;
	Bar* _tmp0_;
	va_start (args, first_arg);
	_tmp0_ = va_arg (args, Bar*);
	bar = _tmp0_;
	_vala_assert (first_arg == 23, "first_arg == 23");
	_vala_assert ((*bar).i == 23, "bar.i == 23");
	_vala_assert ((*bar).j == 4711, "bar.j == 4711");
	va_end (args);
}

static gpointer
_bar_dup0 (gpointer self)
{
	return self ? bar_dup (self) : NULL;
}

void
fab (gint first_arg,
     ...)
{
	va_list args = {0};
	Bar* bar = NULL;
	Bar* _tmp0_;
	va_start (args, first_arg);
	_tmp0_ = _bar_dup0 (va_arg (args, Bar*));
	bar = _tmp0_;
	_vala_assert (first_arg == 65, "first_arg == 65");
	_vala_assert ((*bar).i == 23, "bar.i == 23");
	_vala_assert ((*bar).j == 4711, "bar.j == 4711");
	_bar_free0 (bar);
	va_end (args);
}

static void
_vala_main (void)
{
	Bar bar = {0};
	Bar _tmp0_ = {0};
	Bar _tmp1_;
	Bar _tmp2_;
	Bar _tmp3_;
	_tmp0_.i = 23;
	_tmp0_.j = 4711;
	bar = _tmp0_;
	_tmp1_ = bar;
	foo (42, &_tmp1_, NULL);
	_tmp2_ = bar;
	faz (23, &_tmp2_, NULL);
	_tmp3_ = bar;
	fab (65, &_tmp3_, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

