/* methods_parameter_ref_array_resize_captured.c generated by valac, the Vala compiler
 * generated from methods_parameter_ref_array_resize_captured.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*FooFunc) (gpointer user_data);
typedef struct _Block1Data Block1Data;

struct _Block1Data {
	int _ref_count_;
	gint* a;
	gint a_length1;
	gint _a_size_;
};

VALA_EXTERN void foo (gint** a,
          gint* a_length1);
static void _vala_main (void);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__foo_func (gpointer self);
static void _vala_array_add1 (gint* * array,
                       gint* length,
                       gint* size,
                       gint value);

void
foo (gint** a,
     gint* a_length1)
{
	gint* _tmp0_;
	_tmp0_ = g_new0 (gint, 1);
	*a = (g_free (*a), NULL);
	*a = _tmp0_;
	*a_length1 = 1;
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_data1_->a = (g_free (_data1_->a), NULL);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	foo (&_data1_->a, (gint*) (&_data1_->a_length1));
	_data1_->_a_size_ = _data1_->a_length1;
}

static void
__vala_lambda0__foo_func (gpointer self)
{
	_vala_lambda0_ (self);
}

static void
_vala_array_add1 (gint* * array,
                  gint* length,
                  gint* size,
                  gint value)
{
	if ((*length) == (*size)) {
		*size = (*size) ? (2 * (*size)) : 4;
		*array = g_renew (gint, *array, *size);
	}
	(*array)[(*length)++] = value;
}

static void
_vala_main (void)
{
	Block1Data* _data1_;
	gint* _tmp0_;
	FooFunc func = NULL;
	gpointer func_target;
	GDestroyNotify func_target_destroy_notify;
	FooFunc _tmp1_;
	gpointer _tmp1__target;
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_tmp0_ = g_new0 (gint, (10 * 1024) * 1024);
	_data1_->a = _tmp0_;
	_data1_->a_length1 = (10 * 1024) * 1024;
	_data1_->_a_size_ = _data1_->a_length1;
	func = __vala_lambda0__foo_func;
	func_target = block1_data_ref (_data1_);
	func_target_destroy_notify = block1_data_unref;
	_tmp1_ = func;
	_tmp1__target = func_target;
	_tmp1_ (_tmp1__target);
	{
		gint i = 0;
		i = 1;
		{
			gboolean _tmp2_ = FALSE;
			_tmp2_ = TRUE;
			while (TRUE) {
				if (!_tmp2_) {
					gint _tmp3_;
					_tmp3_ = i;
					i = _tmp3_ + 1;
				}
				_tmp2_ = FALSE;
				if (!(i < ((10 * 1024) * 1024))) {
					break;
				}
				_vala_array_add1 (&_data1_->a, &_data1_->a_length1, &_data1_->_a_size_, 4711);
			}
		}
	}
	(func_target_destroy_notify == NULL) ? NULL : (func_target_destroy_notify (func_target), NULL);
	func = NULL;
	func_target = NULL;
	func_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

