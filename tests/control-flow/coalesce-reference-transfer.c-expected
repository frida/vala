/* control_flow_coalesce_reference_transfer.c generated by valac, the Vala compiler
 * generated from control_flow_coalesce_reference_transfer.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
};

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_new (gint i);
VALA_EXTERN Foo* get_foo (gint* i);
static void _vala_main (void);

Foo*
foo_new (gint i)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	self->i = i;
	return self;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

Foo*
get_foo (gint* i)
{
	Foo* _tmp0_ = NULL;
	Foo* result;
	if (i != NULL) {
		Foo* _tmp1_;
		_tmp1_ = foo_new (*i);
		_foo_free0 (_tmp0_);
		_tmp0_ = _tmp1_;
	} else {
		_foo_free0 (_tmp0_);
		_tmp0_ = NULL;
	}
	result = _tmp0_;
	return result;
}

static void
_vala_main (void)
{
	{
		Foo* _tmp0_ = NULL;
		Foo* _tmp1_;
		Foo* foo = NULL;
		Foo* _tmp4_;
		Foo* _tmp5_;
		_tmp1_ = get_foo (NULL);
		_tmp0_ = _tmp1_;
		if (_tmp0_ == NULL) {
			gint _tmp2_;
			Foo* _tmp3_;
			_tmp2_ = 42;
			_tmp3_ = get_foo (&_tmp2_);
			_foo_free0 (_tmp0_);
			_tmp0_ = _tmp3_;
		}
		_tmp4_ = _tmp0_;
		_tmp0_ = NULL;
		foo = _tmp4_;
		_tmp5_ = foo;
		_vala_assert (_tmp5_->i == 42, "foo.i == 42");
		_foo_free0 (foo);
		_foo_free0 (_tmp0_);
	}
	{
		Foo* _tmp6_ = NULL;
		Foo* _tmp7_;
		Foo* foo = NULL;
		Foo* _tmp13_;
		_tmp7_ = get_foo (NULL);
		_tmp6_ = _tmp7_;
		if (_tmp6_ == NULL) {
			Foo* _tmp8_ = NULL;
			Foo* _tmp9_;
			Foo* _tmp12_;
			_tmp9_ = get_foo (NULL);
			_tmp8_ = _tmp9_;
			if (_tmp8_ == NULL) {
				gint _tmp10_;
				Foo* _tmp11_;
				_tmp10_ = 42;
				_tmp11_ = get_foo (&_tmp10_);
				_foo_free0 (_tmp8_);
				_tmp8_ = _tmp11_;
			}
			_tmp12_ = _tmp8_;
			_tmp8_ = NULL;
			_foo_free0 (_tmp6_);
			_tmp6_ = _tmp12_;
			_foo_free0 (_tmp8_);
		}
		_tmp13_ = _tmp6_;
		_tmp6_ = NULL;
		foo = _tmp13_;
		_vala_assert (foo->i == 42, "foo.i == 42");
		_foo_free0 (foo);
		_foo_free0 (_tmp6_);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

