/* control_flow_coalesce_right_value.c generated by valac, the Vala compiler
 * generated from control_flow_coalesce_right_value.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) ((var == NULL) ? NULL : (var = (g_free (var), NULL)))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint i;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
static void _vala_main (void);
static gint* _int_dup (gint* self);

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gint*
_int_dup (gint* self)
{
	gint* dup;
	dup = g_new0 (gint, 1);
	memcpy (dup, self, sizeof (gint));
	return dup;
}

static gpointer
__int_dup0 (gpointer self)
{
	return self ? _int_dup (self) : NULL;
}

static gpointer
_foo_dup0 (gpointer self)
{
	return self ? foo_dup (self) : NULL;
}

static void
_vala_main (void)
{
	{
		gint* null_int = NULL;
		gint* _tmp0_ = NULL;
		gint* _tmp1_;
		gint* _tmp2_;
		gint i = 0;
		gint* _tmp5_;
		gint* _tmp6_;
		gint _tmp7_;
		null_int = NULL;
		_tmp1_ = null_int;
		_tmp2_ = __int_dup0 (_tmp1_);
		_tmp0_ = _tmp2_;
		if (_tmp0_ == NULL) {
			gint _tmp3_;
			gint* _tmp4_;
			_tmp3_ = 42;
			_tmp4_ = __int_dup0 (&_tmp3_);
			_g_free0 (_tmp0_);
			_tmp0_ = _tmp4_;
		}
		_tmp5_ = _tmp0_;
		_tmp0_ = NULL;
		_tmp6_ = _tmp5_;
		_tmp7_ = *_tmp6_;
		_g_free0 (_tmp6_);
		i = _tmp7_;
		_vala_assert (i == 42, "i == 42");
		_g_free0 (_tmp0_);
		_g_free0 (null_int);
	}
	{
		Foo* null_foo = NULL;
		Foo right_foo = {0};
		Foo _tmp8_ = {0};
		Foo* _tmp9_ = NULL;
		Foo* _tmp10_;
		Foo* _tmp11_;
		Foo foo = {0};
		Foo* _tmp14_;
		Foo* _tmp15_;
		Foo _tmp16_;
		Foo _tmp17_;
		null_foo = NULL;
		_tmp8_.i = 42;
		right_foo = _tmp8_;
		_tmp10_ = null_foo;
		_tmp11_ = _foo_dup0 (_tmp10_);
		_tmp9_ = _tmp11_;
		if (_tmp9_ == NULL) {
			Foo _tmp12_;
			Foo* _tmp13_;
			_tmp12_ = right_foo;
			_tmp13_ = _foo_dup0 (&_tmp12_);
			_foo_free0 (_tmp9_);
			_tmp9_ = _tmp13_;
		}
		_tmp14_ = _tmp9_;
		_tmp9_ = NULL;
		_tmp15_ = _tmp14_;
		_tmp16_ = *_tmp15_;
		_foo_free0 (_tmp15_);
		foo = _tmp16_;
		_tmp17_ = foo;
		_vala_assert (_tmp17_.i == 42, "foo.i == 42");
		_foo_free0 (_tmp9_);
		_foo_free0 (null_foo);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

