/* asynchronous_method_main_async_void.c generated by valac, the Vala compiler
 * generated from asynchronous_method_main_async_void.vala, do not modify */

#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif

typedef struct _ValaMainAsyncData ValaMainAsyncData;

struct _ValaMainAsyncData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	gchar** args;
	gint args_length1;
};

static void _vala_main_async_data_free (gpointer _data);
static void _vala_main_async (gchar** args,
                       gint args_length1,
                       GAsyncReadyCallback _callback_,
                       gpointer _user_data_);
static void _vala_main_finish (GAsyncResult* _res_);
static gboolean _vala_main_async_co (ValaMainAsyncData* _data_);
static gboolean __vala_main_async_co_gsource_func (gpointer self);

static void
_vala_main_async_data_free (gpointer _data)
{
	ValaMainAsyncData* _data_;
	_data_ = _data;
	g_slice_free (ValaMainAsyncData, _data_);
}

void
_vala_main_async (gchar** args,
                  gint args_length1,
                  GAsyncReadyCallback _callback_,
                  gpointer _user_data_)
{
	ValaMainAsyncData* _data_;
	_data_ = g_slice_new0 (ValaMainAsyncData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_name (_data_->_async_result, "main");
	g_task_set_task_data (_data_->_async_result, _data_, _vala_main_async_data_free);
	_data_->args = args;
	_data_->args_length1 = args_length1;
	_vala_main_async_co (_data_);
}

void
_vala_main_finish (GAsyncResult* _res_)
{
	ValaMainAsyncData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
__vala_main_async_co_gsource_func (gpointer self)
{
	gboolean result;
	result = _vala_main_async_co (self);
	return result;
}

static gboolean
_vala_main_async_co (ValaMainAsyncData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		case 1:
		goto _state_1;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	g_idle_add_full (G_PRIORITY_DEFAULT_IDLE, __vala_main_async_co_gsource_func, _data_, NULL);
	_data_->_state_ = 1;
	return FALSE;
	_state_1:
	;
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main_async_callback (GObject* source_object,
                           GAsyncResult* res,
                           gpointer user_data)
{
	GMainLoop* loop = user_data;
	_vala_main_finish (res);
	g_main_loop_quit (loop);
}

int
main (int argc,
      char ** argv)
{
	GMainLoop* loop;
	loop = g_main_loop_new (NULL, FALSE);
	_vala_main_async (argv, argc, _vala_main_async_callback, loop);
	g_main_loop_run (loop);
	g_main_loop_unref (loop);
	return 0;
}

