/* arrays_inline_struct.c generated by valac, the Vala compiler
 * generated from arrays_inline_struct.vala, do not modify */

#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _FooStruct FooStruct;
#define _g_free0(var) (var = (g_free (var), NULL))

struct _FooStruct {
	guint8 i;
	gchar* s;
};

VALA_EXTERN FooStruct* foo_struct_dup (const FooStruct* self);
VALA_EXTERN void foo_struct_free (FooStruct* self);
VALA_EXTERN void foo_struct_copy (const FooStruct* self,
                      FooStruct* dest);
VALA_EXTERN void foo_struct_destroy (FooStruct* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (FooStruct, foo_struct_destroy)
static void _vala_main (void);
static void _vala_FooStruct_array_destroy (FooStruct * array,
                                    gssize array_length);
static void _vala_GValue_array_destroy (GValue * array,
                                 gssize array_length);

void
foo_struct_copy (const FooStruct* self,
                 FooStruct* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	(*dest).i = (*self).i;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
}

void
foo_struct_destroy (FooStruct* self)
{
	_g_free0 ((*self).s);
}

FooStruct*
foo_struct_dup (const FooStruct* self)
{
	FooStruct* dup;
	dup = g_new0 (FooStruct, 1);
	foo_struct_copy (self, dup);
	return dup;
}

void
foo_struct_free (FooStruct* self)
{
	foo_struct_destroy (self);
	g_free (self);
}

static void
_vala_FooStruct_array_destroy (FooStruct * array,
                               gssize array_length)
{
	if (array != NULL) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			foo_struct_destroy (&array[i]);
		}
	}
}

static void
_vala_GValue_array_destroy (GValue * array,
                            gssize array_length)
{
	if (array != NULL) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			g_value_unset (&array[i]);
		}
	}
}

static void
_vala_main (void)
{
	{
		FooStruct array[2] = {0};
		gchar* _tmp0_;
		FooStruct _tmp1_ = {0};
		gchar* _tmp2_;
		FooStruct _tmp3_ = {0};
		_tmp0_ = g_strdup ("foo");
		_tmp1_.i = (guint8) 23;
		_g_free0 (_tmp1_.s);
		_tmp1_.s = _tmp0_;
		foo_struct_destroy (&array[0]);
		array[0] = _tmp1_;
		_tmp2_ = g_strdup ("bar");
		_tmp3_.i = (guint8) 42;
		_g_free0 (_tmp3_.s);
		_tmp3_.s = _tmp2_;
		foo_struct_destroy (&array[1]);
		array[1] = _tmp3_;
		_vala_FooStruct_array_destroy (array, 2);
	}
	{
		GValue array[2] = {0};
		g_value_init (&array[0], G_TYPE_INT);
		g_value_init (&array[1], G_TYPE_STRING);
		_vala_GValue_array_destroy (array, 2);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

