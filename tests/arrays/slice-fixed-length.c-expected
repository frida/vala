/* arrays_slice_fixed_length.c generated by valac, the Vala compiler
 * generated from arrays_slice_fixed_length.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void manam (gchar** foo,
            gint foo_length1);
VALA_EXTERN void minim (gchar** foo,
            gint foo_length1);
static void _vala_main (void);
static gchar** _vala_array_dup1 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup2 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup3 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup4 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup5 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup6 (gchar** self,
                          gssize length);
static gchar** _vala_array_dup7 (gchar** self,
                          gssize length);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

void
manam (gchar** foo,
       gint foo_length1)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	_vala_assert (foo_length1 == 2, "foo.length == 2");
	_tmp0_ = foo[0];
	_vala_assert (g_strcmp0 (_tmp0_, "bar") == 0, "foo[0] == \"bar\"");
	_tmp1_ = foo[1];
	_vala_assert (g_strcmp0 (_tmp1_, "baz") == 0, "foo[1] == \"baz\"");
}

void
minim (gchar** foo,
       gint foo_length1)
{
	const gchar* _tmp0_;
	const gchar* _tmp1_;
	_vala_assert (foo_length1 == 2, "foo.length == 2");
	_tmp0_ = foo[0];
	_vala_assert (g_strcmp0 (_tmp0_, "bar") == 0, "foo[0] == \"bar\"");
	_tmp1_ = foo[1];
	_vala_assert (g_strcmp0 (_tmp1_, "baz") == 0, "foo[1] == \"baz\"");
	foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
}

static gchar**
_vala_array_dup1 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup2 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup3 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup4 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup5 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup6 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static gchar**
_vala_array_dup7 (gchar** self,
                  gssize length)
{
	if (length >= 0) {
		gchar** result;
		gssize i;
		result = g_new0 (gchar*, length + 1);
		for (i = 0; i < length; i++) {
			gchar* _tmp0_;
			_tmp0_ = g_strdup (self[i]);
			result[i] = _tmp0_;
		}
		return result;
	}
	return NULL;
}

static void
_vala_main (void)
{
	gchar* bar[4] = {0};
	gchar* _tmp0_;
	gchar* _tmp1_;
	gchar* _tmp2_;
	gchar* _tmp3_;
	gchar* _tmp4_[4] = {0};
	_tmp0_ = g_strdup ("foo");
	_tmp1_ = g_strdup ("bar");
	_tmp2_ = g_strdup ("baz");
	_tmp3_ = g_strdup ("buzz");
	_tmp4_[0] = _tmp0_;
	_tmp4_[1] = _tmp1_;
	_tmp4_[2] = _tmp2_;
	_tmp4_[3] = _tmp3_;
	memcpy (bar, _tmp4_, 4 * sizeof (gchar*));
	{
		gchar** foo = NULL;
		gchar** _tmp5_;
		gint _tmp5__length1;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp6_;
		const gchar* _tmp7_;
		_tmp5_ = _vala_array_dup1 (bar + 1, 3 - 1);
		_tmp5__length1 = 3 - 1;
		foo = _tmp5_;
		foo_length1 = _tmp5__length1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp6_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp6_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp7_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp7_, "baz") == 0, "foo[1] == \"baz\"");
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
	}
	{
		gchar** foo = NULL;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		foo = bar + 1;
		foo_length1 = 3 - 1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp8_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp8_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp9_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp9_, "baz") == 0, "foo[1] == \"baz\"");
	}
	{
		gint begin = 0;
		gchar** foo = NULL;
		gchar** _tmp10_;
		gint _tmp10__length1;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		begin = 1;
		_tmp10_ = _vala_array_dup2 (bar + begin, 3 - begin);
		_tmp10__length1 = 3 - begin;
		foo = _tmp10_;
		foo_length1 = _tmp10__length1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp11_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp11_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp12_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp12_, "baz") == 0, "foo[1] == \"baz\"");
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
	}
	{
		gchar** foo = NULL;
		gchar** _tmp13_;
		gint _tmp13__length1;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp14_;
		const gchar* _tmp15_;
		_tmp13_ = _vala_array_dup3 (bar + 1, 3 - 1);
		_tmp13__length1 = 3 - 1;
		foo = _tmp13_;
		foo_length1 = _tmp13__length1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp14_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp14_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp15_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp15_, "baz") == 0, "foo[1] == \"baz\"");
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
	}
	{
		gchar** foo = NULL;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp16_;
		const gchar* _tmp17_;
		foo = bar + 1;
		foo_length1 = 3 - 1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp16_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp16_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp17_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp17_, "baz") == 0, "foo[1] == \"baz\"");
	}
	{
		gint end = 0;
		gchar** foo = NULL;
		gchar** _tmp18_;
		gint _tmp18__length1;
		gint foo_length1;
		gint _foo_size_;
		const gchar* _tmp19_;
		const gchar* _tmp20_;
		end = 3;
		_tmp18_ = _vala_array_dup4 (bar + 1, end - 1);
		_tmp18__length1 = end - 1;
		foo = _tmp18_;
		foo_length1 = _tmp18__length1;
		_foo_size_ = foo_length1;
		_vala_assert (foo_length1 == 2, "foo.length == 2");
		_tmp19_ = foo[0];
		_vala_assert (g_strcmp0 (_tmp19_, "bar") == 0, "foo[0] == \"bar\"");
		_tmp20_ = foo[1];
		_vala_assert (g_strcmp0 (_tmp20_, "baz") == 0, "foo[1] == \"baz\"");
		foo = (_vala_array_free (foo, foo_length1, (GDestroyNotify) g_free), NULL);
	}
	{
		manam (bar + 1, (gint) (3 - 1));
	}
	{
		gint begin = 0;
		begin = 1;
		manam (bar + begin, (gint) (3 - begin));
	}
	{
		gint end = 0;
		end = 3;
		manam (bar + 1, (gint) (end - 1));
	}
	{
		gchar** _tmp21_;
		gint _tmp21__length1;
		_tmp21_ = _vala_array_dup5 (bar + 1, 3 - 1);
		_tmp21__length1 = 3 - 1;
		minim (_tmp21_, (gint) _tmp21__length1);
	}
	{
		gint begin = 0;
		gchar** _tmp22_;
		gint _tmp22__length1;
		begin = 1;
		_tmp22_ = _vala_array_dup6 (bar + begin, 3 - begin);
		_tmp22__length1 = 3 - begin;
		minim (_tmp22_, (gint) _tmp22__length1);
	}
	{
		gint end = 0;
		gchar** _tmp23_;
		gint _tmp23__length1;
		end = 3;
		_tmp23_ = _vala_array_dup7 (bar + 1, end - 1);
		_tmp23__length1 = end - 1;
		minim (_tmp23_, (gint) _tmp23__length1);
	}
	_vala_array_destroy (bar, 4, (GDestroyNotify) g_free);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

