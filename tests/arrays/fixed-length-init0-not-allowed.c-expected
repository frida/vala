/* arrays_fixed_length_init0_not_allowed.c generated by valac, the Vala compiler
 * generated from arrays_fixed_length_init0_not_allowed.vala, do not modify */

#include <glib.h>
#include <string.h>

#define BAR 1024
#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);

static void
_vala_main (void)
{
	{
		static const gint FOO = 4;
		gchar bar[FOO];
		gchar _tmp0_[FOO];
		gchar baz[FOO];
		memset (_tmp0_, 0, FOO * sizeof (gchar));
		_tmp0_[0] = 'f';
		_tmp0_[1] = 'o';
		_tmp0_[2] = 'o';
		_tmp0_[3] = '\0';
		memcpy (bar, _tmp0_, FOO * sizeof (gchar));
		_vala_assert (g_strcmp0 ((const gchar*) bar, "foo") == 0, "(string) bar == \"foo\"");
		memset (baz, 0, FOO * sizeof (gchar));
		baz[0] = 'f';
		baz[1] = 'o';
		baz[2] = 'o';
		baz[3] = '\0';
		_vala_assert (g_strcmp0 ((const gchar*) baz, "foo") == 0, "(string) baz == \"foo\"");
	}
	{
		static const gint FOO = 1024;
		gchar* foo[FOO];
		const gchar* _tmp1_;
		const gchar* _tmp2_;
		const gchar* _tmp3_;
		memset (foo, 0, FOO * sizeof (gchar*));
		_tmp1_ = foo[0];
		_vala_assert (_tmp1_ == NULL, "foo[0] == null");
		_tmp2_ = foo[FOO / 2];
		_vala_assert (_tmp2_ == NULL, "foo[FOO / 2] == null");
		_tmp3_ = foo[FOO - 1];
		_vala_assert (_tmp3_ == NULL, "foo[FOO - 1] == null");
		_vala_array_destroy (foo, FOO, (GDestroyNotify) g_free);
	}
	{
		static const gint FOO = 1024;
		gchar* array[16 * FOO];
		const gchar* _tmp4_;
		const gchar* _tmp5_;
		const gchar* _tmp6_;
		memset (array, 0, (16 * FOO) * sizeof (gchar*));
		_tmp4_ = array[0];
		_vala_assert (_tmp4_ == NULL, "array[0] == null");
		_tmp5_ = array[(16 * FOO) / 2];
		_vala_assert (_tmp5_ == NULL, "array[16 * FOO / 2] == null");
		_tmp6_ = array[(16 * FOO) - 1];
		_vala_assert (_tmp6_ == NULL, "array[16 * FOO - 1] == null");
		_vala_array_destroy (array, 16 * FOO, (GDestroyNotify) g_free);
	}
	{
		gchar* array[BAR] = {0};
		const gchar* _tmp7_;
		const gchar* _tmp8_;
		const gchar* _tmp9_;
		_tmp7_ = array[0];
		_vala_assert (_tmp7_ == NULL, "array[0] == null");
		_tmp8_ = array[BAR / 2];
		_vala_assert (_tmp8_ == NULL, "array[BAR / 2] == null");
		_tmp9_ = array[BAR - 1];
		_vala_assert (_tmp9_ == NULL, "array[BAR - 1] == null");
		_vala_array_destroy (array, BAR, (GDestroyNotify) g_free);
	}
	{
		gchar* array[16 * BAR];
		const gchar* _tmp10_;
		const gchar* _tmp11_;
		const gchar* _tmp12_;
		memset (array, 0, (16 * BAR) * sizeof (gchar*));
		_tmp10_ = array[0];
		_vala_assert (_tmp10_ == NULL, "array[0] == null");
		_tmp11_ = array[(16 * BAR) / 2];
		_vala_assert (_tmp11_ == NULL, "array[16 * BAR / 2] == null");
		_tmp12_ = array[(16 * BAR) - 1];
		_vala_assert (_tmp12_ == NULL, "array[16 * BAR - 1] == null");
		_vala_array_destroy (array, 16 * BAR, (GDestroyNotify) g_free);
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

