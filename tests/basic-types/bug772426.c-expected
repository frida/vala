/* basic_types_bug772426.c generated by valac, the Vala compiler
 * generated from basic_types_bug772426.vala, do not modify */

#include <glib.h>
#include <string.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN gint BUFFER_LENGTH;
gint BUFFER_LENGTH = 1048576;

static void _vala_main (void);
static GVariant* _variant_new1 (guint8* value,
                         gint value_length1);
static guint8* _variant_get1 (GVariant* value,
                       gint* result_length1);
static inline gpointer _vala_memdup2 (gconstpointer mem,
                        gsize byte_size);

static GVariant*
_variant_new1 (guint8* value,
               gint value_length1)
{
	guint8* _tmp1_;
	_tmp1_ = _vala_memdup2 (value, value_length1);
	return g_variant_ref_sink (g_variant_new_from_data (G_VARIANT_TYPE ("ay"), _tmp1_, value_length1, TRUE, g_free, _tmp1_));
}

static guint8*
_variant_get1 (GVariant* value,
               gint* result_length1)
{
	gsize _tmp0__length;
	guint8* _tmp0_;
	_tmp0__length = g_variant_get_size (value);
	_tmp0_ = _vala_memdup2 (g_variant_get_data (value), _tmp0__length);
	*result_length1 = _tmp0__length;
	return _tmp0_;
}

static void
_vala_main (void)
{
	void* buffer_p = NULL;
	void* _tmp0_;
	guint8* buffer = NULL;
	gint buffer_length1;
	gint _buffer_size_;
	GVariant* v = NULL;
	GVariant* _tmp2_;
	guint8* _result_ = NULL;
	guint8* _tmp3_ = NULL;
	gint _tmp3__length1 = 0;
	gint _result__length1;
	gint __result__size_;
	_tmp0_ = g_malloc ((gsize) BUFFER_LENGTH);
	buffer_p = _tmp0_;
	memset (buffer_p, 0x55555555, (gsize) BUFFER_LENGTH);
	buffer = (guint8*) buffer_p;
	buffer_length1 = -1;
	_buffer_size_ = buffer_length1;
	buffer_length1 = BUFFER_LENGTH;
	_tmp2_ = _variant_new1 (buffer, buffer_length1);
	v = _tmp2_;
	_tmp3_ = _variant_get1 (v, &_tmp3__length1);
	_result_ = _tmp3_;
	_result__length1 = _tmp3__length1;
	__result__size_ = _result__length1;
	_vala_assert (memcmp (buffer, _result_, (gsize) BUFFER_LENGTH) == 0, "Memory.cmp (buffer, result, BUFFER_LENGTH) == 0");
	g_free (buffer_p);
	_result_ = (g_free (_result_), NULL);
	_g_variant_unref0 (v);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static inline gpointer
_vala_memdup2 (gconstpointer mem,
               gsize byte_size)
{
	gpointer new_mem;
	if (mem && byte_size != 0) {
		new_mem = g_malloc (byte_size);
		memcpy (new_mem, mem, byte_size);
	} else {
		new_mem = NULL;
	}
	return new_mem;
}

