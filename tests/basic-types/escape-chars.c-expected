/* basic_types_escape_chars.c generated by valac, the Vala compiler
 * generated from basic_types_escape_chars.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

VALA_EXTERN void test_x_escape_chars (void);
VALA_EXTERN void test_u_escape_chars (void);
VALA_EXTERN void test_simple_escape_chars (void);
static void _vala_main (void);

void
test_x_escape_chars (void)
{
	gchar* s = NULL;
	gchar* _tmp0_;
	gchar* s1 = NULL;
	gchar* _tmp1_;
	_tmp0_ = g_strdup ("Copyright \xc2\xa9");
	s = _tmp0_;
	_vala_assert (g_strcmp0 (s, "Copyright ©") == 0, "s == \"Copyright \302\251\"");
	_tmp1_ = g_strdup ("\x9q");
	s1 = _tmp1_;
	_vala_assert (g_strcmp0 (s1, "\x09q") == 0, "s1 == \"\\x09q\"");
	_g_free0 (s1);
	_g_free0 (s);
}

void
test_u_escape_chars (void)
{
	gchar* s = NULL;
	gchar* _tmp0_;
	_tmp0_ = g_strdup ("Copyright \u00a9");
	s = _tmp0_;
	_vala_assert (g_strcmp0 (s, "Copyright ©") == 0, "s == \"Copyright \302\251\"");
	_g_free0 (s);
}

void
test_simple_escape_chars (void)
{
	gchar* s = NULL;
	gchar* _tmp0_;
	const gchar* _tmp1_;
	gchar* _tmp2_;
	const gchar* _tmp3_;
	const gchar* _tmp4_;
	gchar* _tmp5_;
	gchar* _tmp6_;
	_tmp0_ = g_strdup ("\b\f\n\r\t\v");
	s = _tmp0_;
	_tmp1_ = s;
	_tmp2_ = g_strescape (_tmp1_, NULL);
	_g_free0 (s);
	s = _tmp2_;
	_tmp3_ = s;
	_vala_assert (g_strcmp0 (_tmp3_, "\\b\\f\\n\\r\\t\\v") == 0, "s == \"\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\"");
	_tmp4_ = s;
	_tmp5_ = g_strcompress (_tmp4_);
	_tmp6_ = _tmp5_;
	_vala_assert (g_strcmp0 (_tmp6_, "\b\f\n\r\t\v") == 0, "s.compress () == \"\\b\\f\\n\\r\\t\\v\"");
	_g_free0 (_tmp6_);
	_g_free0 (s);
}

static void
_vala_main (void)
{
	test_x_escape_chars ();
	test_u_escape_chars ();
	test_simple_escape_chars ();
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

