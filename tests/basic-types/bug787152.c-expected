/* basic_types_bug787152.c generated by valac, the Vala compiler
 * generated from basic_types_bug787152.vala, do not modify */

#include <glib.h>
#include <string.h>

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	gint test[6] = {0};
	gint _tmp0_[6] = {0};
	gint _tmp1_;
	gint _tmp2_;
	gint test2[6] = {0};
	gint _tmp3_;
	gint _tmp4_;
	_tmp0_[0] = 23;
	_tmp0_[1] = 4711;
	_tmp0_[2] = 42;
	memcpy (test, _tmp0_, 6 * sizeof (gint));
	_tmp1_ = test[4];
	_vala_assert (_tmp1_ == 0, "test[4] == 0");
	_tmp2_ = test[5];
	_vala_assert (_tmp2_ == 0, "test[5] == 0");
	memcpy (test2, test, 6 * sizeof (gint));
	_tmp3_ = test2[4];
	_vala_assert (_tmp3_ == 0, "test2[4] == 0");
	_tmp4_ = test2[5];
	_vala_assert (_tmp4_ == 0, "test2[5] == 0");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

