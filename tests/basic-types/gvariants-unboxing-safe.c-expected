/* basic_types_gvariants_unboxing_safe.c generated by valac, the Vala compiler
 * generated from basic_types_gvariants_unboxing_safe.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _g_hash_table_unref0(var) ((var == NULL) ? NULL : (var = (g_hash_table_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gchar* s;
	guint64 u64;
	gboolean b;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
static void _vala_main (void);
static gboolean* _bool_dup (gboolean* self);
static gboolean* _variant_get1 (GVariant* value);
static gint16* _int16_dup (gint16* self);
static gint16* _variant_get2 (GVariant* value);
static gint32* _int32_dup (gint32* self);
static gint32* _variant_get3 (GVariant* value);
static gboolean _int32_equal (const gint32 * s1,
                       const gint32 * s2);
static gchar* _variant_get4 (GVariant* value);
static gboolean* _variant_get5 (GVariant* value);
static gboolean _bool_equal (const gboolean * s1,
                      const gboolean * s2);
static gint32* _variant_get6 (GVariant* value);
static gchar** _variant_get7 (GVariant* value,
                       gint* result_length1);
static GVariant* _variant_new1 (Foo value);
static void _variant_get8 (GVariant* value,
                    Foo * result);
static Foo* _variant_get9 (GVariant* value);
static void _g_free0_ (gpointer var);
static GVariant* _variant_new2 (GHashTable* value);
static GHashTable* _variant_get10 (GVariant* value);
static GHashTable* _variant_get11 (GVariant* value);
static void _vala_array_destroy (gpointer array,
                          gssize array_length,
                          GDestroyNotify destroy_func);
static void _vala_array_free (gpointer array,
                       gssize array_length,
                       GDestroyNotify destroy_func);
static inline gpointer _vala_memdup2 (gconstpointer mem,
                        gsize byte_size);

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	_tmp0_ = (*self).s;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).s);
	(*dest).s = _tmp1_;
	(*dest).u64 = (*self).u64;
	(*dest).b = (*self).b;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).s);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__volatile = 0;
	if (g_once_init_enter (&foo_type_id__volatile)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__volatile, foo_type_id);
	}
	return foo_type_id__volatile;
}

static gboolean*
_bool_dup (gboolean* self)
{
	gboolean* dup;
	dup = g_new0 (gboolean, 1);
	memcpy (dup, self, sizeof (gboolean));
	return dup;
}

static gpointer
__bool_dup0 (gpointer self)
{
	return self ? _bool_dup (self) : NULL;
}

static gboolean*
_variant_get1 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN)) {
		gboolean _tmp3_;
		gboolean* _tmp4_;
		_tmp3_ = g_variant_get_boolean (value);
		_tmp4_ = __bool_dup0 (&_tmp3_);
		return _tmp4_;
	} else {
		return NULL;
	}
}

static gint16*
_int16_dup (gint16* self)
{
	gint16* dup;
	dup = g_new0 (gint16, 1);
	memcpy (dup, self, sizeof (gint16));
	return dup;
}

static gpointer
__int16_dup0 (gpointer self)
{
	return self ? _int16_dup (self) : NULL;
}

static gint16*
_variant_get2 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT16)) {
		gint16 _tmp7_;
		gint16* _tmp8_;
		_tmp7_ = g_variant_get_int16 (value);
		_tmp8_ = __int16_dup0 (&_tmp7_);
		return _tmp8_;
	} else {
		return NULL;
	}
}

static gint32*
_int32_dup (gint32* self)
{
	gint32* dup;
	dup = g_new0 (gint32, 1);
	memcpy (dup, self, sizeof (gint32));
	return dup;
}

static gpointer
__int32_dup0 (gpointer self)
{
	return self ? _int32_dup (self) : NULL;
}

static gint32*
_variant_get3 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT32)) {
		gint32 _tmp11_;
		gint32* _tmp12_;
		_tmp11_ = g_variant_get_int32 (value);
		_tmp12_ = __int32_dup0 (&_tmp11_);
		return _tmp12_;
	} else {
		return NULL;
	}
}

static gboolean
_int32_equal (const gint32 * s1,
              const gint32 * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gchar*
_variant_get4 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_STRING)) {
		return g_variant_dup_string (value, NULL);
	} else {
		return NULL;
	}
}

static gboolean*
_variant_get5 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN)) {
		gboolean _tmp19_;
		gboolean* _tmp20_;
		_tmp19_ = g_variant_get_boolean (value);
		_tmp20_ = __bool_dup0 (&_tmp19_);
		return _tmp20_;
	} else {
		return NULL;
	}
}

static gboolean
_bool_equal (const gboolean * s1,
             const gboolean * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	return (*s1) == (*s2);
}

static gint32*
_variant_get6 (GVariant* value)
{
	if (value && g_variant_is_of_type (value, G_VARIANT_TYPE_INT32)) {
		gint32 _tmp24_;
		gint32* _tmp25_;
		_tmp24_ = g_variant_get_int32 (value);
		_tmp25_ = __int32_dup0 (&_tmp24_);
		return _tmp25_;
	} else {
		return NULL;
	}
}

static gchar**
_variant_get7 (GVariant* value,
               gint* result_length1)
{
	GVariantType* _tmp34_ = NULL;
	_tmp34_ = g_variant_type_new ("as");
	if (value && g_variant_is_of_type (value, _tmp34_)) {
		gchar** _tmp35_;
		gint _tmp35__length;
		gint _tmp35__size;
		gint _tmp35__length1;
		GVariantIter _tmp36_;
		GVariant* _tmp37_;
		gchar** _tmp38_;
		gint _tmp38__length1;
		_tmp35_ = g_new (gchar*, 5);
		_tmp35__length = 0;
		_tmp35__size = 4;
		_tmp35__length1 = 0;
		g_variant_iter_init (&_tmp36_, value);
		for (; (_tmp37_ = g_variant_iter_next_value (&_tmp36_)) != NULL; _tmp35__length1++) {
			if (_tmp35__size == _tmp35__length) {
				_tmp35__size = 2 * _tmp35__size;
				_tmp35_ = g_renew (gchar*, _tmp35_, _tmp35__size + 1);
			}
			_tmp35_[_tmp35__length++] = g_variant_dup_string (_tmp37_, NULL);
			g_variant_unref (_tmp37_);
		}
		*result_length1 = _tmp35__length1;
		_tmp35_[_tmp35__length] = NULL;
		g_variant_type_free (_tmp34_);
		_tmp38_ = _tmp35_;
		_tmp38__length1 = -1;
		return _tmp38_;
	} else {
		g_variant_type_free (_tmp34_);
		return NULL;
	}
}

static GVariant*
_variant_new1 (Foo value)
{
	GVariantBuilder _tmp43_;
	g_variant_builder_init (&_tmp43_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp43_, g_variant_new_string (value.s));
	g_variant_builder_add_value (&_tmp43_, g_variant_new_uint64 (value.u64));
	g_variant_builder_add_value (&_tmp43_, g_variant_new_boolean (value.b));
	return g_variant_ref_sink (g_variant_builder_end (&_tmp43_));
}

static void
_variant_get8 (GVariant* value,
               Foo * result)
{
	Foo _tmp49_;
	GVariantIter _tmp50_;
	GVariant* _tmp51_;
	GVariant* _tmp52_;
	GVariant* _tmp53_;
	g_variant_iter_init (&_tmp50_, value);
	_tmp51_ = g_variant_iter_next_value (&_tmp50_);
	_tmp49_.s = g_variant_dup_string (_tmp51_, NULL);
	g_variant_unref (_tmp51_);
	_tmp52_ = g_variant_iter_next_value (&_tmp50_);
	_tmp49_.u64 = g_variant_get_uint64 (_tmp52_);
	g_variant_unref (_tmp52_);
	_tmp53_ = g_variant_iter_next_value (&_tmp50_);
	_tmp49_.b = g_variant_get_boolean (_tmp53_);
	g_variant_unref (_tmp53_);
	*result = _tmp49_;
}

static Foo*
_variant_get9 (GVariant* value)
{
	GVariantType* _tmp60_ = NULL;
	_tmp60_ = g_variant_type_new ("(stb)");
	if (value && g_variant_is_of_type (value, _tmp60_)) {
		Foo _tmp61_;
		GVariantIter _tmp62_;
		GVariant* _tmp63_;
		GVariant* _tmp64_;
		GVariant* _tmp65_;
		Foo* _tmp66_;
		g_variant_iter_init (&_tmp62_, value);
		_tmp63_ = g_variant_iter_next_value (&_tmp62_);
		_tmp61_.s = g_variant_dup_string (_tmp63_, NULL);
		g_variant_unref (_tmp63_);
		_tmp64_ = g_variant_iter_next_value (&_tmp62_);
		_tmp61_.u64 = g_variant_get_uint64 (_tmp64_);
		g_variant_unref (_tmp64_);
		_tmp65_ = g_variant_iter_next_value (&_tmp62_);
		_tmp61_.b = g_variant_get_boolean (_tmp65_);
		g_variant_unref (_tmp65_);
		g_variant_type_free (_tmp60_);
		_tmp66_ = _vala_memdup2 (&_tmp61_, sizeof (Foo));
		return _tmp66_;
	} else {
		g_variant_type_free (_tmp60_);
		return NULL;
	}
}

static void
_g_free0_ (gpointer var)
{
	var = (g_free (var), NULL);
}

static GVariant*
_variant_new2 (GHashTable* value)
{
	GVariantBuilder _tmp75_;
	GHashTableIter _tmp76_;
	gpointer _tmp77_;
	gpointer _tmp78_;
	g_hash_table_iter_init (&_tmp76_, value);
	g_variant_builder_init (&_tmp75_, G_VARIANT_TYPE ("a{ss}"));
	while (g_hash_table_iter_next (&_tmp76_, &_tmp77_, &_tmp78_)) {
		gchar* _key;
		gchar* _value;
		_key = (gchar*) _tmp77_;
		_value = (gchar*) _tmp78_;
		g_variant_builder_add (&_tmp75_, "{?*}", g_variant_new_string (_key), g_variant_new_string (_value));
	}
	return g_variant_ref_sink (g_variant_builder_end (&_tmp75_));
}

static GHashTable*
_variant_get10 (GVariant* value)
{
	GVariantType* _tmp82_ = NULL;
	_tmp82_ = g_variant_type_new ("a{ss}");
	if (value && g_variant_is_of_type (value, _tmp82_)) {
		GHashTable* _tmp83_;
		GVariantIter _tmp84_;
		GVariant* _tmp85_;
		GVariant* _tmp86_;
		GHashTable* _tmp87_;
		_tmp83_ = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
		g_variant_iter_init (&_tmp84_, value);
		while (g_variant_iter_loop (&_tmp84_, "{?*}", &_tmp85_, &_tmp86_)) {
			g_hash_table_insert (_tmp83_, g_variant_dup_string (_tmp85_, NULL), g_variant_dup_string (_tmp86_, NULL));
		}
		g_variant_type_free (_tmp82_);
		_tmp87_ = _tmp83_;
		return _tmp87_;
	} else {
		g_variant_type_free (_tmp82_);
		return NULL;
	}
}

static GHashTable*
_variant_get11 (GVariant* value)
{
	GVariantType* _tmp92_ = NULL;
	_tmp92_ = g_variant_type_new ("a{is}");
	if (value && g_variant_is_of_type (value, _tmp92_)) {
		GHashTable* _tmp93_;
		GVariantIter _tmp94_;
		GVariant* _tmp95_;
		GVariant* _tmp96_;
		GHashTable* _tmp97_;
		_tmp93_ = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, g_free);
		g_variant_iter_init (&_tmp94_, value);
		while (g_variant_iter_loop (&_tmp94_, "{?*}", &_tmp95_, &_tmp96_)) {
			g_hash_table_insert (_tmp93_, (gpointer) ((gintptr) g_variant_get_int32 (_tmp95_)), g_variant_dup_string (_tmp96_, NULL));
		}
		g_variant_type_free (_tmp92_);
		_tmp97_ = _tmp93_;
		return _tmp97_;
	} else {
		g_variant_type_free (_tmp92_);
		return NULL;
	}
}

static void
_vala_main (void)
{
	GVariant* v = NULL;
	GVariant* _tmp0_;
	GVariant* _tmp16_;
	gchar* _tmp26_;
	gchar* _tmp27_;
	gchar* _tmp28_;
	gchar** _tmp29_;
	gchar** _tmp30_;
	gint _tmp30__length1;
	GVariant* _tmp31_;
	Foo vsrc = {0};
	gchar* _tmp40_;
	Foo _tmp41_ = {0};
	Foo _tmp42_;
	GVariant* _tmp44_;
	GVariant* _tmp45_;
	const gchar* _tmp46_;
	GHashTable* vsrc2 = NULL;
	GHashFunc _tmp68_;
	GEqualFunc _tmp69_;
	GHashTable* _tmp70_;
	gchar* _tmp71_;
	gchar* _tmp72_;
	gchar* _tmp73_;
	gchar* _tmp74_;
	GVariant* _tmp79_;
	_tmp0_ = g_variant_new_int32 ((gint32) 4711);
	g_variant_ref_sink (_tmp0_);
	_g_variant_unref0 (v);
	v = _tmp0_;
	{
		gboolean* b = NULL;
		GVariant* _tmp1_;
		gboolean* _tmp2_;
		_tmp1_ = v;
		_tmp2_ = _variant_get1 (_tmp1_);
		b = _tmp2_;
		_vala_assert (b == NULL, "b == null");
		_g_free0 (b);
	}
	{
		gint16* i16 = NULL;
		GVariant* _tmp5_;
		gint16* _tmp6_;
		_tmp5_ = v;
		_tmp6_ = _variant_get2 (_tmp5_);
		i16 = _tmp6_;
		_vala_assert (i16 == NULL, "i16 == null");
		_g_free0 (i16);
	}
	{
		gint32* i32 = NULL;
		GVariant* _tmp9_;
		gint32* _tmp10_;
		gint32 _tmp13_;
		_tmp9_ = v;
		_tmp10_ = _variant_get3 (_tmp9_);
		i32 = _tmp10_;
		_tmp13_ = (gint32) 4711;
		_vala_assert (_int32_equal (i32, &_tmp13_) == TRUE, "i32 == 4711");
		_g_free0 (i32);
	}
	{
		gchar* s = NULL;
		GVariant* _tmp14_;
		gchar* _tmp15_;
		_tmp14_ = v;
		_tmp15_ = _variant_get4 (_tmp14_);
		s = _tmp15_;
		_vala_assert (s == NULL, "s == null");
		_g_free0 (s);
	}
	_tmp16_ = g_variant_new_boolean (TRUE);
	g_variant_ref_sink (_tmp16_);
	_g_variant_unref0 (v);
	v = _tmp16_;
	{
		gboolean* b = NULL;
		GVariant* _tmp17_;
		gboolean* _tmp18_;
		gboolean _tmp21_;
		_tmp17_ = v;
		_tmp18_ = _variant_get5 (_tmp17_);
		b = _tmp18_;
		_tmp21_ = TRUE;
		_vala_assert (_bool_equal (b, &_tmp21_) == TRUE, "b == true");
		_g_free0 (b);
	}
	{
		gint32* i32 = NULL;
		GVariant* _tmp22_;
		gint32* _tmp23_;
		_tmp22_ = v;
		_tmp23_ = _variant_get6 (_tmp22_);
		i32 = _tmp23_;
		_vala_assert (i32 == NULL, "i32 == null");
		_g_free0 (i32);
	}
	_tmp26_ = g_strdup ("foo");
	_tmp27_ = g_strdup ("bar");
	_tmp28_ = g_strdup ("manam");
	_tmp29_ = g_new0 (gchar*, 3 + 1);
	_tmp29_[0] = _tmp26_;
	_tmp29_[1] = _tmp27_;
	_tmp29_[2] = _tmp28_;
	_tmp30_ = _tmp29_;
	_tmp30__length1 = 3;
	_tmp31_ = g_variant_new_strv (_tmp30_, 3);
	g_variant_ref_sink (_tmp31_);
	_g_variant_unref0 (v);
	v = _tmp31_;
	_tmp30_ = (_vala_array_free (_tmp30_, _tmp30__length1, (GDestroyNotify) g_free), NULL);
	{
		gchar** sa = NULL;
		GVariant* _tmp32_;
		gchar** _tmp33_ = NULL;
		gint _tmp33__length1 = 0;
		gint sa_length1;
		gint _sa_size_;
		const gchar* _tmp39_;
		_tmp32_ = v;
		_tmp33_ = _variant_get7 (_tmp32_, &_tmp33__length1);
		sa = _tmp33_;
		sa_length1 = _tmp33__length1;
		_sa_size_ = sa_length1;
		_vala_assert (sa != NULL, "sa != null");
		_tmp39_ = sa[2];
		_vala_assert (g_strcmp0 (_tmp39_, "manam") == 0, "sa[2] == \"manam\"");
		sa = (_vala_array_free (sa, sa_length1, (GDestroyNotify) g_free), NULL);
	}
	_tmp40_ = g_strdup ("foo");
	_g_free0 (_tmp41_.s);
	_tmp41_.s = _tmp40_;
	_tmp41_.u64 = G_MAXUINT64;
	_tmp41_.b = TRUE;
	vsrc = _tmp41_;
	_tmp42_ = vsrc;
	_tmp44_ = _variant_new1 (_tmp42_);
	_g_variant_unref0 (v);
	v = _tmp44_;
	_tmp45_ = v;
	_tmp46_ = g_variant_get_type_string (_tmp45_);
	_vala_assert (g_strcmp0 ("(stb)", _tmp46_) == 0, "\"(stb)\" == v.get_type_string ()");
	{
		Foo real_st = {0};
		GVariant* _tmp47_;
		Foo _tmp48_;
		Foo _tmp54_;
		const gchar* _tmp55_;
		Foo _tmp56_;
		Foo _tmp57_;
		Foo* st = NULL;
		GVariant* _tmp58_;
		Foo* _tmp59_;
		const gchar* _tmp67_;
		_tmp47_ = v;
		_variant_get8 (_tmp47_, &_tmp48_);
		real_st = _tmp48_;
		_tmp54_ = real_st;
		_tmp55_ = _tmp54_.s;
		_vala_assert (g_strcmp0 (_tmp55_, "foo") == 0, "real_st.s == \"foo\"");
		_tmp56_ = real_st;
		_vala_assert (_tmp56_.u64 == G_MAXUINT64, "real_st.u64 == uint64.MAX");
		_tmp57_ = real_st;
		_vala_assert (_tmp57_.b == TRUE, "real_st.b == true");
		_tmp58_ = v;
		_tmp59_ = _variant_get9 (_tmp58_);
		st = _tmp59_;
		_vala_assert (st != NULL, "st != null");
		_tmp67_ = (*st).s;
		_vala_assert (g_strcmp0 (_tmp67_, "foo") == 0, "st.s == \"foo\"");
		_vala_assert ((*st).u64 == G_MAXUINT64, "st.u64 == uint64.MAX");
		_vala_assert ((*st).b == TRUE, "st.b == true");
		_foo_free0 (st);
		foo_destroy (&real_st);
	}
	_tmp68_ = g_str_hash;
	_tmp69_ = g_str_equal;
	_tmp70_ = g_hash_table_new_full (_tmp68_, _tmp69_, _g_free0_, _g_free0_);
	vsrc2 = _tmp70_;
	_tmp71_ = g_strdup ("foo");
	_tmp72_ = g_strdup ("bar");
	g_hash_table_insert (vsrc2, _tmp71_, _tmp72_);
	_tmp73_ = g_strdup ("bar");
	_tmp74_ = g_strdup ("manam");
	g_hash_table_insert (vsrc2, _tmp73_, _tmp74_);
	_tmp79_ = _variant_new2 (vsrc2);
	_g_variant_unref0 (v);
	v = _tmp79_;
	{
		GHashTable* dict = NULL;
		GVariant* _tmp80_;
		GHashTable* _tmp81_;
		gconstpointer _tmp88_;
		gconstpointer _tmp89_;
		_tmp80_ = v;
		_tmp81_ = _variant_get10 (_tmp80_);
		dict = _tmp81_;
		_tmp88_ = g_hash_table_lookup (dict, "foo");
		_vala_assert (g_strcmp0 ((const gchar*) _tmp88_, "bar") == 0, "dict.lookup (\"foo\") == \"bar\"");
		_tmp89_ = g_hash_table_lookup (dict, "bar");
		_vala_assert (g_strcmp0 ((const gchar*) _tmp89_, "manam") == 0, "dict.lookup (\"bar\") == \"manam\"");
		_g_hash_table_unref0 (dict);
	}
	{
		GHashTable* dict = NULL;
		GVariant* _tmp90_;
		GHashTable* _tmp91_;
		_tmp90_ = v;
		_tmp91_ = _variant_get11 (_tmp90_);
		dict = _tmp91_;
		_vala_assert (dict == NULL, "dict == null");
		_g_hash_table_unref0 (dict);
	}
	_g_hash_table_unref0 (vsrc2);
	foo_destroy (&vsrc);
	_g_variant_unref0 (v);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

static void
_vala_array_destroy (gpointer array,
                     gssize array_length,
                     GDestroyNotify destroy_func)
{
	if ((array != NULL) && (destroy_func != NULL)) {
		gssize i;
		for (i = 0; i < array_length; i = i + 1) {
			if (((gpointer*) array)[i] != NULL) {
				destroy_func (((gpointer*) array)[i]);
			}
		}
	}
}

static void
_vala_array_free (gpointer array,
                  gssize array_length,
                  GDestroyNotify destroy_func)
{
	_vala_array_destroy (array, array_length, destroy_func);
	g_free (array);
}

static inline gpointer
_vala_memdup2 (gconstpointer mem,
               gsize byte_size)
{
	gpointer new_mem;
	if (mem && byte_size != 0) {
		new_mem = g_malloc (byte_size);
		memcpy (new_mem, mem, byte_size);
	} else {
		new_mem = NULL;
	}
	return new_mem;
}

