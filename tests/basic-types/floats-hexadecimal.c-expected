/* basic_types_floats_hexadecimal.c generated by valac, the Vala compiler
 * generated from basic_types_floats_hexadecimal.vala, do not modify */

#include <glib.h>
#include <float.h>
#include <math.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	{
		gfloat foo = 0.0F;
		gfloat bar = 0.0F;
		foo = 0x1.fP1F;
		_vala_assert (foo == 3.875f, "foo == 3.875f");
		bar = 0xab.cdp2f;
		_vala_assert (bar == 687.203125f, "bar == 687.203125f");
	}
	{
		gdouble foo = 0.0;
		gdouble bar = 0.0;
		gboolean _tmp0_ = FALSE;
		foo = 0xf.ap3;
		_vala_assert (foo == 125.0, "foo == 125.0");
		bar = 0xdead.beefp5;
		if (bar > 1824183.866699) {
			_tmp0_ = bar < 1824183.8666993;
		} else {
			_tmp0_ = FALSE;
		}
		_vala_assert (_tmp0_, "bar > 1824183.866699 && bar < 1824183.8666993");
	}
	{
		gdouble foo = 0.0;
		gboolean _tmp1_ = FALSE;
		gdouble bar = 0.0;
		foo = 0x2022.1209p4;
		if (foo > 131617.127197) {
			_tmp1_ = foo < 131617.127198;
		} else {
			_tmp1_ = FALSE;
		}
		_vala_assert (_tmp1_, "foo > 131617.127197 && foo < 131617.127198");
		bar = 0x47.11p9;
		_vala_assert (bar == 36386.0, "bar == 36386.0");
	}
	{
		gdouble foo = 0.0;
		foo = 0x0.8P1;
		_vala_assert (foo == 1.0, "foo == 1.0");
	}
	{
		gdouble foo = 0.0;
		foo = 0xab.cdp20;
		_vala_assert (foo == 180146176.0, "foo == 180146176.0");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

