/* semantic_assignment_element_getter_setter.c generated by valac, the Vala compiler
 * generated from semantic_assignment_element_getter_setter.vala, do not modify */

#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gpointer* elements;
	gint elements_length1;
};

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN gpointer foo_get (Foo* self,
                  gint idx);
VALA_EXTERN void foo_set (Foo* self,
              gint idx,
              gconstpointer val);
static void _vala_main (void);

Foo*
foo_new (void)
{
	Foo* self;
	gpointer* _tmp0_;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	_tmp0_ = g_new0 (gpointer, 1);
	_tmp0_[0] = NULL;
	self->elements = (g_free (self->elements), NULL);
	self->elements = _tmp0_;
	self->elements_length1 = 1;
	return self;
}

gpointer
foo_get (Foo* self,
         gint idx)
{
	gpointer* _tmp0_;
	gint _tmp0__length1;
	gconstpointer _tmp1_;
	gpointer result;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = self->elements;
	_tmp0__length1 = self->elements_length1;
	_tmp1_ = _tmp0_[idx];
	result = _tmp1_;
	return result;
}

void
foo_set (Foo* self,
         gint idx,
         gconstpointer val)
{
	gpointer* _tmp0_;
	gint _tmp0__length1;
	g_return_if_fail (self != NULL);
	_tmp0_ = self->elements;
	_tmp0__length1 = self->elements_length1;
	_tmp0_[idx] = val;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	self->elements = (g_free (self->elements), NULL);
	g_slice_free (Foo, self);
}

static void
_vala_main (void)
{
	Foo* foo = NULL;
	Foo* _tmp0_;
	gpointer _tmp1_;
	gpointer _tmp2_;
	gpointer _tmp3_;
	gpointer _tmp4_;
	gpointer _tmp5_;
	gpointer _tmp6_;
	gpointer _tmp7_;
	gpointer _tmp8_;
	gpointer _tmp9_;
	_tmp0_ = foo_new ();
	foo = _tmp0_;
	foo_set (foo, 0, (gpointer) ((gintptr) 23));
	_tmp1_ = foo_get (foo, 0);
	_vala_assert (((gint) ((gintptr) _tmp1_)) == 23, "foo[0] == 23");
	_tmp2_ = foo_get (foo, 0);
	foo_set (foo, 0, (gpointer) ((gintptr) (((gint) ((gintptr) _tmp2_)) + 42)));
	_tmp3_ = foo_get (foo, 0);
	_vala_assert (((gint) ((gintptr) _tmp3_)) == 65, "foo[0] == 65");
	_tmp4_ = foo_get (foo, 0);
	foo_set (foo, 0, (gpointer) ((gintptr) (((gint) ((gintptr) _tmp4_)) * 2)));
	_tmp5_ = foo_get (foo, 0);
	_vala_assert (((gint) ((gintptr) _tmp5_)) == 130, "foo[0] == 130");
	_tmp6_ = foo_get (foo, 0);
	foo_set (foo, 0, (gpointer) ((gintptr) (((gint) ((gintptr) _tmp6_)) / 5)));
	_tmp7_ = foo_get (foo, 0);
	_vala_assert (((gint) ((gintptr) _tmp7_)) == 26, "foo[0] == 26");
	_tmp8_ = foo_get (foo, 0);
	foo_set (foo, 0, (gpointer) ((gintptr) (((gint) ((gintptr) _tmp8_)) - 4711)));
	_tmp9_ = foo_get (foo, 0);
	_vala_assert (((gint) ((gintptr) _tmp9_)) == -4685, "foo[0] == -4685");
	_foo_free0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

