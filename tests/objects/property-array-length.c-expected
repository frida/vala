/* objects_property_array_length.c generated by valac, the Vala compiler
 * generated from objects_property_array_length.vala, do not modify */

#include <glib.h>
#include <gio/gio.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 5)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#if defined(__clang__) && (__clang_major__ >= 13)
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef struct _Foo Foo;
typedef struct _FooData FooData;
#define _foo_free0(var) ((var == NULL) ? NULL : (var = (foo_free (var), NULL)))
typedef struct _BarData BarData;
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	int dummy;
};

struct _FooData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	guint8* data;
	gint data_length1;
};

struct _BarData {
	int _state_;
	GObject* _source_object_;
	GAsyncResult* _res_;
	GTask* _async_result;
	Foo* f;
	Foo* _tmp0_;
	guint8* _tmp1_;
	gint _tmp1__length1;
	gint _tmp2_;
	guint8* _tmp3_;
	gint _tmp3__length1;
	guint8* _tmp4_;
	gint _tmp4__length1;
};

VALA_EXTERN void foo_free (Foo * self);
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Foo, foo_free)
static void foo_instance_init (Foo * self);
VALA_EXTERN Foo* foo_new (void);
VALA_EXTERN guint8* foo_get_data (Foo* self,
                      gint* result_length1);
static void foo_data_free (gpointer _data);
VALA_EXTERN void foo (guint8* data,
          gint data_length1,
          GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN void foo_finish (GAsyncResult* _res_);
static gboolean foo_co (FooData* _data_);
static void bar_data_free (gpointer _data);
VALA_EXTERN void bar (GAsyncReadyCallback _callback_,
          gpointer _user_data_);
VALA_EXTERN void bar_finish (GAsyncResult* _res_);
static gboolean bar_co (BarData* _data_);
static void _vala_main (void);

Foo*
foo_new (void)
{
	Foo* self;
	self = g_slice_new0 (Foo);
	foo_instance_init (self);
	return self;
}

guint8*
foo_get_data (Foo* self,
              gint* result_length1)
{
	guint8* result;
	guint8* _tmp0_;
	guint8* _tmp1_;
	gint _tmp1__length1;
	g_return_val_if_fail (self != NULL, NULL);
	_tmp0_ = g_new0 (guint8, 42);
	_tmp1_ = _tmp0_;
	_tmp1__length1 = 42;
	if (result_length1) {
		*result_length1 = _tmp1__length1;
	}
	result = _tmp1_;
	return result;
}

static void
foo_instance_init (Foo * self)
{
}

void
foo_free (Foo * self)
{
	g_slice_free (Foo, self);
}

static void
foo_data_free (gpointer _data)
{
	FooData* _data_;
	_data_ = _data;
	g_slice_free (FooData, _data_);
}

void
foo (guint8* data,
     gint data_length1,
     GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	FooData* _data_;
	_data_ = g_slice_new0 (FooData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_name (_data_->_async_result, "foo");
	g_task_set_task_data (_data_->_async_result, _data_, foo_data_free);
	_data_->data = data;
	_data_->data_length1 = data_length1;
	foo_co (_data_);
}

void
foo_finish (GAsyncResult* _res_)
{
	FooData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
foo_co (FooData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_vala_assert (_data_->data_length1 == 42, "data.length == 42");
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
bar_data_free (gpointer _data)
{
	BarData* _data_;
	_data_ = _data;
	g_slice_free (BarData, _data_);
}

void
bar (GAsyncReadyCallback _callback_,
     gpointer _user_data_)
{
	BarData* _data_;
	_data_ = g_slice_new0 (BarData);
	_data_->_async_result = g_task_new (NULL, NULL, _callback_, _user_data_);
	g_task_set_name (_data_->_async_result, "bar");
	g_task_set_task_data (_data_->_async_result, _data_, bar_data_free);
	bar_co (_data_);
}

void
bar_finish (GAsyncResult* _res_)
{
	BarData* _data_;
	_data_ = g_task_propagate_pointer (G_TASK (_res_), NULL);
}

static gboolean
bar_co (BarData* _data_)
{
	switch (_data_->_state_) {
		case 0:
		goto _state_0;
		default:
		g_assert_not_reached ();
	}
	_state_0:
	_data_->_tmp0_ = foo_new ();
	_data_->f = _data_->_tmp0_;
	_data_->_tmp2_ = 0;
	_data_->_tmp1_ = foo_get_data (_data_->f, &_data_->_tmp2_);
	_data_->_tmp1__length1 = _data_->_tmp2_;
	_data_->_tmp3_ = _data_->_tmp1_;
	_data_->_tmp3__length1 = _data_->_tmp1__length1;
	_data_->_tmp4_ = _data_->_tmp3_;
	_data_->_tmp4__length1 = _data_->_tmp3__length1;
	foo (_data_->_tmp4_, (gint) _data_->_tmp3__length1, NULL, NULL);
	_data_->_tmp4_ = (g_free (_data_->_tmp4_), NULL);
	_foo_free0 (_data_->f);
	g_task_return_pointer (_data_->_async_result, _data_, NULL);
	if (_data_->_state_ != 0) {
		while (!g_task_get_completed (_data_->_async_result)) {
			g_main_context_iteration (g_task_get_context (_data_->_async_result), TRUE);
		}
	}
	g_object_unref (_data_->_async_result);
	return FALSE;
}

static void
_vala_main (void)
{
	bar (NULL, NULL);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

