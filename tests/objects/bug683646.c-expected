/* objects_bug683646.c generated by valac, the Vala compiler
 * generated from objects_bug683646.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef void (*Func) (gpointer user_data);
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
typedef struct _Block1Data Block1Data;

struct _Block1Data {
	int _ref_count_;
	GObject* a;
	GObject* b;
};

VALA_EXTERN void foo (GObject* a,
          GObject* b);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
static void _vala_lambda0_ (Block1Data* _data1_);
static void __vala_lambda0__func (gpointer self);
static void _vala_main (void);

static gpointer
_g_object_ref0 (gpointer self)
{
	return self ? g_object_ref (self) : NULL;
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
	g_atomic_int_inc (&_data1_->_ref_count_);
	return _data1_;
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
		_g_object_unref0 (_data1_->a);
		_g_object_unref0 (_data1_->b);
		g_slice_free (Block1Data, _data1_);
	}
}

static void
_vala_lambda0_ (Block1Data* _data1_)
{
	GObject* c = NULL;
	GObject* _tmp0_;
	GObject* d = NULL;
	GObject* _tmp1_;
	_tmp0_ = _g_object_ref0 (_data1_->a);
	c = _tmp0_;
	_tmp1_ = _g_object_ref0 (_data1_->b);
	d = _tmp1_;
	_g_object_unref0 (d);
	_g_object_unref0 (c);
}

static void
__vala_lambda0__func (gpointer self)
{
	_vala_lambda0_ (self);
}

void
foo (GObject* a,
     GObject* b)
{
	Block1Data* _data1_;
	GObject* _tmp0_;
	GObject* _tmp1_;
	GObject* _tmp2_;
	Func sub = NULL;
	gpointer sub_target;
	GDestroyNotify sub_target_destroy_notify;
	g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (a, G_TYPE_OBJECT));
	g_return_if_fail ((b == NULL) || G_TYPE_CHECK_INSTANCE_TYPE (b, G_TYPE_OBJECT));
	_data1_ = g_slice_new0 (Block1Data);
	_data1_->_ref_count_ = 1;
	_tmp0_ = _g_object_ref0 (a);
	_g_object_unref0 (_data1_->a);
	_data1_->a = _tmp0_;
	_tmp1_ = _g_object_ref0 (b);
	_g_object_unref0 (_data1_->b);
	_data1_->b = _tmp1_;
	_tmp2_ = _g_object_ref0 (_data1_->a);
	_g_object_unref0 (_data1_->b);
	_data1_->b = _tmp2_;
	sub = __vala_lambda0__func;
	sub_target = block1_data_ref (_data1_);
	sub_target_destroy_notify = block1_data_unref;
	(sub_target_destroy_notify == NULL) ? NULL : (sub_target_destroy_notify (sub_target), NULL);
	sub = NULL;
	sub_target = NULL;
	sub_target_destroy_notify = NULL;
	block1_data_unref (_data1_);
	_data1_ = NULL;
}

static void
_vala_main (void)
{
	GObject* _tmp0_;
	GObject* _tmp1_;
	_tmp0_ = g_object_new (G_TYPE_OBJECT, NULL);
	_tmp1_ = _tmp0_;
	foo (_tmp1_, NULL);
	_g_object_unref0 (_tmp1_);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

