GIR

Input:

<interface name="Foo"
           c:symbol-prefix="foo"
           c:type="TestFoo"
           glib:type-name="TestFoo"
           glib:get-type="test_foo_get_type"
           glib:type-struct="FooInterface">
</interface>
<record name="FooInterface"
        c:type="TestFooInterface"
        glib:is-gtype-struct-for="Foo">
  <field name="parent" readable="0" private="1">
    <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
  </field>
</record>
<class name="Bar"
       c:symbol-prefix="bar"
       c:type="TestBar"
       parent="GObject.Object"
       glib:type-name="TestBar"
       glib:get-type="test_bar_get_type"
       glib:type-struct="BarKlass">
  <field name="parent" readable="0" private="1">
    <type name="GObject.Object" c:type="GObject"/>
  </field>
</class>
<record name="BarKlass"
        c:type="TestBarKlass"
        glib:is-gtype-struct-for="Bar">
  <field name="parent" readable="0" private="1">
    <type name="GObject.ObjectClass" c:type="GObjectClass"/>
  </field>
</record>

Output:

[CCode (cheader_filename = "test.h", type_cname = "TestBarKlass", type_id = "test_bar_get_type ()")]
public class Bar : GLib.Object {
	[CCode (has_construct_function = false)]
	protected Bar ();
}
[CCode (cheader_filename = "test.h", type_cname = "TestFooInterface", type_id = "test_foo_get_type ()")]
public interface Foo : GLib.Object {
}
