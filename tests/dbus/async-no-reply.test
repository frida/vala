Packages: gio-2.0
D-Bus

Program: client

[DBus (name = "org.example.Sink")]
interface Sink : Object {
	public abstract async string[] list_messages () throws IOError;
	public abstract async void post_message (string message) throws IOError;
}

MainLoop main_loop;

async void run () {
	Sink sink = yield Bus.get_proxy (BusType.SESSION, "org.example.Sink", "/org/example/Sink");

	var events = new AsyncQueue<string> ();

	DBusConnection connection = ((DBusProxy) sink).g_connection;
	connection.add_filter ((conn, message, incoming) => {
		if (message.get_message_type () == METHOD_CALL &&
				message.get_interface () == "org.example.Sink" &&
				message.get_member () == "PostMessage") {
			events.push ("post_message() " + message.get_flags ().to_string ());
		}
		return message;
	});

	string[] messages = yield sink.list_messages ();
	assert (messages.length == 0);

	yield sink.post_message ("Hello, round-trip");
	assert (events.pop () == "post_message() G_DBUS_MESSAGE_FLAGS_NONE");
	assert (events.try_pop () == null);

	sink.post_message.begin ("Fire-and-forget");
	assert (events.pop () == "post_message() G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED");
	assert (events.try_pop () == null);

	messages = yield sink.list_messages ();
	assert (messages.length == 2);
	assert (messages[0] == "Hello, round-trip");
	assert (messages[1] == "Fire-and-forget");

	main_loop.quit ();
}

void main () {
	run.begin ();

	main_loop = new MainLoop (null, false);
	main_loop.run ();
}

Program: server

[DBus (name = "org.example.Sink")]
class Sink : Object {
	private string[] messages = new string[0];

	public async string[] list_messages () {
		return messages;
	}

	public async void post_message (string message) {
		messages += message;
	}
}

MainLoop main_loop;

void client_exit (Pid pid, int status) {
	assert (status == 0);
	main_loop.quit ();
}

void main () {
	var conn = Bus.get_sync (BusType.SESSION);
	conn.register_object ("/org/example/Sink", new Sink ());

	var request_result = conn.call_sync ("org.freedesktop.DBus", "/org/freedesktop/DBus", "org.freedesktop.DBus", "RequestName",
	                                      new Variant ("(su)", "org.example.Sink", 0x4), null, 0, -1);
	assert ((uint) request_result.get_child_value (0) == 1);

	Pid client_pid;
	Process.spawn_async (null, { "dbus_async_no_reply_client" }, null, SpawnFlags.DO_NOT_REAP_CHILD, null, out client_pid);
	ChildWatch.add (client_pid, client_exit);

	main_loop = new MainLoop ();
	main_loop.run ();
}
