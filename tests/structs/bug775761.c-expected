/* structs_bug775761.c generated by valac, the Vala compiler
 * generated from structs_bug775761.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>

#if !defined(VALA_STRICT_C)
#if !defined(__clang__) && defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wchar-subscripts"
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#pragma GCC diagnostic ignored "-Wincompatible-pointer-types"
#pragma GCC diagnostic ignored "-Wint-conversion"
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#pragma GCC diagnostic ignored "-Wpointer-sign"
#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
#pragma GCC diagnostic ignored "-Wreturn-type"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wchar-subscripts"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wincompatible-pointer-types"
#pragma clang diagnostic ignored "-Wint-conversion"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#pragma clang diagnostic ignored "-Wpointer-sign"
#pragma clang diagnostic ignored "-Wpointer-to-int-cast"
#pragma clang diagnostic ignored "-Wreturn-type"
#pragma clang diagnostic ignored "-Wsign-compare"
#pragma clang diagnostic ignored "-Wunused-but-set-variable"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"
#pragma clang diagnostic ignored "-Wtypedef-redefinition"
#pragma clang diagnostic ignored "-Wunused-value"
#pragma clang diagnostic ignored "-Wvoid-pointer-to-int-cast"
#elif defined(_MSC_VER)
#pragma warning (disable: 4022 4047 4057 4090 4100 4102 4113 4127 4133 4152 4189 4244 4267 4305 4311 4312 4389 4456 4702 4715)
#endif
#if !defined(__clang__) && defined(__GNUC__) && (__GNUC__ >= 8)
#pragma GCC diagnostic ignored "-Wcast-function-type"
#endif
#endif
#if !defined(VALA_EXTERN)
#if defined(_WIN32) || defined(__CYGWIN__)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gchar* foo;
	gint bar;
	gchar** baz;
	gint baz_length1;
	gint _baz_size_;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
VALA_EXTERN void foo_copy (const Foo* self,
               Foo* dest);
VALA_EXTERN void foo_destroy (Foo* self);
G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC (Foo, foo_destroy)
static void _vala_main (void);
static gboolean _foo_equal (const Foo * s1,
                     const Foo * s2);

const gchar* FOO_ARRAY[2] = {"manam", "minimi"};

void
foo_copy (const Foo* self,
          Foo* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	gchar** _tmp2_;
	gint _tmp2__length1;
	_tmp0_ = (*self).foo;
	_tmp1_ = g_strdup (_tmp0_);
	_g_free0 ((*dest).foo);
	(*dest).foo = _tmp1_;
	(*dest).bar = (*self).bar;
	_tmp2_ = (*self).baz;
	_tmp2__length1 = (*self).baz_length1;
	(*dest).baz = _tmp2_;
	(*dest).baz_length1 = _tmp2__length1;
	(*dest)._baz_size_ = (*dest).baz_length1;
}

void
foo_destroy (Foo* self)
{
	_g_free0 ((*self).foo);
}

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	foo_copy (self, dup);
	return dup;
}

void
foo_free (Foo* self)
{
	foo_destroy (self);
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static gboolean
_foo_equal (const Foo * s1,
            const Foo * s2)
{
	if (s1 == s2) {
		return TRUE;
	}
	if (s1 == NULL) {
		return FALSE;
	}
	if (s2 == NULL) {
		return FALSE;
	}
	if (g_strcmp0 (s1->foo, s2->foo)) {
		return FALSE;
	}
	if (s1->bar != s2->bar) {
		return FALSE;
	}
	if (s1->baz != s2->baz) {
		return FALSE;
	}
	return TRUE;
}

static void
_vala_main (void)
{
	Foo a = {0};
	gchar* _tmp0_;
	Foo _tmp1_ = {0};
	Foo b = {0};
	gchar* _tmp2_;
	Foo _tmp3_ = {0};
	Foo _tmp4_;
	Foo _tmp5_;
	Foo _tmp6_;
	gchar** _tmp7_;
	gint _tmp7__length1;
	_tmp0_ = g_strdup ("42");
	_g_free0 (_tmp1_.foo);
	_tmp1_.foo = _tmp0_;
	_tmp1_.bar = 42;
	_tmp1_.baz = FOO_ARRAY;
	_tmp1_.baz_length1 = G_N_ELEMENTS (FOO_ARRAY);
	_tmp1_._baz_size_ = _tmp1_.baz_length1;
	a = _tmp1_;
	_tmp2_ = g_strdup ("42");
	_g_free0 (_tmp3_.foo);
	_tmp3_.foo = _tmp2_;
	_tmp3_.bar = 42;
	_tmp3_.baz = FOO_ARRAY;
	_tmp3_.baz_length1 = G_N_ELEMENTS (FOO_ARRAY);
	_tmp3_._baz_size_ = _tmp3_.baz_length1;
	b = _tmp3_;
	_tmp4_ = a;
	_tmp5_ = b;
	_vala_assert (_foo_equal (&_tmp4_, &_tmp5_) == TRUE, "a == b");
	_tmp6_ = a;
	_tmp7_ = _tmp6_.baz;
	_tmp7__length1 = _tmp6_.baz_length1;
	_vala_assert (_tmp7__length1 == 2, "a.f3.length == 2");
	foo_destroy (&b);
	foo_destroy (&a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

