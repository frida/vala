/* structs_bug661945.c generated by valac, the Vala compiler
 * generated from structs_bug661945.vala, do not modify */

#include <glib-object.h>
#include <glib.h>
#include <string.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_FOO (foo_get_type ())
typedef struct _Foo Foo;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

struct _Foo {
	gint a;
	gint b;
};

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Foo* foo_dup (const Foo* self);
VALA_EXTERN void foo_free (Foo* self);
static void _vala_main (void);
static GVariant* _variant_new1 (Foo value);
static void _variant_get1 (GVariant* value,
                    Foo * result);

Foo*
foo_dup (const Foo* self)
{
	Foo* dup;
	dup = g_new0 (Foo, 1);
	memcpy (dup, self, sizeof (Foo));
	return dup;
}

void
foo_free (Foo* self)
{
	g_free (self);
}

static GType
foo_get_type_once (void)
{
	GType foo_type_id;
	foo_type_id = g_boxed_type_register_static ("Foo", (GBoxedCopyFunc) foo_dup, (GBoxedFreeFunc) foo_free);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__volatile = 0;
	if (g_once_init_enter (&foo_type_id__volatile)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__volatile, foo_type_id);
	}
	return foo_type_id__volatile;
}

static GVariant*
_variant_new1 (Foo value)
{
	GVariantBuilder _tmp1_;
	g_variant_builder_init (&_tmp1_, G_VARIANT_TYPE_TUPLE);
	g_variant_builder_add_value (&_tmp1_, g_variant_new_int32 (value.a));
	g_variant_builder_add_value (&_tmp1_, g_variant_new_int32 (value.b));
	return g_variant_ref_sink (g_variant_builder_end (&_tmp1_));
}

static void
_variant_get1 (GVariant* value,
               Foo * result)
{
	Foo _tmp4_;
	GVariantIter _tmp5_;
	GVariant* _tmp6_;
	GVariant* _tmp7_;
	g_variant_iter_init (&_tmp5_, value);
	_tmp6_ = g_variant_iter_next_value (&_tmp5_);
	_tmp4_.a = g_variant_get_int32 (_tmp6_);
	g_variant_unref (_tmp6_);
	_tmp7_ = g_variant_iter_next_value (&_tmp5_);
	_tmp4_.b = g_variant_get_int32 (_tmp7_);
	g_variant_unref (_tmp7_);
	*result = _tmp4_;
}

static void
_vala_main (void)
{
	GVariant* a = NULL;
	Foo _tmp0_ = {0};
	GVariant* _tmp2_;
	Foo b = {0};
	Foo _tmp3_;
	Foo _tmp8_;
	Foo _tmp9_;
	memset (&_tmp0_, 0, sizeof (Foo));
	_tmp0_.a = 2;
	_tmp0_.b = 3;
	_tmp2_ = _variant_new1 (_tmp0_);
	a = _tmp2_;
	_variant_get1 (a, &_tmp3_);
	b = _tmp3_;
	_tmp8_ = b;
	_vala_assert (_tmp8_.a == 2, "b.a == 2");
	_tmp9_ = b;
	_vala_assert (_tmp9_.b == 3, "b.b == 3");
	_g_variant_unref0 (a);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

