/* enums_default_gtype.c generated by valac, the Vala compiler
 * generated from enums_default_gtype.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

typedef enum  {
	FOO_MANAM
} Foo;

typedef enum  {
	BAR_MANAM = 1 << 0
} Bar;

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (void);

static void
_vala_main (void)
{
	_vala_assert (G_TYPE_INT == G_TYPE_INT, "typeof (Foo) == typeof (int)");
	_vala_assert (G_TYPE_UINT == G_TYPE_UINT, "typeof (Bar) == typeof (uint)");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

