/* enums_unsafe_assignment.c generated by valac, the Vala compiler
 * generated from enums_unsafe_assignment.vala, do not modify */

#include <glib-object.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

typedef enum  {
	FOO_BAR
} Foo;

#define TYPE_FOO (foo_get_type ())

VALA_EXTERN GType foo_get_type (void) G_GNUC_CONST ;
static void _vala_main (void);

static GType
foo_get_type_once (void)
{
	static const GEnumValue values[] = {{FOO_BAR, "FOO_BAR", "bar"}, {0, NULL, NULL}};
	GType foo_type_id;
	foo_type_id = g_enum_register_static ("Foo", values);
	return foo_type_id;
}

GType
foo_get_type (void)
{
	static volatile gsize foo_type_id__once = 0;
	if (g_once_init_enter (&foo_type_id__once)) {
		GType foo_type_id;
		foo_type_id = foo_get_type_once ();
		g_once_init_leave (&foo_type_id__once, foo_type_id);
	}
	return foo_type_id__once;
}

static void
_vala_main (void)
{
	{
		Foo foo = 0;
		foo = 23;
	}
	{
		Foo foo = 0;
		foo = FOO_BAR;
		foo = 42;
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

