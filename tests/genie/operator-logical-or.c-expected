/* genie_operator_logical_or.c generated by valac, the Vala compiler
 * generated from genie_operator_logical_or.gs, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

static void _vala_main (gchar** args,
                 gint args_length1);

static void
_vala_main (gchar** args,
            gint args_length1)
{
	gboolean a = FALSE;
	gboolean b = FALSE;
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	a = FALSE;
	b = TRUE;
	if (a) {
		_tmp0_ = TRUE;
	} else {
		_tmp0_ = b;
	}
	_vala_assert (_tmp0_, "a or b");
	if (a) {
		_tmp1_ = TRUE;
	} else {
		_tmp1_ = b;
	}
	_vala_assert (_tmp1_, "a || b");
}

int
main (int argc,
      char ** argv)
{
	_vala_main (argv, argc);
	return 0;
}

