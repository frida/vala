/* errors_errorcode.c generated by valac, the Vala compiler
 * generated from errors_errorcode.vala, do not modify */

#include <glib.h>
#include <gio/gio.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	FOO_ERROR_REALLY_BAD,
	FOO_ERROR_NOT_SO_GOOD,
	FOO_ERROR_EVEN_WORSE = 23
} FooError;
#define FOO_ERROR foo_error_quark ()

VALA_EXTERN GQuark foo_error_quark (void);
static void _vala_main (void);

GQuark
foo_error_quark (void)
{
	return g_quark_from_static_string ("foo-error-quark");
}

static void
_vala_main (void)
{
	{
		GError* _error_ = NULL;
		GError* _tmp0_;
		_tmp0_ = g_error_new_literal (G_IO_ERROR, G_IO_ERROR_NO_SPACE, "foo");
		_error_ = _tmp0_;
		_vala_assert (_error_->code == 12, "error.code == 12");
		_g_error_free0 (_error_);
	}
	{
		gint code = 0;
		code = G_IO_ERROR_NO_SPACE;
		_vala_assert (code == 12, "code == 12");
	}
	{
		GError* _error_ = NULL;
		GError* _tmp1_;
		_tmp1_ = g_error_new_literal (FOO_ERROR, FOO_ERROR_NOT_SO_GOOD, "foo");
		_error_ = _tmp1_;
		_vala_assert (_error_->code == 1, "error.code == 1");
		_g_error_free0 (_error_);
	}
	{
		gint code = 0;
		code = FOO_ERROR_NOT_SO_GOOD;
		_vala_assert (code == 1, "code == 1");
	}
	{
		GError* _error_ = NULL;
		GError* _tmp2_;
		_tmp2_ = g_error_new_literal (FOO_ERROR, FOO_ERROR_EVEN_WORSE, "foo");
		_error_ = _tmp2_;
		_vala_assert (_error_->code == 23, "error.code == 23");
		_g_error_free0 (_error_);
	}
	{
		gint code = 0;
		code = FOO_ERROR_EVEN_WORSE;
		_vala_assert (code == 23, "code == 23");
	}
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

