/* errors_default_gtype.c generated by valac, the Vala compiler
 * generated from errors_default_gtype.vala, do not modify */

#include <glib.h>
#include <glib-object.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define _vala_assert(expr, msg) if G_LIKELY (expr) ; else g_assertion_message_expr (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);
#define _vala_return_if_fail(expr, msg) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return; }
#define _vala_return_val_if_fail(expr, msg, val) if G_LIKELY (expr) ; else { g_return_if_fail_warning (G_LOG_DOMAIN, G_STRFUNC, msg); return val; }
#define _vala_warn_if_fail(expr, msg) if G_LIKELY (expr) ; else g_warn_message (G_LOG_DOMAIN, __FILE__, __LINE__, G_STRFUNC, msg);

typedef enum  {
	FOO_MANAM
} Foo;
#define FOO foo_quark ()

VALA_EXTERN GQuark foo_quark (void);
static void _vala_main (void);

GQuark
foo_quark (void)
{
	return g_quark_from_static_string ("foo-quark");
}

static void
_vala_main (void)
{
	_vala_assert (G_TYPE_ERROR == G_TYPE_ERROR, "typeof (Foo) == typeof (GLib.Error)");
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

