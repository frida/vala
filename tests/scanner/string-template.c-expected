/* scanner_string_template.c generated by valac, the Vala compiler
 * generated from scanner_string_template.vala, do not modify */

#include <stdlib.h>
#include <string.h>
#include <glib.h>

#define _g_free0(var) (var = (g_free (var), NULL))

static void _vala_main (void);

static const gchar*
string_to_string (const gchar* self)
{
	const gchar* result;
	g_return_val_if_fail (self != NULL, NULL);
	result = self;
	return result;
}

static void
_vala_main (void)
{
	gchar* foo = NULL;
	gchar* _tmp0_;
	gchar* bar = NULL;
	gchar* _tmp1_;
	gchar* manam = NULL;
	const gchar* _tmp2_;
	const gchar* _tmp3_;
	gchar* _tmp4_;
	gchar* minim = NULL;
	gchar* _tmp5_;
	_tmp0_ = g_strdup ("Hello");
	foo = _tmp0_;
	_tmp1_ = g_strdup ("world");
	bar = _tmp1_;
	_tmp2_ = string_to_string (foo);
	_tmp3_ = string_to_string (bar);
	_tmp4_ = g_strconcat (_tmp2_, " ", _tmp3_, "!", NULL);
	manam = _tmp4_;
	_tmp5_ = g_strdup ("");
	minim = _tmp5_;
	_g_free0 (minim);
	_g_free0 (manam);
	_g_free0 (bar);
	_g_free0 (foo);
}

int
main (int argc,
      char ** argv)
{
	_vala_main ();
	return 0;
}

