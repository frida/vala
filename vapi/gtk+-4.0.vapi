/* gtk+-4.0.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gdk", gir_namespace = "Gdk", gir_version = "4.0", lower_case_cprefix = "gdk_")]
namespace Gdk {
	namespace Key {
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_0")]
		public const int @0;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_1")]
		public const int @1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_2")]
		public const int @2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3")]
		public const int @3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_AltCursor")]
		public const int @3270_AltCursor;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Attn")]
		public const int @3270_Attn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_BackTab")]
		public const int @3270_BackTab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_ChangeScreen")]
		public const int @3270_ChangeScreen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Copy")]
		public const int @3270_Copy;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_CursorBlink")]
		public const int @3270_CursorBlink;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_CursorSelect")]
		public const int @3270_CursorSelect;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_DeleteWord")]
		public const int @3270_DeleteWord;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Duplicate")]
		public const int @3270_Duplicate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Enter")]
		public const int @3270_Enter;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_EraseEOF")]
		public const int @3270_EraseEOF;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_EraseInput")]
		public const int @3270_EraseInput;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_ExSelect")]
		public const int @3270_ExSelect;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_FieldMark")]
		public const int @3270_FieldMark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Ident")]
		public const int @3270_Ident;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Jump")]
		public const int @3270_Jump;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_KeyClick")]
		public const int @3270_KeyClick;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Left2")]
		public const int @3270_Left2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_PA1")]
		public const int @3270_PA1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_PA2")]
		public const int @3270_PA2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_PA3")]
		public const int @3270_PA3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Play")]
		public const int @3270_Play;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_PrintScreen")]
		public const int @3270_PrintScreen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Quit")]
		public const int @3270_Quit;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Record")]
		public const int @3270_Record;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Reset")]
		public const int @3270_Reset;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Right2")]
		public const int @3270_Right2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Rule")]
		public const int @3270_Rule;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Setup")]
		public const int @3270_Setup;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_3270_Test")]
		public const int @3270_Test;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_4")]
		public const int @4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_5")]
		public const int @5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_6")]
		public const int @6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_7")]
		public const int @7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_8")]
		public const int @8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_9")]
		public const int @9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_A")]
		public const int A;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AE")]
		public const int AE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Aacute")]
		public const int Aacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abelowdot")]
		public const int Abelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abreve")]
		public const int Abreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abreveacute")]
		public const int Abreveacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abrevebelowdot")]
		public const int Abrevebelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abrevegrave")]
		public const int Abrevegrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abrevehook")]
		public const int Abrevehook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Abrevetilde")]
		public const int Abrevetilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AccessX_Enable")]
		public const int AccessX_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AccessX_Feedback_Enable")]
		public const int AccessX_Feedback_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflex")]
		public const int Acircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflexacute")]
		public const int Acircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflexbelowdot")]
		public const int Acircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflexgrave")]
		public const int Acircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflexhook")]
		public const int Acircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Acircumflextilde")]
		public const int Acircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AddFavorite")]
		public const int AddFavorite;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Adiaeresis")]
		public const int Adiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Agrave")]
		public const int Agrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ahook")]
		public const int Ahook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Alt_L")]
		public const int Alt_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Alt_R")]
		public const int Alt_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Amacron")]
		public const int Amacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Aogonek")]
		public const int Aogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ApplicationLeft")]
		public const int ApplicationLeft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ApplicationRight")]
		public const int ApplicationRight;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_0")]
		public const int Arabic_0;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_1")]
		public const int Arabic_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_2")]
		public const int Arabic_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_3")]
		public const int Arabic_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_4")]
		public const int Arabic_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_5")]
		public const int Arabic_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_6")]
		public const int Arabic_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_7")]
		public const int Arabic_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_8")]
		public const int Arabic_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_9")]
		public const int Arabic_9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_ain")]
		public const int Arabic_ain;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_alef")]
		public const int Arabic_alef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_alefmaksura")]
		public const int Arabic_alefmaksura;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_beh")]
		public const int Arabic_beh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_comma")]
		public const int Arabic_comma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_dad")]
		public const int Arabic_dad;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_dal")]
		public const int Arabic_dal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_damma")]
		public const int Arabic_damma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_dammatan")]
		public const int Arabic_dammatan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_ddal")]
		public const int Arabic_ddal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_farsi_yeh")]
		public const int Arabic_farsi_yeh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_fatha")]
		public const int Arabic_fatha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_fathatan")]
		public const int Arabic_fathatan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_feh")]
		public const int Arabic_feh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_fullstop")]
		public const int Arabic_fullstop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_gaf")]
		public const int Arabic_gaf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_ghain")]
		public const int Arabic_ghain;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_ha")]
		public const int Arabic_ha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hah")]
		public const int Arabic_hah;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamza")]
		public const int Arabic_hamza;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamza_above")]
		public const int Arabic_hamza_above;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamza_below")]
		public const int Arabic_hamza_below;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamzaonalef")]
		public const int Arabic_hamzaonalef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamzaonwaw")]
		public const int Arabic_hamzaonwaw;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamzaonyeh")]
		public const int Arabic_hamzaonyeh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_hamzaunderalef")]
		public const int Arabic_hamzaunderalef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_heh")]
		public const int Arabic_heh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_heh_doachashmee")]
		public const int Arabic_heh_doachashmee;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_heh_goal")]
		public const int Arabic_heh_goal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_jeem")]
		public const int Arabic_jeem;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_jeh")]
		public const int Arabic_jeh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_kaf")]
		public const int Arabic_kaf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_kasra")]
		public const int Arabic_kasra;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_kasratan")]
		public const int Arabic_kasratan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_keheh")]
		public const int Arabic_keheh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_khah")]
		public const int Arabic_khah;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_lam")]
		public const int Arabic_lam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_madda_above")]
		public const int Arabic_madda_above;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_maddaonalef")]
		public const int Arabic_maddaonalef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_meem")]
		public const int Arabic_meem;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_noon")]
		public const int Arabic_noon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_noon_ghunna")]
		public const int Arabic_noon_ghunna;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_peh")]
		public const int Arabic_peh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_percent")]
		public const int Arabic_percent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_qaf")]
		public const int Arabic_qaf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_question_mark")]
		public const int Arabic_question_mark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_ra")]
		public const int Arabic_ra;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_rreh")]
		public const int Arabic_rreh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_sad")]
		public const int Arabic_sad;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_seen")]
		public const int Arabic_seen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_semicolon")]
		public const int Arabic_semicolon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_shadda")]
		public const int Arabic_shadda;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_sheen")]
		public const int Arabic_sheen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_sukun")]
		public const int Arabic_sukun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_superscript_alef")]
		public const int Arabic_superscript_alef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_switch")]
		public const int Arabic_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_tah")]
		public const int Arabic_tah;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_tatweel")]
		public const int Arabic_tatweel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_tcheh")]
		public const int Arabic_tcheh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_teh")]
		public const int Arabic_teh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_tehmarbuta")]
		public const int Arabic_tehmarbuta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_thal")]
		public const int Arabic_thal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_theh")]
		public const int Arabic_theh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_tteh")]
		public const int Arabic_tteh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_veh")]
		public const int Arabic_veh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_waw")]
		public const int Arabic_waw;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_yeh")]
		public const int Arabic_yeh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_yeh_baree")]
		public const int Arabic_yeh_baree;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_zah")]
		public const int Arabic_zah;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Arabic_zain")]
		public const int Arabic_zain;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Aring")]
		public const int Aring;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_AT")]
		public const int Armenian_AT;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_AYB")]
		public const int Armenian_AYB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_BEN")]
		public const int Armenian_BEN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_CHA")]
		public const int Armenian_CHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_DA")]
		public const int Armenian_DA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_DZA")]
		public const int Armenian_DZA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_E")]
		public const int Armenian_E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_FE")]
		public const int Armenian_FE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_GHAT")]
		public const int Armenian_GHAT;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_GIM")]
		public const int Armenian_GIM;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_HI")]
		public const int Armenian_HI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_HO")]
		public const int Armenian_HO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_INI")]
		public const int Armenian_INI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_JE")]
		public const int Armenian_JE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_KE")]
		public const int Armenian_KE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_KEN")]
		public const int Armenian_KEN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_KHE")]
		public const int Armenian_KHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_LYUN")]
		public const int Armenian_LYUN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_MEN")]
		public const int Armenian_MEN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_NU")]
		public const int Armenian_NU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_O")]
		public const int Armenian_O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_PE")]
		public const int Armenian_PE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_PYUR")]
		public const int Armenian_PYUR;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_RA")]
		public const int Armenian_RA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_RE")]
		public const int Armenian_RE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_SE")]
		public const int Armenian_SE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_SHA")]
		public const int Armenian_SHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_TCHE")]
		public const int Armenian_TCHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_TO")]
		public const int Armenian_TO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_TSA")]
		public const int Armenian_TSA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_TSO")]
		public const int Armenian_TSO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_TYUN")]
		public const int Armenian_TYUN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_VEV")]
		public const int Armenian_VEV;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_VO")]
		public const int Armenian_VO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_VYUN")]
		public const int Armenian_VYUN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_YECH")]
		public const int Armenian_YECH;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ZA")]
		public const int Armenian_ZA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ZHE")]
		public const int Armenian_ZHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_accent")]
		public const int Armenian_accent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_amanak")]
		public const int Armenian_amanak;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_apostrophe")]
		public const int Armenian_apostrophe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_at")]
		public const int Armenian_at;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ayb")]
		public const int Armenian_ayb;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ben")]
		public const int Armenian_ben;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_but")]
		public const int Armenian_but;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_cha")]
		public const int Armenian_cha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_da")]
		public const int Armenian_da;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_dza")]
		public const int Armenian_dza;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_e")]
		public const int Armenian_e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_exclam")]
		public const int Armenian_exclam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_fe")]
		public const int Armenian_fe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_full_stop")]
		public const int Armenian_full_stop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ghat")]
		public const int Armenian_ghat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_gim")]
		public const int Armenian_gim;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_hi")]
		public const int Armenian_hi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ho")]
		public const int Armenian_ho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_hyphen")]
		public const int Armenian_hyphen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ini")]
		public const int Armenian_ini;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_je")]
		public const int Armenian_je;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ke")]
		public const int Armenian_ke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ken")]
		public const int Armenian_ken;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_khe")]
		public const int Armenian_khe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ligature_ew")]
		public const int Armenian_ligature_ew;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_lyun")]
		public const int Armenian_lyun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_men")]
		public const int Armenian_men;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_nu")]
		public const int Armenian_nu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_o")]
		public const int Armenian_o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_paruyk")]
		public const int Armenian_paruyk;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_pe")]
		public const int Armenian_pe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_pyur")]
		public const int Armenian_pyur;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_question")]
		public const int Armenian_question;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_ra")]
		public const int Armenian_ra;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_re")]
		public const int Armenian_re;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_se")]
		public const int Armenian_se;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_separation_mark")]
		public const int Armenian_separation_mark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_sha")]
		public const int Armenian_sha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_shesht")]
		public const int Armenian_shesht;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_tche")]
		public const int Armenian_tche;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_to")]
		public const int Armenian_to;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_tsa")]
		public const int Armenian_tsa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_tso")]
		public const int Armenian_tso;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_tyun")]
		public const int Armenian_tyun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_verjaket")]
		public const int Armenian_verjaket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_vev")]
		public const int Armenian_vev;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_vo")]
		public const int Armenian_vo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_vyun")]
		public const int Armenian_vyun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_yech")]
		public const int Armenian_yech;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_yentamna")]
		public const int Armenian_yentamna;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_za")]
		public const int Armenian_za;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Armenian_zhe")]
		public const int Armenian_zhe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Atilde")]
		public const int Atilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudibleBell_Enable")]
		public const int AudibleBell_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioCycleTrack")]
		public const int AudioCycleTrack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioForward")]
		public const int AudioForward;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioLowerVolume")]
		public const int AudioLowerVolume;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioMedia")]
		public const int AudioMedia;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioMicMute")]
		public const int AudioMicMute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioMute")]
		public const int AudioMute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioNext")]
		public const int AudioNext;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioPause")]
		public const int AudioPause;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioPlay")]
		public const int AudioPlay;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioPrev")]
		public const int AudioPrev;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioRaiseVolume")]
		public const int AudioRaiseVolume;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioRandomPlay")]
		public const int AudioRandomPlay;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioRecord")]
		public const int AudioRecord;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioRepeat")]
		public const int AudioRepeat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioRewind")]
		public const int AudioRewind;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_AudioStop")]
		public const int AudioStop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Away")]
		public const int Away;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_B")]
		public const int B;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Babovedot")]
		public const int Babovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Back")]
		public const int Back;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_BackForward")]
		public const int BackForward;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_BackSpace")]
		public const int BackSpace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Battery")]
		public const int Battery;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Begin")]
		public const int Begin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Blue")]
		public const int Blue;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Bluetooth")]
		public const int Bluetooth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Book")]
		public const int Book;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_BounceKeys_Enable")]
		public const int BounceKeys_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Break")]
		public const int Break;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_BrightnessAdjust")]
		public const int BrightnessAdjust;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Byelorussian_SHORTU")]
		public const int Byelorussian_SHORTU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Byelorussian_shortu")]
		public const int Byelorussian_shortu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_C")]
		public const int C;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_CD")]
		public const int CD;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_CH")]
		public const int CH;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_C_H")]
		public const int C_H;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_C_h")]
		public const int C_h;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cabovedot")]
		public const int Cabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cacute")]
		public const int Cacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Calculator")]
		public const int Calculator;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Calendar")]
		public const int Calendar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cancel")]
		public const int Cancel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Caps_Lock")]
		public const int Caps_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ccaron")]
		public const int Ccaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ccedilla")]
		public const int Ccedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ccircumflex")]
		public const int Ccircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ch")]
		public const int Ch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Clear")]
		public const int Clear;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ClearGrab")]
		public const int ClearGrab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Close")]
		public const int Close;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Codeinput")]
		public const int Codeinput;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ColonSign")]
		public const int ColonSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Community")]
		public const int Community;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ContrastAdjust")]
		public const int ContrastAdjust;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Control_L")]
		public const int Control_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Control_R")]
		public const int Control_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Copy")]
		public const int Copy;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_CruzeiroSign")]
		public const int CruzeiroSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cut")]
		public const int Cut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_CycleAngle")]
		public const int CycleAngle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_A")]
		public const int Cyrillic_A;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_BE")]
		public const int Cyrillic_BE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_CHE")]
		public const int Cyrillic_CHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_CHE_descender")]
		public const int Cyrillic_CHE_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_CHE_vertstroke")]
		public const int Cyrillic_CHE_vertstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_DE")]
		public const int Cyrillic_DE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_DZHE")]
		public const int Cyrillic_DZHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_E")]
		public const int Cyrillic_E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_EF")]
		public const int Cyrillic_EF;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_EL")]
		public const int Cyrillic_EL;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_EM")]
		public const int Cyrillic_EM;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_EN")]
		public const int Cyrillic_EN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_EN_descender")]
		public const int Cyrillic_EN_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ER")]
		public const int Cyrillic_ER;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ES")]
		public const int Cyrillic_ES;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_GHE")]
		public const int Cyrillic_GHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_GHE_bar")]
		public const int Cyrillic_GHE_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_HA")]
		public const int Cyrillic_HA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_HARDSIGN")]
		public const int Cyrillic_HARDSIGN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_HA_descender")]
		public const int Cyrillic_HA_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_I")]
		public const int Cyrillic_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_IE")]
		public const int Cyrillic_IE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_IO")]
		public const int Cyrillic_IO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_I_macron")]
		public const int Cyrillic_I_macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_JE")]
		public const int Cyrillic_JE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_KA")]
		public const int Cyrillic_KA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_KA_descender")]
		public const int Cyrillic_KA_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_KA_vertstroke")]
		public const int Cyrillic_KA_vertstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_LJE")]
		public const int Cyrillic_LJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_NJE")]
		public const int Cyrillic_NJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_O")]
		public const int Cyrillic_O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_O_bar")]
		public const int Cyrillic_O_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_PE")]
		public const int Cyrillic_PE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SCHWA")]
		public const int Cyrillic_SCHWA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SHA")]
		public const int Cyrillic_SHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SHCHA")]
		public const int Cyrillic_SHCHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SHHA")]
		public const int Cyrillic_SHHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SHORTI")]
		public const int Cyrillic_SHORTI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_SOFTSIGN")]
		public const int Cyrillic_SOFTSIGN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_TE")]
		public const int Cyrillic_TE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_TSE")]
		public const int Cyrillic_TSE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_U")]
		public const int Cyrillic_U;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_U_macron")]
		public const int Cyrillic_U_macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_U_straight")]
		public const int Cyrillic_U_straight;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_U_straight_bar")]
		public const int Cyrillic_U_straight_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_VE")]
		public const int Cyrillic_VE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_YA")]
		public const int Cyrillic_YA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_YERU")]
		public const int Cyrillic_YERU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_YU")]
		public const int Cyrillic_YU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ZE")]
		public const int Cyrillic_ZE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ZHE")]
		public const int Cyrillic_ZHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ZHE_descender")]
		public const int Cyrillic_ZHE_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_a")]
		public const int Cyrillic_a;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_be")]
		public const int Cyrillic_be;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_che")]
		public const int Cyrillic_che;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_che_descender")]
		public const int Cyrillic_che_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_che_vertstroke")]
		public const int Cyrillic_che_vertstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_de")]
		public const int Cyrillic_de;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_dzhe")]
		public const int Cyrillic_dzhe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_e")]
		public const int Cyrillic_e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ef")]
		public const int Cyrillic_ef;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_el")]
		public const int Cyrillic_el;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_em")]
		public const int Cyrillic_em;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_en")]
		public const int Cyrillic_en;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_en_descender")]
		public const int Cyrillic_en_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_er")]
		public const int Cyrillic_er;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_es")]
		public const int Cyrillic_es;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ghe")]
		public const int Cyrillic_ghe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ghe_bar")]
		public const int Cyrillic_ghe_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ha")]
		public const int Cyrillic_ha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ha_descender")]
		public const int Cyrillic_ha_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_hardsign")]
		public const int Cyrillic_hardsign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_i")]
		public const int Cyrillic_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_i_macron")]
		public const int Cyrillic_i_macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ie")]
		public const int Cyrillic_ie;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_io")]
		public const int Cyrillic_io;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_je")]
		public const int Cyrillic_je;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ka")]
		public const int Cyrillic_ka;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ka_descender")]
		public const int Cyrillic_ka_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ka_vertstroke")]
		public const int Cyrillic_ka_vertstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_lje")]
		public const int Cyrillic_lje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_nje")]
		public const int Cyrillic_nje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_o")]
		public const int Cyrillic_o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_o_bar")]
		public const int Cyrillic_o_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_pe")]
		public const int Cyrillic_pe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_schwa")]
		public const int Cyrillic_schwa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_sha")]
		public const int Cyrillic_sha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_shcha")]
		public const int Cyrillic_shcha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_shha")]
		public const int Cyrillic_shha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_shorti")]
		public const int Cyrillic_shorti;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_softsign")]
		public const int Cyrillic_softsign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_te")]
		public const int Cyrillic_te;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_tse")]
		public const int Cyrillic_tse;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_u")]
		public const int Cyrillic_u;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_u_macron")]
		public const int Cyrillic_u_macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_u_straight")]
		public const int Cyrillic_u_straight;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_u_straight_bar")]
		public const int Cyrillic_u_straight_bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ve")]
		public const int Cyrillic_ve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ya")]
		public const int Cyrillic_ya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_yeru")]
		public const int Cyrillic_yeru;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_yu")]
		public const int Cyrillic_yu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_ze")]
		public const int Cyrillic_ze;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_zhe")]
		public const int Cyrillic_zhe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Cyrillic_zhe_descender")]
		public const int Cyrillic_zhe_descender;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_D")]
		public const int D;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_DOS")]
		public const int DOS;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Dabovedot")]
		public const int Dabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Dcaron")]
		public const int Dcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Delete")]
		public const int Delete;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Display")]
		public const int Display;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Documents")]
		public const int Documents;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_DongSign")]
		public const int DongSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Down")]
		public const int Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Dstroke")]
		public const int Dstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_E")]
		public const int E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ENG")]
		public const int ENG;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ETH")]
		public const int ETH;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_EZH")]
		public const int EZH;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eabovedot")]
		public const int Eabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eacute")]
		public const int Eacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ebelowdot")]
		public const int Ebelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecaron")]
		public const int Ecaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflex")]
		public const int Ecircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflexacute")]
		public const int Ecircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflexbelowdot")]
		public const int Ecircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflexgrave")]
		public const int Ecircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflexhook")]
		public const int Ecircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ecircumflextilde")]
		public const int Ecircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_EcuSign")]
		public const int EcuSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ediaeresis")]
		public const int Ediaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Egrave")]
		public const int Egrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ehook")]
		public const int Ehook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eisu_Shift")]
		public const int Eisu_Shift;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eisu_toggle")]
		public const int Eisu_toggle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eject")]
		public const int Eject;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Emacron")]
		public const int Emacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_End")]
		public const int End;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eogonek")]
		public const int Eogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Escape")]
		public const int Escape;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Eth")]
		public const int Eth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Etilde")]
		public const int Etilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_EuroSign")]
		public const int EuroSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Excel")]
		public const int Excel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Execute")]
		public const int Execute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Explorer")]
		public const int Explorer;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F")]
		public const int F;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F1")]
		public const int F1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F10")]
		public const int F10;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F11")]
		public const int F11;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F12")]
		public const int F12;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F13")]
		public const int F13;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F14")]
		public const int F14;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F15")]
		public const int F15;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F16")]
		public const int F16;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F17")]
		public const int F17;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F18")]
		public const int F18;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F19")]
		public const int F19;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F2")]
		public const int F2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F20")]
		public const int F20;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F21")]
		public const int F21;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F22")]
		public const int F22;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F23")]
		public const int F23;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F24")]
		public const int F24;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F25")]
		public const int F25;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F26")]
		public const int F26;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F27")]
		public const int F27;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F28")]
		public const int F28;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F29")]
		public const int F29;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F3")]
		public const int F3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F30")]
		public const int F30;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F31")]
		public const int F31;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F32")]
		public const int F32;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F33")]
		public const int F33;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F34")]
		public const int F34;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F35")]
		public const int F35;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F4")]
		public const int F4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F5")]
		public const int F5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F6")]
		public const int F6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F7")]
		public const int F7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F8")]
		public const int F8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_F9")]
		public const int F9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_FFrancSign")]
		public const int FFrancSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Fabovedot")]
		public const int Fabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_0")]
		public const int Farsi_0;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_1")]
		public const int Farsi_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_2")]
		public const int Farsi_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_3")]
		public const int Farsi_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_4")]
		public const int Farsi_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_5")]
		public const int Farsi_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_6")]
		public const int Farsi_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_7")]
		public const int Farsi_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_8")]
		public const int Farsi_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_9")]
		public const int Farsi_9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Farsi_yeh")]
		public const int Farsi_yeh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Favorites")]
		public const int Favorites;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Finance")]
		public const int Finance;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Find")]
		public const int Find;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_First_Virtual_Screen")]
		public const int First_Virtual_Screen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Forward")]
		public const int Forward;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_FrameBack")]
		public const int FrameBack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_FrameForward")]
		public const int FrameForward;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_G")]
		public const int G;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Gabovedot")]
		public const int Gabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Game")]
		public const int Game;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Gbreve")]
		public const int Gbreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Gcaron")]
		public const int Gcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Gcedilla")]
		public const int Gcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Gcircumflex")]
		public const int Gcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_an")]
		public const int Georgian_an;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_ban")]
		public const int Georgian_ban;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_can")]
		public const int Georgian_can;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_char")]
		public const int Georgian_char;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_chin")]
		public const int Georgian_chin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_cil")]
		public const int Georgian_cil;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_don")]
		public const int Georgian_don;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_en")]
		public const int Georgian_en;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_fi")]
		public const int Georgian_fi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_gan")]
		public const int Georgian_gan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_ghan")]
		public const int Georgian_ghan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_hae")]
		public const int Georgian_hae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_har")]
		public const int Georgian_har;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_he")]
		public const int Georgian_he;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_hie")]
		public const int Georgian_hie;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_hoe")]
		public const int Georgian_hoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_in")]
		public const int Georgian_in;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_jhan")]
		public const int Georgian_jhan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_jil")]
		public const int Georgian_jil;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_kan")]
		public const int Georgian_kan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_khar")]
		public const int Georgian_khar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_las")]
		public const int Georgian_las;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_man")]
		public const int Georgian_man;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_nar")]
		public const int Georgian_nar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_on")]
		public const int Georgian_on;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_par")]
		public const int Georgian_par;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_phar")]
		public const int Georgian_phar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_qar")]
		public const int Georgian_qar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_rae")]
		public const int Georgian_rae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_san")]
		public const int Georgian_san;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_shin")]
		public const int Georgian_shin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_tan")]
		public const int Georgian_tan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_tar")]
		public const int Georgian_tar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_un")]
		public const int Georgian_un;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_vin")]
		public const int Georgian_vin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_we")]
		public const int Georgian_we;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_xan")]
		public const int Georgian_xan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_zen")]
		public const int Georgian_zen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Georgian_zhar")]
		public const int Georgian_zhar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Go")]
		public const int Go;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_ALPHA")]
		public const int Greek_ALPHA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_ALPHAaccent")]
		public const int Greek_ALPHAaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_BETA")]
		public const int Greek_BETA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_CHI")]
		public const int Greek_CHI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_DELTA")]
		public const int Greek_DELTA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_EPSILON")]
		public const int Greek_EPSILON;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_EPSILONaccent")]
		public const int Greek_EPSILONaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_ETA")]
		public const int Greek_ETA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_ETAaccent")]
		public const int Greek_ETAaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_GAMMA")]
		public const int Greek_GAMMA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_IOTA")]
		public const int Greek_IOTA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_IOTAaccent")]
		public const int Greek_IOTAaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_IOTAdiaeresis")]
		public const int Greek_IOTAdiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_IOTAdieresis")]
		public const int Greek_IOTAdieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_KAPPA")]
		public const int Greek_KAPPA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_LAMBDA")]
		public const int Greek_LAMBDA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_LAMDA")]
		public const int Greek_LAMDA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_MU")]
		public const int Greek_MU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_NU")]
		public const int Greek_NU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_OMEGA")]
		public const int Greek_OMEGA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_OMEGAaccent")]
		public const int Greek_OMEGAaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_OMICRON")]
		public const int Greek_OMICRON;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_OMICRONaccent")]
		public const int Greek_OMICRONaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_PHI")]
		public const int Greek_PHI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_PI")]
		public const int Greek_PI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_PSI")]
		public const int Greek_PSI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_RHO")]
		public const int Greek_RHO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_SIGMA")]
		public const int Greek_SIGMA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_TAU")]
		public const int Greek_TAU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_THETA")]
		public const int Greek_THETA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_UPSILON")]
		public const int Greek_UPSILON;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_UPSILONaccent")]
		public const int Greek_UPSILONaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_UPSILONdieresis")]
		public const int Greek_UPSILONdieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_XI")]
		public const int Greek_XI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_ZETA")]
		public const int Greek_ZETA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_accentdieresis")]
		public const int Greek_accentdieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_alpha")]
		public const int Greek_alpha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_alphaaccent")]
		public const int Greek_alphaaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_beta")]
		public const int Greek_beta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_chi")]
		public const int Greek_chi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_delta")]
		public const int Greek_delta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_epsilon")]
		public const int Greek_epsilon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_epsilonaccent")]
		public const int Greek_epsilonaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_eta")]
		public const int Greek_eta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_etaaccent")]
		public const int Greek_etaaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_finalsmallsigma")]
		public const int Greek_finalsmallsigma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_gamma")]
		public const int Greek_gamma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_horizbar")]
		public const int Greek_horizbar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_iota")]
		public const int Greek_iota;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_iotaaccent")]
		public const int Greek_iotaaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_iotaaccentdieresis")]
		public const int Greek_iotaaccentdieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_iotadieresis")]
		public const int Greek_iotadieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_kappa")]
		public const int Greek_kappa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_lambda")]
		public const int Greek_lambda;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_lamda")]
		public const int Greek_lamda;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_mu")]
		public const int Greek_mu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_nu")]
		public const int Greek_nu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_omega")]
		public const int Greek_omega;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_omegaaccent")]
		public const int Greek_omegaaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_omicron")]
		public const int Greek_omicron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_omicronaccent")]
		public const int Greek_omicronaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_phi")]
		public const int Greek_phi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_pi")]
		public const int Greek_pi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_psi")]
		public const int Greek_psi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_rho")]
		public const int Greek_rho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_sigma")]
		public const int Greek_sigma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_switch")]
		public const int Greek_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_tau")]
		public const int Greek_tau;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_theta")]
		public const int Greek_theta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_upsilon")]
		public const int Greek_upsilon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_upsilonaccent")]
		public const int Greek_upsilonaccent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_upsilonaccentdieresis")]
		public const int Greek_upsilonaccentdieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_upsilondieresis")]
		public const int Greek_upsilondieresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_xi")]
		public const int Greek_xi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Greek_zeta")]
		public const int Greek_zeta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Green")]
		public const int Green;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_H")]
		public const int H;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul")]
		public const int Hangul;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_A")]
		public const int Hangul_A;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_AE")]
		public const int Hangul_AE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_AraeA")]
		public const int Hangul_AraeA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_AraeAE")]
		public const int Hangul_AraeAE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Banja")]
		public const int Hangul_Banja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Cieuc")]
		public const int Hangul_Cieuc;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Codeinput")]
		public const int Hangul_Codeinput;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Dikeud")]
		public const int Hangul_Dikeud;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_E")]
		public const int Hangul_E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_EO")]
		public const int Hangul_EO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_EU")]
		public const int Hangul_EU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_End")]
		public const int Hangul_End;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Hanja")]
		public const int Hangul_Hanja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Hieuh")]
		public const int Hangul_Hieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_I")]
		public const int Hangul_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Ieung")]
		public const int Hangul_Ieung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Cieuc")]
		public const int Hangul_J_Cieuc;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Dikeud")]
		public const int Hangul_J_Dikeud;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Hieuh")]
		public const int Hangul_J_Hieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Ieung")]
		public const int Hangul_J_Ieung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Jieuj")]
		public const int Hangul_J_Jieuj;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Khieuq")]
		public const int Hangul_J_Khieuq;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Kiyeog")]
		public const int Hangul_J_Kiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_KiyeogSios")]
		public const int Hangul_J_KiyeogSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_KkogjiDalrinIeung")]
		public const int Hangul_J_KkogjiDalrinIeung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Mieum")]
		public const int Hangul_J_Mieum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Nieun")]
		public const int Hangul_J_Nieun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_NieunHieuh")]
		public const int Hangul_J_NieunHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_NieunJieuj")]
		public const int Hangul_J_NieunJieuj;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_PanSios")]
		public const int Hangul_J_PanSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Phieuf")]
		public const int Hangul_J_Phieuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Pieub")]
		public const int Hangul_J_Pieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_PieubSios")]
		public const int Hangul_J_PieubSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Rieul")]
		public const int Hangul_J_Rieul;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulHieuh")]
		public const int Hangul_J_RieulHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulKiyeog")]
		public const int Hangul_J_RieulKiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulMieum")]
		public const int Hangul_J_RieulMieum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulPhieuf")]
		public const int Hangul_J_RieulPhieuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulPieub")]
		public const int Hangul_J_RieulPieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulSios")]
		public const int Hangul_J_RieulSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_RieulTieut")]
		public const int Hangul_J_RieulTieut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Sios")]
		public const int Hangul_J_Sios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_SsangKiyeog")]
		public const int Hangul_J_SsangKiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_SsangSios")]
		public const int Hangul_J_SsangSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_Tieut")]
		public const int Hangul_J_Tieut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_J_YeorinHieuh")]
		public const int Hangul_J_YeorinHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Jamo")]
		public const int Hangul_Jamo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Jeonja")]
		public const int Hangul_Jeonja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Jieuj")]
		public const int Hangul_Jieuj;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Khieuq")]
		public const int Hangul_Khieuq;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Kiyeog")]
		public const int Hangul_Kiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_KiyeogSios")]
		public const int Hangul_KiyeogSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_KkogjiDalrinIeung")]
		public const int Hangul_KkogjiDalrinIeung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Mieum")]
		public const int Hangul_Mieum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_MultipleCandidate")]
		public const int Hangul_MultipleCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Nieun")]
		public const int Hangul_Nieun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_NieunHieuh")]
		public const int Hangul_NieunHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_NieunJieuj")]
		public const int Hangul_NieunJieuj;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_O")]
		public const int Hangul_O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_OE")]
		public const int Hangul_OE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_PanSios")]
		public const int Hangul_PanSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Phieuf")]
		public const int Hangul_Phieuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Pieub")]
		public const int Hangul_Pieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_PieubSios")]
		public const int Hangul_PieubSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_PostHanja")]
		public const int Hangul_PostHanja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_PreHanja")]
		public const int Hangul_PreHanja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_PreviousCandidate")]
		public const int Hangul_PreviousCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Rieul")]
		public const int Hangul_Rieul;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulHieuh")]
		public const int Hangul_RieulHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulKiyeog")]
		public const int Hangul_RieulKiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulMieum")]
		public const int Hangul_RieulMieum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulPhieuf")]
		public const int Hangul_RieulPhieuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulPieub")]
		public const int Hangul_RieulPieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulSios")]
		public const int Hangul_RieulSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulTieut")]
		public const int Hangul_RieulTieut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_RieulYeorinHieuh")]
		public const int Hangul_RieulYeorinHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Romaja")]
		public const int Hangul_Romaja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SingleCandidate")]
		public const int Hangul_SingleCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Sios")]
		public const int Hangul_Sios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Special")]
		public const int Hangul_Special;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SsangDikeud")]
		public const int Hangul_SsangDikeud;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SsangJieuj")]
		public const int Hangul_SsangJieuj;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SsangKiyeog")]
		public const int Hangul_SsangKiyeog;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SsangPieub")]
		public const int Hangul_SsangPieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SsangSios")]
		public const int Hangul_SsangSios;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Start")]
		public const int Hangul_Start;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SunkyeongeumMieum")]
		public const int Hangul_SunkyeongeumMieum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SunkyeongeumPhieuf")]
		public const int Hangul_SunkyeongeumPhieuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_SunkyeongeumPieub")]
		public const int Hangul_SunkyeongeumPieub;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_Tieut")]
		public const int Hangul_Tieut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_U")]
		public const int Hangul_U;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_WA")]
		public const int Hangul_WA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_WAE")]
		public const int Hangul_WAE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_WE")]
		public const int Hangul_WE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_WEO")]
		public const int Hangul_WEO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_WI")]
		public const int Hangul_WI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YA")]
		public const int Hangul_YA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YAE")]
		public const int Hangul_YAE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YE")]
		public const int Hangul_YE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YEO")]
		public const int Hangul_YEO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YI")]
		public const int Hangul_YI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YO")]
		public const int Hangul_YO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YU")]
		public const int Hangul_YU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_YeorinHieuh")]
		public const int Hangul_YeorinHieuh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hangul_switch")]
		public const int Hangul_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hankaku")]
		public const int Hankaku;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hcircumflex")]
		public const int Hcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hebrew_switch")]
		public const int Hebrew_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Help")]
		public const int Help;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Henkan")]
		public const int Henkan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Henkan_Mode")]
		public const int Henkan_Mode;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hibernate")]
		public const int Hibernate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hiragana")]
		public const int Hiragana;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hiragana_Katakana")]
		public const int Hiragana_Katakana;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_History")]
		public const int History;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Home")]
		public const int Home;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_HomePage")]
		public const int HomePage;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_HotLinks")]
		public const int HotLinks;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hstroke")]
		public const int Hstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hyper_L")]
		public const int Hyper_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Hyper_R")]
		public const int Hyper_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_I")]
		public const int I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Center_Object")]
		public const int ISO_Center_Object;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Continuous_Underline")]
		public const int ISO_Continuous_Underline;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Discontinuous_Underline")]
		public const int ISO_Discontinuous_Underline;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Emphasize")]
		public const int ISO_Emphasize;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Enter")]
		public const int ISO_Enter;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Fast_Cursor_Down")]
		public const int ISO_Fast_Cursor_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Fast_Cursor_Left")]
		public const int ISO_Fast_Cursor_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Fast_Cursor_Right")]
		public const int ISO_Fast_Cursor_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Fast_Cursor_Up")]
		public const int ISO_Fast_Cursor_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_First_Group")]
		public const int ISO_First_Group;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_First_Group_Lock")]
		public const int ISO_First_Group_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Group_Latch")]
		public const int ISO_Group_Latch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Group_Lock")]
		public const int ISO_Group_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Group_Shift")]
		public const int ISO_Group_Shift;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Last_Group")]
		public const int ISO_Last_Group;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Last_Group_Lock")]
		public const int ISO_Last_Group_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Left_Tab")]
		public const int ISO_Left_Tab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level2_Latch")]
		public const int ISO_Level2_Latch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level3_Latch")]
		public const int ISO_Level3_Latch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level3_Lock")]
		public const int ISO_Level3_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level3_Shift")]
		public const int ISO_Level3_Shift;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level5_Latch")]
		public const int ISO_Level5_Latch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level5_Lock")]
		public const int ISO_Level5_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Level5_Shift")]
		public const int ISO_Level5_Shift;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Lock")]
		public const int ISO_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Move_Line_Down")]
		public const int ISO_Move_Line_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Move_Line_Up")]
		public const int ISO_Move_Line_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Next_Group")]
		public const int ISO_Next_Group;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Next_Group_Lock")]
		public const int ISO_Next_Group_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Partial_Line_Down")]
		public const int ISO_Partial_Line_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Partial_Line_Up")]
		public const int ISO_Partial_Line_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Partial_Space_Left")]
		public const int ISO_Partial_Space_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Partial_Space_Right")]
		public const int ISO_Partial_Space_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Prev_Group")]
		public const int ISO_Prev_Group;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Prev_Group_Lock")]
		public const int ISO_Prev_Group_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Release_Both_Margins")]
		public const int ISO_Release_Both_Margins;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Release_Margin_Left")]
		public const int ISO_Release_Margin_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Release_Margin_Right")]
		public const int ISO_Release_Margin_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Set_Margin_Left")]
		public const int ISO_Set_Margin_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ISO_Set_Margin_Right")]
		public const int ISO_Set_Margin_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Iabovedot")]
		public const int Iabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Iacute")]
		public const int Iacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ibelowdot")]
		public const int Ibelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ibreve")]
		public const int Ibreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Icircumflex")]
		public const int Icircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Idiaeresis")]
		public const int Idiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Igrave")]
		public const int Igrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ihook")]
		public const int Ihook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Imacron")]
		public const int Imacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Insert")]
		public const int Insert;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Iogonek")]
		public const int Iogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Itilde")]
		public const int Itilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_J")]
		public const int J;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Jcircumflex")]
		public const int Jcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_K")]
		public const int K;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_0")]
		public const int KP_0;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_1")]
		public const int KP_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_2")]
		public const int KP_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_3")]
		public const int KP_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_4")]
		public const int KP_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_5")]
		public const int KP_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_6")]
		public const int KP_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_7")]
		public const int KP_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_8")]
		public const int KP_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_9")]
		public const int KP_9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Add")]
		public const int KP_Add;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Begin")]
		public const int KP_Begin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Decimal")]
		public const int KP_Decimal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Delete")]
		public const int KP_Delete;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Divide")]
		public const int KP_Divide;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Down")]
		public const int KP_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_End")]
		public const int KP_End;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Enter")]
		public const int KP_Enter;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Equal")]
		public const int KP_Equal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_F1")]
		public const int KP_F1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_F2")]
		public const int KP_F2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_F3")]
		public const int KP_F3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_F4")]
		public const int KP_F4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Home")]
		public const int KP_Home;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Insert")]
		public const int KP_Insert;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Left")]
		public const int KP_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Multiply")]
		public const int KP_Multiply;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Next")]
		public const int KP_Next;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Page_Down")]
		public const int KP_Page_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Page_Up")]
		public const int KP_Page_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Prior")]
		public const int KP_Prior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Right")]
		public const int KP_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Separator")]
		public const int KP_Separator;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Space")]
		public const int KP_Space;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Subtract")]
		public const int KP_Subtract;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Tab")]
		public const int KP_Tab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KP_Up")]
		public const int KP_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Kana_Lock")]
		public const int Kana_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Kana_Shift")]
		public const int Kana_Shift;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Kanji")]
		public const int Kanji;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Kanji_Bangou")]
		public const int Kanji_Bangou;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Katakana")]
		public const int Katakana;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KbdBrightnessDown")]
		public const int KbdBrightnessDown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KbdBrightnessUp")]
		public const int KbdBrightnessUp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_KbdLightOnOff")]
		public const int KbdLightOnOff;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Kcedilla")]
		public const int Kcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Korean_Won")]
		public const int Korean_Won;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L")]
		public const int L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L1")]
		public const int L1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L10")]
		public const int L10;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L2")]
		public const int L2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L3")]
		public const int L3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L4")]
		public const int L4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L5")]
		public const int L5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L6")]
		public const int L6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L7")]
		public const int L7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L8")]
		public const int L8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_L9")]
		public const int L9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Lacute")]
		public const int Lacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Last_Virtual_Screen")]
		public const int Last_Virtual_Screen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch0")]
		public const int Launch0;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch1")]
		public const int Launch1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch2")]
		public const int Launch2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch3")]
		public const int Launch3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch4")]
		public const int Launch4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch5")]
		public const int Launch5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch6")]
		public const int Launch6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch7")]
		public const int Launch7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch8")]
		public const int Launch8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Launch9")]
		public const int Launch9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchA")]
		public const int LaunchA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchB")]
		public const int LaunchB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchC")]
		public const int LaunchC;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchD")]
		public const int LaunchD;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchE")]
		public const int LaunchE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LaunchF")]
		public const int LaunchF;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Lbelowdot")]
		public const int Lbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Lcaron")]
		public const int Lcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Lcedilla")]
		public const int Lcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Left")]
		public const int Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LightBulb")]
		public const int LightBulb;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Linefeed")]
		public const int Linefeed;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LiraSign")]
		public const int LiraSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LogGrabInfo")]
		public const int LogGrabInfo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LogOff")]
		public const int LogOff;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_LogWindowTree")]
		public const int LogWindowTree;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Lstroke")]
		public const int Lstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_M")]
		public const int M;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Mabovedot")]
		public const int Mabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_DSE")]
		public const int Macedonia_DSE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_GJE")]
		public const int Macedonia_GJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_KJE")]
		public const int Macedonia_KJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_dse")]
		public const int Macedonia_dse;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_gje")]
		public const int Macedonia_gje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Macedonia_kje")]
		public const int Macedonia_kje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Mae_Koho")]
		public const int Mae_Koho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Mail")]
		public const int Mail;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MailForward")]
		public const int MailForward;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Market")]
		public const int Market;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Massyo")]
		public const int Massyo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Meeting")]
		public const int Meeting;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Memo")]
		public const int Memo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Menu")]
		public const int Menu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MenuKB")]
		public const int MenuKB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MenuPB")]
		public const int MenuPB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Messenger")]
		public const int Messenger;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Meta_L")]
		public const int Meta_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Meta_R")]
		public const int Meta_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MillSign")]
		public const int MillSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ModeLock")]
		public const int ModeLock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Mode_switch")]
		public const int Mode_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MonBrightnessDown")]
		public const int MonBrightnessDown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MonBrightnessUp")]
		public const int MonBrightnessUp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MouseKeys_Accel_Enable")]
		public const int MouseKeys_Accel_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MouseKeys_Enable")]
		public const int MouseKeys_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Muhenkan")]
		public const int Muhenkan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Multi_key")]
		public const int Multi_key;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MultipleCandidate")]
		public const int MultipleCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Music")]
		public const int Music;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MyComputer")]
		public const int MyComputer;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_MySites")]
		public const int MySites;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_N")]
		public const int N;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Nacute")]
		public const int Nacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_NairaSign")]
		public const int NairaSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ncaron")]
		public const int Ncaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ncedilla")]
		public const int Ncedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_New")]
		public const int New;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_NewSheqelSign")]
		public const int NewSheqelSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_News")]
		public const int News;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Next")]
		public const int Next;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Next_VMode")]
		public const int Next_VMode;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Next_Virtual_Screen")]
		public const int Next_Virtual_Screen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ntilde")]
		public const int Ntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Num_Lock")]
		public const int Num_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_O")]
		public const int O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_OE")]
		public const int OE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Oacute")]
		public const int Oacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Obarred")]
		public const int Obarred;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Obelowdot")]
		public const int Obelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocaron")]
		public const int Ocaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflex")]
		public const int Ocircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflexacute")]
		public const int Ocircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflexbelowdot")]
		public const int Ocircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflexgrave")]
		public const int Ocircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflexhook")]
		public const int Ocircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ocircumflextilde")]
		public const int Ocircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Odiaeresis")]
		public const int Odiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Odoubleacute")]
		public const int Odoubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_OfficeHome")]
		public const int OfficeHome;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ograve")]
		public const int Ograve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohook")]
		public const int Ohook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohorn")]
		public const int Ohorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohornacute")]
		public const int Ohornacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohornbelowdot")]
		public const int Ohornbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohorngrave")]
		public const int Ohorngrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohornhook")]
		public const int Ohornhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ohorntilde")]
		public const int Ohorntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Omacron")]
		public const int Omacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ooblique")]
		public const int Ooblique;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Open")]
		public const int Open;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_OpenURL")]
		public const int OpenURL;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Option")]
		public const int Option;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Oslash")]
		public const int Oslash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Otilde")]
		public const int Otilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Overlay1_Enable")]
		public const int Overlay1_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Overlay2_Enable")]
		public const int Overlay2_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_P")]
		public const int P;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pabovedot")]
		public const int Pabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Page_Down")]
		public const int Page_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Page_Up")]
		public const int Page_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Paste")]
		public const int Paste;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pause")]
		public const int Pause;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_PesetaSign")]
		public const int PesetaSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Phone")]
		public const int Phone;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pictures")]
		public const int Pictures;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Accelerate")]
		public const int Pointer_Accelerate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button1")]
		public const int Pointer_Button1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button2")]
		public const int Pointer_Button2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button3")]
		public const int Pointer_Button3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button4")]
		public const int Pointer_Button4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button5")]
		public const int Pointer_Button5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Button_Dflt")]
		public const int Pointer_Button_Dflt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick1")]
		public const int Pointer_DblClick1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick2")]
		public const int Pointer_DblClick2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick3")]
		public const int Pointer_DblClick3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick4")]
		public const int Pointer_DblClick4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick5")]
		public const int Pointer_DblClick5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DblClick_Dflt")]
		public const int Pointer_DblClick_Dflt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DfltBtnNext")]
		public const int Pointer_DfltBtnNext;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DfltBtnPrev")]
		public const int Pointer_DfltBtnPrev;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Down")]
		public const int Pointer_Down;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DownLeft")]
		public const int Pointer_DownLeft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_DownRight")]
		public const int Pointer_DownRight;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag1")]
		public const int Pointer_Drag1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag2")]
		public const int Pointer_Drag2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag3")]
		public const int Pointer_Drag3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag4")]
		public const int Pointer_Drag4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag5")]
		public const int Pointer_Drag5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Drag_Dflt")]
		public const int Pointer_Drag_Dflt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_EnableKeys")]
		public const int Pointer_EnableKeys;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Left")]
		public const int Pointer_Left;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Right")]
		public const int Pointer_Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_Up")]
		public const int Pointer_Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_UpLeft")]
		public const int Pointer_UpLeft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Pointer_UpRight")]
		public const int Pointer_UpRight;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_PowerDown")]
		public const int PowerDown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_PowerOff")]
		public const int PowerOff;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Prev_VMode")]
		public const int Prev_VMode;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Prev_Virtual_Screen")]
		public const int Prev_Virtual_Screen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_PreviousCandidate")]
		public const int PreviousCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Print")]
		public const int Print;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Prior")]
		public const int Prior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Q")]
		public const int Q;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R")]
		public const int R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R1")]
		public const int R1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R10")]
		public const int R10;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R11")]
		public const int R11;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R12")]
		public const int R12;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R13")]
		public const int R13;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R14")]
		public const int R14;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R15")]
		public const int R15;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R2")]
		public const int R2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R3")]
		public const int R3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R4")]
		public const int R4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R5")]
		public const int R5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R6")]
		public const int R6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R7")]
		public const int R7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R8")]
		public const int R8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_R9")]
		public const int R9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Racute")]
		public const int Racute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Rcaron")]
		public const int Rcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Rcedilla")]
		public const int Rcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Red")]
		public const int Red;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Redo")]
		public const int Redo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Refresh")]
		public const int Refresh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Reload")]
		public const int Reload;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RepeatKeys_Enable")]
		public const int RepeatKeys_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Reply")]
		public const int Reply;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Return")]
		public const int Return;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Right")]
		public const int Right;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RockerDown")]
		public const int RockerDown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RockerEnter")]
		public const int RockerEnter;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RockerUp")]
		public const int RockerUp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Romaji")]
		public const int Romaji;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RotateWindows")]
		public const int RotateWindows;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RotationKB")]
		public const int RotationKB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RotationPB")]
		public const int RotationPB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_RupeeSign")]
		public const int RupeeSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_S")]
		public const int S;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_SCHWA")]
		public const int SCHWA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sabovedot")]
		public const int Sabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sacute")]
		public const int Sacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Save")]
		public const int Save;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Scaron")]
		public const int Scaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Scedilla")]
		public const int Scedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Scircumflex")]
		public const int Scircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ScreenSaver")]
		public const int ScreenSaver;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ScrollClick")]
		public const int ScrollClick;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ScrollDown")]
		public const int ScrollDown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ScrollUp")]
		public const int ScrollUp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Scroll_Lock")]
		public const int Scroll_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Search")]
		public const int Search;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Select")]
		public const int Select;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_SelectButton")]
		public const int SelectButton;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Send")]
		public const int Send;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_DJE")]
		public const int Serbian_DJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_DZE")]
		public const int Serbian_DZE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_JE")]
		public const int Serbian_JE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_LJE")]
		public const int Serbian_LJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_NJE")]
		public const int Serbian_NJE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_TSHE")]
		public const int Serbian_TSHE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_dje")]
		public const int Serbian_dje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_dze")]
		public const int Serbian_dze;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_je")]
		public const int Serbian_je;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_lje")]
		public const int Serbian_lje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_nje")]
		public const int Serbian_nje;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Serbian_tshe")]
		public const int Serbian_tshe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Shift_L")]
		public const int Shift_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Shift_Lock")]
		public const int Shift_Lock;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Shift_R")]
		public const int Shift_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Shop")]
		public const int Shop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_SingleCandidate")]
		public const int SingleCandidate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_a")]
		public const int Sinh_a;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_aa")]
		public const int Sinh_aa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_aa2")]
		public const int Sinh_aa2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ae")]
		public const int Sinh_ae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ae2")]
		public const int Sinh_ae2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_aee")]
		public const int Sinh_aee;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_aee2")]
		public const int Sinh_aee2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ai")]
		public const int Sinh_ai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ai2")]
		public const int Sinh_ai2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_al")]
		public const int Sinh_al;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_au")]
		public const int Sinh_au;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_au2")]
		public const int Sinh_au2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ba")]
		public const int Sinh_ba;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_bha")]
		public const int Sinh_bha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ca")]
		public const int Sinh_ca;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_cha")]
		public const int Sinh_cha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_dda")]
		public const int Sinh_dda;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ddha")]
		public const int Sinh_ddha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_dha")]
		public const int Sinh_dha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_dhha")]
		public const int Sinh_dhha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_e")]
		public const int Sinh_e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_e2")]
		public const int Sinh_e2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ee")]
		public const int Sinh_ee;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ee2")]
		public const int Sinh_ee2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_fa")]
		public const int Sinh_fa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ga")]
		public const int Sinh_ga;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_gha")]
		public const int Sinh_gha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_h2")]
		public const int Sinh_h2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ha")]
		public const int Sinh_ha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_i")]
		public const int Sinh_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_i2")]
		public const int Sinh_i2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ii")]
		public const int Sinh_ii;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ii2")]
		public const int Sinh_ii2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ja")]
		public const int Sinh_ja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_jha")]
		public const int Sinh_jha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_jnya")]
		public const int Sinh_jnya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ka")]
		public const int Sinh_ka;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_kha")]
		public const int Sinh_kha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_kunddaliya")]
		public const int Sinh_kunddaliya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_la")]
		public const int Sinh_la;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_lla")]
		public const int Sinh_lla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_lu")]
		public const int Sinh_lu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_lu2")]
		public const int Sinh_lu2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_luu")]
		public const int Sinh_luu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_luu2")]
		public const int Sinh_luu2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ma")]
		public const int Sinh_ma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_mba")]
		public const int Sinh_mba;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_na")]
		public const int Sinh_na;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ndda")]
		public const int Sinh_ndda;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ndha")]
		public const int Sinh_ndha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ng")]
		public const int Sinh_ng;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ng2")]
		public const int Sinh_ng2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_nga")]
		public const int Sinh_nga;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_nja")]
		public const int Sinh_nja;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_nna")]
		public const int Sinh_nna;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_nya")]
		public const int Sinh_nya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_o")]
		public const int Sinh_o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_o2")]
		public const int Sinh_o2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_oo")]
		public const int Sinh_oo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_oo2")]
		public const int Sinh_oo2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_pa")]
		public const int Sinh_pa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_pha")]
		public const int Sinh_pha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ra")]
		public const int Sinh_ra;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ri")]
		public const int Sinh_ri;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_rii")]
		public const int Sinh_rii;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ru2")]
		public const int Sinh_ru2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ruu2")]
		public const int Sinh_ruu2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_sa")]
		public const int Sinh_sa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_sha")]
		public const int Sinh_sha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ssha")]
		public const int Sinh_ssha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_tha")]
		public const int Sinh_tha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_thha")]
		public const int Sinh_thha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_tta")]
		public const int Sinh_tta;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ttha")]
		public const int Sinh_ttha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_u")]
		public const int Sinh_u;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_u2")]
		public const int Sinh_u2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_uu")]
		public const int Sinh_uu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_uu2")]
		public const int Sinh_uu2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_va")]
		public const int Sinh_va;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sinh_ya")]
		public const int Sinh_ya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sleep")]
		public const int Sleep;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_SlowKeys_Enable")]
		public const int SlowKeys_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Spell")]
		public const int Spell;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_SplitScreen")]
		public const int SplitScreen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Standby")]
		public const int Standby;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Start")]
		public const int Start;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_StickyKeys_Enable")]
		public const int StickyKeys_Enable;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Stop")]
		public const int Stop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Subtitle")]
		public const int Subtitle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Super_L")]
		public const int Super_L;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Super_R")]
		public const int Super_R;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Support")]
		public const int Support;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Suspend")]
		public const int Suspend;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_1")]
		public const int Switch_VT_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_10")]
		public const int Switch_VT_10;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_11")]
		public const int Switch_VT_11;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_12")]
		public const int Switch_VT_12;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_2")]
		public const int Switch_VT_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_3")]
		public const int Switch_VT_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_4")]
		public const int Switch_VT_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_5")]
		public const int Switch_VT_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_6")]
		public const int Switch_VT_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_7")]
		public const int Switch_VT_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_8")]
		public const int Switch_VT_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Switch_VT_9")]
		public const int Switch_VT_9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Sys_Req")]
		public const int Sys_Req;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_T")]
		public const int T;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_THORN")]
		public const int THORN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tab")]
		public const int Tab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tabovedot")]
		public const int Tabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_TaskPane")]
		public const int TaskPane;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tcaron")]
		public const int Tcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tcedilla")]
		public const int Tcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Terminal")]
		public const int Terminal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Terminate_Server")]
		public const int Terminate_Server;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_baht")]
		public const int Thai_baht;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_bobaimai")]
		public const int Thai_bobaimai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_chochan")]
		public const int Thai_chochan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_chochang")]
		public const int Thai_chochang;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_choching")]
		public const int Thai_choching;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_chochoe")]
		public const int Thai_chochoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_dochada")]
		public const int Thai_dochada;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_dodek")]
		public const int Thai_dodek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_fofa")]
		public const int Thai_fofa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_fofan")]
		public const int Thai_fofan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_hohip")]
		public const int Thai_hohip;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_honokhuk")]
		public const int Thai_honokhuk;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_khokhai")]
		public const int Thai_khokhai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_khokhon")]
		public const int Thai_khokhon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_khokhuat")]
		public const int Thai_khokhuat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_khokhwai")]
		public const int Thai_khokhwai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_khorakhang")]
		public const int Thai_khorakhang;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_kokai")]
		public const int Thai_kokai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lakkhangyao")]
		public const int Thai_lakkhangyao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lekchet")]
		public const int Thai_lekchet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lekha")]
		public const int Thai_lekha;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lekhok")]
		public const int Thai_lekhok;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lekkao")]
		public const int Thai_lekkao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_leknung")]
		public const int Thai_leknung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lekpaet")]
		public const int Thai_lekpaet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_leksam")]
		public const int Thai_leksam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_leksi")]
		public const int Thai_leksi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_leksong")]
		public const int Thai_leksong;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_leksun")]
		public const int Thai_leksun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lochula")]
		public const int Thai_lochula;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_loling")]
		public const int Thai_loling;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_lu")]
		public const int Thai_lu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maichattawa")]
		public const int Thai_maichattawa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maiek")]
		public const int Thai_maiek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maihanakat")]
		public const int Thai_maihanakat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maihanakat_maitho")]
		public const int Thai_maihanakat_maitho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maitaikhu")]
		public const int Thai_maitaikhu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maitho")]
		public const int Thai_maitho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maitri")]
		public const int Thai_maitri;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_maiyamok")]
		public const int Thai_maiyamok;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_moma")]
		public const int Thai_moma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_ngongu")]
		public const int Thai_ngongu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_nikhahit")]
		public const int Thai_nikhahit;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_nonen")]
		public const int Thai_nonen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_nonu")]
		public const int Thai_nonu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_oang")]
		public const int Thai_oang;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_paiyannoi")]
		public const int Thai_paiyannoi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_phinthu")]
		public const int Thai_phinthu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_phophan")]
		public const int Thai_phophan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_phophung")]
		public const int Thai_phophung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_phosamphao")]
		public const int Thai_phosamphao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_popla")]
		public const int Thai_popla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_rorua")]
		public const int Thai_rorua;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_ru")]
		public const int Thai_ru;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraa")]
		public const int Thai_saraa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraaa")]
		public const int Thai_saraaa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraae")]
		public const int Thai_saraae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraaimaimalai")]
		public const int Thai_saraaimaimalai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraaimaimuan")]
		public const int Thai_saraaimaimuan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraam")]
		public const int Thai_saraam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarae")]
		public const int Thai_sarae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarai")]
		public const int Thai_sarai;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraii")]
		public const int Thai_saraii;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarao")]
		public const int Thai_sarao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarau")]
		public const int Thai_sarau;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_saraue")]
		public const int Thai_saraue;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarauee")]
		public const int Thai_sarauee;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sarauu")]
		public const int Thai_sarauu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sorusi")]
		public const int Thai_sorusi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sosala")]
		public const int Thai_sosala;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_soso")]
		public const int Thai_soso;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_sosua")]
		public const int Thai_sosua;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thanthakhat")]
		public const int Thai_thanthakhat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thonangmontho")]
		public const int Thai_thonangmontho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thophuthao")]
		public const int Thai_thophuthao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thothahan")]
		public const int Thai_thothahan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thothan")]
		public const int Thai_thothan;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thothong")]
		public const int Thai_thothong;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_thothung")]
		public const int Thai_thothung;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_topatak")]
		public const int Thai_topatak;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_totao")]
		public const int Thai_totao;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_wowaen")]
		public const int Thai_wowaen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_yoyak")]
		public const int Thai_yoyak;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thai_yoying")]
		public const int Thai_yoying;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Thorn")]
		public const int Thorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Time")]
		public const int Time;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ToDoList")]
		public const int ToDoList;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tools")]
		public const int Tools;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_TopMenu")]
		public const int TopMenu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_TouchpadOff")]
		public const int TouchpadOff;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_TouchpadOn")]
		public const int TouchpadOn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_TouchpadToggle")]
		public const int TouchpadToggle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Touroku")]
		public const int Touroku;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Travel")]
		public const int Travel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Tslash")]
		public const int Tslash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_U")]
		public const int U;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_UWB")]
		public const int UWB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uacute")]
		public const int Uacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ubelowdot")]
		public const int Ubelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ubreve")]
		public const int Ubreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ucircumflex")]
		public const int Ucircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Udiaeresis")]
		public const int Udiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Udoubleacute")]
		public const int Udoubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ugrave")]
		public const int Ugrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhook")]
		public const int Uhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhorn")]
		public const int Uhorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhornacute")]
		public const int Uhornacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhornbelowdot")]
		public const int Uhornbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhorngrave")]
		public const int Uhorngrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhornhook")]
		public const int Uhornhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uhorntilde")]
		public const int Uhorntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_GHE_WITH_UPTURN")]
		public const int Ukrainian_GHE_WITH_UPTURN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_I")]
		public const int Ukrainian_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_IE")]
		public const int Ukrainian_IE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_YI")]
		public const int Ukrainian_YI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_ghe_with_upturn")]
		public const int Ukrainian_ghe_with_upturn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_i")]
		public const int Ukrainian_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_ie")]
		public const int Ukrainian_ie;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukrainian_yi")]
		public const int Ukrainian_yi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_I")]
		public const int Ukranian_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_JE")]
		public const int Ukranian_JE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_YI")]
		public const int Ukranian_YI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_i")]
		public const int Ukranian_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_je")]
		public const int Ukranian_je;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ukranian_yi")]
		public const int Ukranian_yi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Umacron")]
		public const int Umacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Undo")]
		public const int Undo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ungrab")]
		public const int Ungrab;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uogonek")]
		public const int Uogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Up")]
		public const int Up;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Uring")]
		public const int Uring;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_User1KB")]
		public const int User1KB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_User2KB")]
		public const int User2KB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_UserPB")]
		public const int UserPB;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Utilde")]
		public const int Utilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_V")]
		public const int V;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_VendorHome")]
		public const int VendorHome;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Video")]
		public const int Video;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_View")]
		public const int View;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_VoidSymbol")]
		public const int VoidSymbol;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_W")]
		public const int W;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WLAN")]
		public const int WLAN;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WWW")]
		public const int WWW;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Wacute")]
		public const int Wacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WakeUp")]
		public const int WakeUp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Wcircumflex")]
		public const int Wcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Wdiaeresis")]
		public const int Wdiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WebCam")]
		public const int WebCam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Wgrave")]
		public const int Wgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WheelButton")]
		public const int WheelButton;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WindowClear")]
		public const int WindowClear;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_WonSign")]
		public const int WonSign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Word")]
		public const int Word;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_X")]
		public const int X;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Xabovedot")]
		public const int Xabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Xfer")]
		public const int Xfer;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Y")]
		public const int Y;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Yacute")]
		public const int Yacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ybelowdot")]
		public const int Ybelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ycircumflex")]
		public const int Ycircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ydiaeresis")]
		public const int Ydiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Yellow")]
		public const int Yellow;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ygrave")]
		public const int Ygrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Yhook")]
		public const int Yhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Ytilde")]
		public const int Ytilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Z")]
		public const int Z;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zabovedot")]
		public const int Zabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zacute")]
		public const int Zacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zcaron")]
		public const int Zcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zen_Koho")]
		public const int Zen_Koho;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zenkaku")]
		public const int Zenkaku;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zenkaku_Hankaku")]
		public const int Zenkaku_Hankaku;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ZoomIn")]
		public const int ZoomIn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ZoomOut")]
		public const int ZoomOut;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_Zstroke")]
		public const int Zstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_a")]
		public const int a;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_aacute")]
		public const int aacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abelowdot")]
		public const int abelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abovedot")]
		public const int abovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abreve")]
		public const int abreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abreveacute")]
		public const int abreveacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abrevebelowdot")]
		public const int abrevebelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abrevegrave")]
		public const int abrevegrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abrevehook")]
		public const int abrevehook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_abrevetilde")]
		public const int abrevetilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflex")]
		public const int acircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflexacute")]
		public const int acircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflexbelowdot")]
		public const int acircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflexgrave")]
		public const int acircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflexhook")]
		public const int acircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acircumflextilde")]
		public const int acircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_acute")]
		public const int acute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_adiaeresis")]
		public const int adiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ae")]
		public const int ae;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_agrave")]
		public const int agrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ahook")]
		public const int ahook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_amacron")]
		public const int amacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ampersand")]
		public const int ampersand;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_aogonek")]
		public const int aogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_apostrophe")]
		public const int apostrophe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_approxeq")]
		public const int approxeq;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_approximate")]
		public const int approximate;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_aring")]
		public const int aring;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_asciicircum")]
		public const int asciicircum;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_asciitilde")]
		public const int asciitilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_asterisk")]
		public const int asterisk;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_at")]
		public const int at;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_atilde")]
		public const int atilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_b")]
		public const int b;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_babovedot")]
		public const int babovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_backslash")]
		public const int backslash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ballotcross")]
		public const int ballotcross;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_bar")]
		public const int bar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_because")]
		public const int because;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_blank")]
		public const int blank;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botintegral")]
		public const int botintegral;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botleftparens")]
		public const int botleftparens;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botleftsqbracket")]
		public const int botleftsqbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botleftsummation")]
		public const int botleftsummation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botrightparens")]
		public const int botrightparens;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botrightsqbracket")]
		public const int botrightsqbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botrightsummation")]
		public const int botrightsummation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_bott")]
		public const int bott;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_botvertsummationconnector")]
		public const int botvertsummationconnector;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braceleft")]
		public const int braceleft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braceright")]
		public const int braceright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_bracketleft")]
		public const int bracketleft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_bracketright")]
		public const int bracketright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_blank")]
		public const int braille_blank;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_1")]
		public const int braille_dot_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_10")]
		public const int braille_dot_10;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_2")]
		public const int braille_dot_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_3")]
		public const int braille_dot_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_4")]
		public const int braille_dot_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_5")]
		public const int braille_dot_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_6")]
		public const int braille_dot_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_7")]
		public const int braille_dot_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_8")]
		public const int braille_dot_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dot_9")]
		public const int braille_dot_9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1")]
		public const int braille_dots_1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12")]
		public const int braille_dots_12;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123")]
		public const int braille_dots_123;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1234")]
		public const int braille_dots_1234;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12345")]
		public const int braille_dots_12345;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123456")]
		public const int braille_dots_123456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1234567")]
		public const int braille_dots_1234567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12345678")]
		public const int braille_dots_12345678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1234568")]
		public const int braille_dots_1234568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123457")]
		public const int braille_dots_123457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1234578")]
		public const int braille_dots_1234578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123458")]
		public const int braille_dots_123458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12346")]
		public const int braille_dots_12346;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123467")]
		public const int braille_dots_123467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1234678")]
		public const int braille_dots_1234678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123468")]
		public const int braille_dots_123468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12347")]
		public const int braille_dots_12347;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123478")]
		public const int braille_dots_123478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12348")]
		public const int braille_dots_12348;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1235")]
		public const int braille_dots_1235;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12356")]
		public const int braille_dots_12356;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123567")]
		public const int braille_dots_123567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1235678")]
		public const int braille_dots_1235678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123568")]
		public const int braille_dots_123568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12357")]
		public const int braille_dots_12357;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123578")]
		public const int braille_dots_123578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12358")]
		public const int braille_dots_12358;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1236")]
		public const int braille_dots_1236;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12367")]
		public const int braille_dots_12367;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_123678")]
		public const int braille_dots_123678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12368")]
		public const int braille_dots_12368;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1237")]
		public const int braille_dots_1237;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12378")]
		public const int braille_dots_12378;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1238")]
		public const int braille_dots_1238;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_124")]
		public const int braille_dots_124;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1245")]
		public const int braille_dots_1245;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12456")]
		public const int braille_dots_12456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_124567")]
		public const int braille_dots_124567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1245678")]
		public const int braille_dots_1245678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_124568")]
		public const int braille_dots_124568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12457")]
		public const int braille_dots_12457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_124578")]
		public const int braille_dots_124578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12458")]
		public const int braille_dots_12458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1246")]
		public const int braille_dots_1246;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12467")]
		public const int braille_dots_12467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_124678")]
		public const int braille_dots_124678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12468")]
		public const int braille_dots_12468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1247")]
		public const int braille_dots_1247;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12478")]
		public const int braille_dots_12478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1248")]
		public const int braille_dots_1248;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_125")]
		public const int braille_dots_125;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1256")]
		public const int braille_dots_1256;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12567")]
		public const int braille_dots_12567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_125678")]
		public const int braille_dots_125678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12568")]
		public const int braille_dots_12568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1257")]
		public const int braille_dots_1257;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12578")]
		public const int braille_dots_12578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1258")]
		public const int braille_dots_1258;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_126")]
		public const int braille_dots_126;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1267")]
		public const int braille_dots_1267;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_12678")]
		public const int braille_dots_12678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1268")]
		public const int braille_dots_1268;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_127")]
		public const int braille_dots_127;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1278")]
		public const int braille_dots_1278;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_128")]
		public const int braille_dots_128;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13")]
		public const int braille_dots_13;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_134")]
		public const int braille_dots_134;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1345")]
		public const int braille_dots_1345;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13456")]
		public const int braille_dots_13456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_134567")]
		public const int braille_dots_134567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1345678")]
		public const int braille_dots_1345678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_134568")]
		public const int braille_dots_134568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13457")]
		public const int braille_dots_13457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_134578")]
		public const int braille_dots_134578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13458")]
		public const int braille_dots_13458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1346")]
		public const int braille_dots_1346;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13467")]
		public const int braille_dots_13467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_134678")]
		public const int braille_dots_134678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13468")]
		public const int braille_dots_13468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1347")]
		public const int braille_dots_1347;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13478")]
		public const int braille_dots_13478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1348")]
		public const int braille_dots_1348;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_135")]
		public const int braille_dots_135;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1356")]
		public const int braille_dots_1356;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13567")]
		public const int braille_dots_13567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_135678")]
		public const int braille_dots_135678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13568")]
		public const int braille_dots_13568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1357")]
		public const int braille_dots_1357;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13578")]
		public const int braille_dots_13578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1358")]
		public const int braille_dots_1358;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_136")]
		public const int braille_dots_136;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1367")]
		public const int braille_dots_1367;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_13678")]
		public const int braille_dots_13678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1368")]
		public const int braille_dots_1368;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_137")]
		public const int braille_dots_137;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1378")]
		public const int braille_dots_1378;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_138")]
		public const int braille_dots_138;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_14")]
		public const int braille_dots_14;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_145")]
		public const int braille_dots_145;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1456")]
		public const int braille_dots_1456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_14567")]
		public const int braille_dots_14567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_145678")]
		public const int braille_dots_145678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_14568")]
		public const int braille_dots_14568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1457")]
		public const int braille_dots_1457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_14578")]
		public const int braille_dots_14578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1458")]
		public const int braille_dots_1458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_146")]
		public const int braille_dots_146;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1467")]
		public const int braille_dots_1467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_14678")]
		public const int braille_dots_14678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1468")]
		public const int braille_dots_1468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_147")]
		public const int braille_dots_147;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1478")]
		public const int braille_dots_1478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_148")]
		public const int braille_dots_148;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_15")]
		public const int braille_dots_15;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_156")]
		public const int braille_dots_156;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1567")]
		public const int braille_dots_1567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_15678")]
		public const int braille_dots_15678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1568")]
		public const int braille_dots_1568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_157")]
		public const int braille_dots_157;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1578")]
		public const int braille_dots_1578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_158")]
		public const int braille_dots_158;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_16")]
		public const int braille_dots_16;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_167")]
		public const int braille_dots_167;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_1678")]
		public const int braille_dots_1678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_168")]
		public const int braille_dots_168;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_17")]
		public const int braille_dots_17;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_178")]
		public const int braille_dots_178;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_18")]
		public const int braille_dots_18;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2")]
		public const int braille_dots_2;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23")]
		public const int braille_dots_23;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_234")]
		public const int braille_dots_234;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2345")]
		public const int braille_dots_2345;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23456")]
		public const int braille_dots_23456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_234567")]
		public const int braille_dots_234567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2345678")]
		public const int braille_dots_2345678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_234568")]
		public const int braille_dots_234568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23457")]
		public const int braille_dots_23457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_234578")]
		public const int braille_dots_234578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23458")]
		public const int braille_dots_23458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2346")]
		public const int braille_dots_2346;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23467")]
		public const int braille_dots_23467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_234678")]
		public const int braille_dots_234678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23468")]
		public const int braille_dots_23468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2347")]
		public const int braille_dots_2347;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23478")]
		public const int braille_dots_23478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2348")]
		public const int braille_dots_2348;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_235")]
		public const int braille_dots_235;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2356")]
		public const int braille_dots_2356;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23567")]
		public const int braille_dots_23567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_235678")]
		public const int braille_dots_235678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23568")]
		public const int braille_dots_23568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2357")]
		public const int braille_dots_2357;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23578")]
		public const int braille_dots_23578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2358")]
		public const int braille_dots_2358;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_236")]
		public const int braille_dots_236;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2367")]
		public const int braille_dots_2367;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_23678")]
		public const int braille_dots_23678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2368")]
		public const int braille_dots_2368;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_237")]
		public const int braille_dots_237;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2378")]
		public const int braille_dots_2378;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_238")]
		public const int braille_dots_238;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_24")]
		public const int braille_dots_24;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_245")]
		public const int braille_dots_245;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2456")]
		public const int braille_dots_2456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_24567")]
		public const int braille_dots_24567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_245678")]
		public const int braille_dots_245678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_24568")]
		public const int braille_dots_24568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2457")]
		public const int braille_dots_2457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_24578")]
		public const int braille_dots_24578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2458")]
		public const int braille_dots_2458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_246")]
		public const int braille_dots_246;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2467")]
		public const int braille_dots_2467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_24678")]
		public const int braille_dots_24678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2468")]
		public const int braille_dots_2468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_247")]
		public const int braille_dots_247;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2478")]
		public const int braille_dots_2478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_248")]
		public const int braille_dots_248;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_25")]
		public const int braille_dots_25;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_256")]
		public const int braille_dots_256;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2567")]
		public const int braille_dots_2567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_25678")]
		public const int braille_dots_25678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2568")]
		public const int braille_dots_2568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_257")]
		public const int braille_dots_257;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2578")]
		public const int braille_dots_2578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_258")]
		public const int braille_dots_258;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_26")]
		public const int braille_dots_26;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_267")]
		public const int braille_dots_267;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_2678")]
		public const int braille_dots_2678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_268")]
		public const int braille_dots_268;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_27")]
		public const int braille_dots_27;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_278")]
		public const int braille_dots_278;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_28")]
		public const int braille_dots_28;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3")]
		public const int braille_dots_3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_34")]
		public const int braille_dots_34;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_345")]
		public const int braille_dots_345;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3456")]
		public const int braille_dots_3456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_34567")]
		public const int braille_dots_34567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_345678")]
		public const int braille_dots_345678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_34568")]
		public const int braille_dots_34568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3457")]
		public const int braille_dots_3457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_34578")]
		public const int braille_dots_34578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3458")]
		public const int braille_dots_3458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_346")]
		public const int braille_dots_346;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3467")]
		public const int braille_dots_3467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_34678")]
		public const int braille_dots_34678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3468")]
		public const int braille_dots_3468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_347")]
		public const int braille_dots_347;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3478")]
		public const int braille_dots_3478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_348")]
		public const int braille_dots_348;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_35")]
		public const int braille_dots_35;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_356")]
		public const int braille_dots_356;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3567")]
		public const int braille_dots_3567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_35678")]
		public const int braille_dots_35678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3568")]
		public const int braille_dots_3568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_357")]
		public const int braille_dots_357;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3578")]
		public const int braille_dots_3578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_358")]
		public const int braille_dots_358;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_36")]
		public const int braille_dots_36;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_367")]
		public const int braille_dots_367;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_3678")]
		public const int braille_dots_3678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_368")]
		public const int braille_dots_368;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_37")]
		public const int braille_dots_37;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_378")]
		public const int braille_dots_378;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_38")]
		public const int braille_dots_38;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_4")]
		public const int braille_dots_4;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_45")]
		public const int braille_dots_45;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_456")]
		public const int braille_dots_456;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_4567")]
		public const int braille_dots_4567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_45678")]
		public const int braille_dots_45678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_4568")]
		public const int braille_dots_4568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_457")]
		public const int braille_dots_457;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_4578")]
		public const int braille_dots_4578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_458")]
		public const int braille_dots_458;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_46")]
		public const int braille_dots_46;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_467")]
		public const int braille_dots_467;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_4678")]
		public const int braille_dots_4678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_468")]
		public const int braille_dots_468;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_47")]
		public const int braille_dots_47;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_478")]
		public const int braille_dots_478;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_48")]
		public const int braille_dots_48;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_5")]
		public const int braille_dots_5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_56")]
		public const int braille_dots_56;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_567")]
		public const int braille_dots_567;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_5678")]
		public const int braille_dots_5678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_568")]
		public const int braille_dots_568;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_57")]
		public const int braille_dots_57;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_578")]
		public const int braille_dots_578;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_58")]
		public const int braille_dots_58;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_6")]
		public const int braille_dots_6;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_67")]
		public const int braille_dots_67;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_678")]
		public const int braille_dots_678;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_68")]
		public const int braille_dots_68;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_7")]
		public const int braille_dots_7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_78")]
		public const int braille_dots_78;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_braille_dots_8")]
		public const int braille_dots_8;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_breve")]
		public const int breve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_brokenbar")]
		public const int brokenbar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_c")]
		public const int c;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_c_h")]
		public const int c_h;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cabovedot")]
		public const int cabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cacute")]
		public const int cacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_careof")]
		public const int careof;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_caret")]
		public const int caret;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_caron")]
		public const int caron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ccaron")]
		public const int ccaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ccedilla")]
		public const int ccedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ccircumflex")]
		public const int ccircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cedilla")]
		public const int cedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cent")]
		public const int cent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ch")]
		public const int ch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_checkerboard")]
		public const int checkerboard;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_checkmark")]
		public const int checkmark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_circle")]
		public const int circle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_club")]
		public const int club;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_colon")]
		public const int colon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_comma")]
		public const int comma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_containsas")]
		public const int containsas;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_copyright")]
		public const int copyright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cr")]
		public const int cr;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_crossinglines")]
		public const int crossinglines;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cuberoot")]
		public const int cuberoot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_currency")]
		public const int currency;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_cursor")]
		public const int cursor;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_d")]
		public const int d;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dabovedot")]
		public const int dabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dagger")]
		public const int dagger;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dcaron")]
		public const int dcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_A")]
		public const int dead_A;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_E")]
		public const int dead_E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_I")]
		public const int dead_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_O")]
		public const int dead_O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_U")]
		public const int dead_U;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_a")]
		public const int dead_a;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_abovecomma")]
		public const int dead_abovecomma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_abovedot")]
		public const int dead_abovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_abovereversedcomma")]
		public const int dead_abovereversedcomma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_abovering")]
		public const int dead_abovering;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_acute")]
		public const int dead_acute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowbreve")]
		public const int dead_belowbreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowcircumflex")]
		public const int dead_belowcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowcomma")]
		public const int dead_belowcomma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowdiaeresis")]
		public const int dead_belowdiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowdot")]
		public const int dead_belowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowmacron")]
		public const int dead_belowmacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowring")]
		public const int dead_belowring;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_belowtilde")]
		public const int dead_belowtilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_breve")]
		public const int dead_breve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_capital_schwa")]
		public const int dead_capital_schwa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_caron")]
		public const int dead_caron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_cedilla")]
		public const int dead_cedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_circumflex")]
		public const int dead_circumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_currency")]
		public const int dead_currency;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_dasia")]
		public const int dead_dasia;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_diaeresis")]
		public const int dead_diaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_doubleacute")]
		public const int dead_doubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_doublegrave")]
		public const int dead_doublegrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_e")]
		public const int dead_e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_grave")]
		public const int dead_grave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_greek")]
		public const int dead_greek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_hook")]
		public const int dead_hook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_horn")]
		public const int dead_horn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_i")]
		public const int dead_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_invertedbreve")]
		public const int dead_invertedbreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_iota")]
		public const int dead_iota;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_macron")]
		public const int dead_macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_o")]
		public const int dead_o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_ogonek")]
		public const int dead_ogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_perispomeni")]
		public const int dead_perispomeni;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_psili")]
		public const int dead_psili;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_semivoiced_sound")]
		public const int dead_semivoiced_sound;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_small_schwa")]
		public const int dead_small_schwa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_stroke")]
		public const int dead_stroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_tilde")]
		public const int dead_tilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_u")]
		public const int dead_u;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dead_voiced_sound")]
		public const int dead_voiced_sound;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_decimalpoint")]
		public const int decimalpoint;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_degree")]
		public const int degree;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_diaeresis")]
		public const int diaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_diamond")]
		public const int diamond;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_digitspace")]
		public const int digitspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dintegral")]
		public const int dintegral;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_division")]
		public const int division;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dollar")]
		public const int dollar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_doubbaselinedot")]
		public const int doubbaselinedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_doubleacute")]
		public const int doubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_doubledagger")]
		public const int doubledagger;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_doublelowquotemark")]
		public const int doublelowquotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_downarrow")]
		public const int downarrow;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_downcaret")]
		public const int downcaret;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_downshoe")]
		public const int downshoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_downstile")]
		public const int downstile;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_downtack")]
		public const int downtack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_dstroke")]
		public const int dstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_e")]
		public const int e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eabovedot")]
		public const int eabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eacute")]
		public const int eacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ebelowdot")]
		public const int ebelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecaron")]
		public const int ecaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflex")]
		public const int ecircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflexacute")]
		public const int ecircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflexbelowdot")]
		public const int ecircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflexgrave")]
		public const int ecircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflexhook")]
		public const int ecircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ecircumflextilde")]
		public const int ecircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ediaeresis")]
		public const int ediaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_egrave")]
		public const int egrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ehook")]
		public const int ehook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eightsubscript")]
		public const int eightsubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eightsuperior")]
		public const int eightsuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_elementof")]
		public const int elementof;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ellipsis")]
		public const int ellipsis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_em3space")]
		public const int em3space;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_em4space")]
		public const int em4space;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emacron")]
		public const int emacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emdash")]
		public const int emdash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emfilledcircle")]
		public const int emfilledcircle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emfilledrect")]
		public const int emfilledrect;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emopencircle")]
		public const int emopencircle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emopenrectangle")]
		public const int emopenrectangle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emptyset")]
		public const int emptyset;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_emspace")]
		public const int emspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_endash")]
		public const int endash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_enfilledcircbullet")]
		public const int enfilledcircbullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_enfilledsqbullet")]
		public const int enfilledsqbullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eng")]
		public const int eng;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_enopencircbullet")]
		public const int enopencircbullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_enopensquarebullet")]
		public const int enopensquarebullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_enspace")]
		public const int enspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eogonek")]
		public const int eogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_equal")]
		public const int equal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_eth")]
		public const int eth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_etilde")]
		public const int etilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_exclam")]
		public const int exclam;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_exclamdown")]
		public const int exclamdown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ezh")]
		public const int ezh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_f")]
		public const int f;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fabovedot")]
		public const int fabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_femalesymbol")]
		public const int femalesymbol;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ff")]
		public const int ff;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_figdash")]
		public const int figdash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_filledlefttribullet")]
		public const int filledlefttribullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_filledrectbullet")]
		public const int filledrectbullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_filledrighttribullet")]
		public const int filledrighttribullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_filledtribulletdown")]
		public const int filledtribulletdown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_filledtribulletup")]
		public const int filledtribulletup;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fiveeighths")]
		public const int fiveeighths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fivesixths")]
		public const int fivesixths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fivesubscript")]
		public const int fivesubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fivesuperior")]
		public const int fivesuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fourfifths")]
		public const int fourfifths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_foursubscript")]
		public const int foursubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_foursuperior")]
		public const int foursuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_fourthroot")]
		public const int fourthroot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_function")]
		public const int function;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_g")]
		public const int g;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_gabovedot")]
		public const int gabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_gbreve")]
		public const int gbreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_gcaron")]
		public const int gcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_gcedilla")]
		public const int gcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_gcircumflex")]
		public const int gcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_grave")]
		public const int grave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_greater")]
		public const int greater;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_greaterthanequal")]
		public const int greaterthanequal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_guillemotleft")]
		public const int guillemotleft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_guillemotright")]
		public const int guillemotright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_h")]
		public const int h;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hairspace")]
		public const int hairspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hcircumflex")]
		public const int hcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_heart")]
		public const int heart;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_aleph")]
		public const int hebrew_aleph;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_ayin")]
		public const int hebrew_ayin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_bet")]
		public const int hebrew_bet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_beth")]
		public const int hebrew_beth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_chet")]
		public const int hebrew_chet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_dalet")]
		public const int hebrew_dalet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_daleth")]
		public const int hebrew_daleth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_doublelowline")]
		public const int hebrew_doublelowline;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalkaph")]
		public const int hebrew_finalkaph;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalmem")]
		public const int hebrew_finalmem;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalnun")]
		public const int hebrew_finalnun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalpe")]
		public const int hebrew_finalpe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalzade")]
		public const int hebrew_finalzade;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_finalzadi")]
		public const int hebrew_finalzadi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_gimel")]
		public const int hebrew_gimel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_gimmel")]
		public const int hebrew_gimmel;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_he")]
		public const int hebrew_he;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_het")]
		public const int hebrew_het;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_kaph")]
		public const int hebrew_kaph;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_kuf")]
		public const int hebrew_kuf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_lamed")]
		public const int hebrew_lamed;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_mem")]
		public const int hebrew_mem;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_nun")]
		public const int hebrew_nun;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_pe")]
		public const int hebrew_pe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_qoph")]
		public const int hebrew_qoph;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_resh")]
		public const int hebrew_resh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_samech")]
		public const int hebrew_samech;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_samekh")]
		public const int hebrew_samekh;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_shin")]
		public const int hebrew_shin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_taf")]
		public const int hebrew_taf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_taw")]
		public const int hebrew_taw;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_tet")]
		public const int hebrew_tet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_teth")]
		public const int hebrew_teth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_waw")]
		public const int hebrew_waw;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_yod")]
		public const int hebrew_yod;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_zade")]
		public const int hebrew_zade;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_zadi")]
		public const int hebrew_zadi;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_zain")]
		public const int hebrew_zain;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hebrew_zayin")]
		public const int hebrew_zayin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hexagram")]
		public const int hexagram;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizconnector")]
		public const int horizconnector;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizlinescan1")]
		public const int horizlinescan1;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizlinescan3")]
		public const int horizlinescan3;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizlinescan5")]
		public const int horizlinescan5;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizlinescan7")]
		public const int horizlinescan7;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_horizlinescan9")]
		public const int horizlinescan9;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hstroke")]
		public const int hstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ht")]
		public const int ht;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_hyphen")]
		public const int hyphen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_i")]
		public const int i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_iTouch")]
		public const int iTouch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_iacute")]
		public const int iacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ibelowdot")]
		public const int ibelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ibreve")]
		public const int ibreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_icircumflex")]
		public const int icircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_identical")]
		public const int identical;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_idiaeresis")]
		public const int idiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_idotless")]
		public const int idotless;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ifonlyif")]
		public const int ifonlyif;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_igrave")]
		public const int igrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ihook")]
		public const int ihook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_imacron")]
		public const int imacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_implies")]
		public const int implies;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_includedin")]
		public const int includedin;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_includes")]
		public const int includes;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_infinity")]
		public const int infinity;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_integral")]
		public const int integral;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_intersection")]
		public const int intersection;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_iogonek")]
		public const int iogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_itilde")]
		public const int itilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_j")]
		public const int j;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_jcircumflex")]
		public const int jcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_jot")]
		public const int jot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_k")]
		public const int k;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_A")]
		public const int kana_A;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_CHI")]
		public const int kana_CHI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_E")]
		public const int kana_E;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_FU")]
		public const int kana_FU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_HA")]
		public const int kana_HA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_HE")]
		public const int kana_HE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_HI")]
		public const int kana_HI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_HO")]
		public const int kana_HO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_HU")]
		public const int kana_HU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_I")]
		public const int kana_I;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_KA")]
		public const int kana_KA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_KE")]
		public const int kana_KE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_KI")]
		public const int kana_KI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_KO")]
		public const int kana_KO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_KU")]
		public const int kana_KU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_MA")]
		public const int kana_MA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_ME")]
		public const int kana_ME;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_MI")]
		public const int kana_MI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_MO")]
		public const int kana_MO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_MU")]
		public const int kana_MU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_N")]
		public const int kana_N;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_NA")]
		public const int kana_NA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_NE")]
		public const int kana_NE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_NI")]
		public const int kana_NI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_NO")]
		public const int kana_NO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_NU")]
		public const int kana_NU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_O")]
		public const int kana_O;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_RA")]
		public const int kana_RA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_RE")]
		public const int kana_RE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_RI")]
		public const int kana_RI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_RO")]
		public const int kana_RO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_RU")]
		public const int kana_RU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_SA")]
		public const int kana_SA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_SE")]
		public const int kana_SE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_SHI")]
		public const int kana_SHI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_SO")]
		public const int kana_SO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_SU")]
		public const int kana_SU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TA")]
		public const int kana_TA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TE")]
		public const int kana_TE;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TI")]
		public const int kana_TI;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TO")]
		public const int kana_TO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TSU")]
		public const int kana_TSU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_TU")]
		public const int kana_TU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_U")]
		public const int kana_U;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_WA")]
		public const int kana_WA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_WO")]
		public const int kana_WO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_YA")]
		public const int kana_YA;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_YO")]
		public const int kana_YO;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_YU")]
		public const int kana_YU;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_a")]
		public const int kana_a;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_closingbracket")]
		public const int kana_closingbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_comma")]
		public const int kana_comma;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_conjunctive")]
		public const int kana_conjunctive;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_e")]
		public const int kana_e;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_fullstop")]
		public const int kana_fullstop;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_i")]
		public const int kana_i;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_middledot")]
		public const int kana_middledot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_o")]
		public const int kana_o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_openingbracket")]
		public const int kana_openingbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_switch")]
		public const int kana_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_tsu")]
		public const int kana_tsu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_tu")]
		public const int kana_tu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_u")]
		public const int kana_u;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_ya")]
		public const int kana_ya;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_yo")]
		public const int kana_yo;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kana_yu")]
		public const int kana_yu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kappa")]
		public const int kappa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kcedilla")]
		public const int kcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_kra")]
		public const int kra;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_l")]
		public const int l;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lacute")]
		public const int lacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_latincross")]
		public const int latincross;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lbelowdot")]
		public const int lbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lcaron")]
		public const int lcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lcedilla")]
		public const int lcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftanglebracket")]
		public const int leftanglebracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftarrow")]
		public const int leftarrow;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftcaret")]
		public const int leftcaret;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftdoublequotemark")]
		public const int leftdoublequotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftmiddlecurlybrace")]
		public const int leftmiddlecurlybrace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftopentriangle")]
		public const int leftopentriangle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftpointer")]
		public const int leftpointer;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftradical")]
		public const int leftradical;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftshoe")]
		public const int leftshoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftsinglequotemark")]
		public const int leftsinglequotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_leftt")]
		public const int leftt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lefttack")]
		public const int lefttack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_less")]
		public const int less;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lessthanequal")]
		public const int lessthanequal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lf")]
		public const int lf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_logicaland")]
		public const int logicaland;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_logicalor")]
		public const int logicalor;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lowleftcorner")]
		public const int lowleftcorner;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lowrightcorner")]
		public const int lowrightcorner;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_lstroke")]
		public const int lstroke;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_m")]
		public const int m;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_mabovedot")]
		public const int mabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_macron")]
		public const int macron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_malesymbol")]
		public const int malesymbol;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_maltesecross")]
		public const int maltesecross;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_marker")]
		public const int marker;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_masculine")]
		public const int masculine;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_minus")]
		public const int minus;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_minutes")]
		public const int minutes;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_mu")]
		public const int mu;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_multiply")]
		public const int multiply;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_musicalflat")]
		public const int musicalflat;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_musicalsharp")]
		public const int musicalsharp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_n")]
		public const int n;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_nabla")]
		public const int nabla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_nacute")]
		public const int nacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ncaron")]
		public const int ncaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ncedilla")]
		public const int ncedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ninesubscript")]
		public const int ninesubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ninesuperior")]
		public const int ninesuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_nl")]
		public const int nl;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_nobreakspace")]
		public const int nobreakspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_notapproxeq")]
		public const int notapproxeq;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_notelementof")]
		public const int notelementof;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_notequal")]
		public const int notequal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_notidentical")]
		public const int notidentical;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_notsign")]
		public const int notsign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ntilde")]
		public const int ntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_numbersign")]
		public const int numbersign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_numerosign")]
		public const int numerosign;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_o")]
		public const int o;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_oacute")]
		public const int oacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_obarred")]
		public const int obarred;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_obelowdot")]
		public const int obelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocaron")]
		public const int ocaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflex")]
		public const int ocircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflexacute")]
		public const int ocircumflexacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflexbelowdot")]
		public const int ocircumflexbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflexgrave")]
		public const int ocircumflexgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflexhook")]
		public const int ocircumflexhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ocircumflextilde")]
		public const int ocircumflextilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_odiaeresis")]
		public const int odiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_odoubleacute")]
		public const int odoubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_oe")]
		public const int oe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ogonek")]
		public const int ogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ograve")]
		public const int ograve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohook")]
		public const int ohook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohorn")]
		public const int ohorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohornacute")]
		public const int ohornacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohornbelowdot")]
		public const int ohornbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohorngrave")]
		public const int ohorngrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohornhook")]
		public const int ohornhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ohorntilde")]
		public const int ohorntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_omacron")]
		public const int omacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_oneeighth")]
		public const int oneeighth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onefifth")]
		public const int onefifth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onehalf")]
		public const int onehalf;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onequarter")]
		public const int onequarter;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onesixth")]
		public const int onesixth;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onesubscript")]
		public const int onesubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onesuperior")]
		public const int onesuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_onethird")]
		public const int onethird;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ooblique")]
		public const int ooblique;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_openrectbullet")]
		public const int openrectbullet;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_openstar")]
		public const int openstar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_opentribulletdown")]
		public const int opentribulletdown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_opentribulletup")]
		public const int opentribulletup;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ordfeminine")]
		public const int ordfeminine;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_oslash")]
		public const int oslash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_otilde")]
		public const int otilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_overbar")]
		public const int overbar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_overline")]
		public const int overline;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_p")]
		public const int p;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_pabovedot")]
		public const int pabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_paragraph")]
		public const int paragraph;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_parenleft")]
		public const int parenleft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_parenright")]
		public const int parenright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_partdifferential")]
		public const int partdifferential;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_partialderivative")]
		public const int partialderivative;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_percent")]
		public const int percent;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_period")]
		public const int period;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_periodcentered")]
		public const int periodcentered;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_permille")]
		public const int permille;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_phonographcopyright")]
		public const int phonographcopyright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_plus")]
		public const int plus;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_plusminus")]
		public const int plusminus;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_prescription")]
		public const int prescription;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_prolongedsound")]
		public const int prolongedsound;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_punctspace")]
		public const int punctspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_q")]
		public const int q;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_quad")]
		public const int quad;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_question")]
		public const int question;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_questiondown")]
		public const int questiondown;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_quotedbl")]
		public const int quotedbl;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_quoteleft")]
		public const int quoteleft;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_quoteright")]
		public const int quoteright;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_r")]
		public const int r;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_racute")]
		public const int racute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_radical")]
		public const int radical;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rcaron")]
		public const int rcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rcedilla")]
		public const int rcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_registered")]
		public const int registered;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightanglebracket")]
		public const int rightanglebracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightarrow")]
		public const int rightarrow;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightcaret")]
		public const int rightcaret;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightdoublequotemark")]
		public const int rightdoublequotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightmiddlecurlybrace")]
		public const int rightmiddlecurlybrace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightmiddlesummation")]
		public const int rightmiddlesummation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightopentriangle")]
		public const int rightopentriangle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightpointer")]
		public const int rightpointer;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightshoe")]
		public const int rightshoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightsinglequotemark")]
		public const int rightsinglequotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_rightt")]
		public const int rightt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_righttack")]
		public const int righttack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_s")]
		public const int s;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sabovedot")]
		public const int sabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sacute")]
		public const int sacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_scaron")]
		public const int scaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_scedilla")]
		public const int scedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_schwa")]
		public const int schwa;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_scircumflex")]
		public const int scircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_script_switch")]
		public const int script_switch;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_seconds")]
		public const int seconds;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_section")]
		public const int section;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_semicolon")]
		public const int semicolon;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_semivoicedsound")]
		public const int semivoicedsound;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_seveneighths")]
		public const int seveneighths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sevensubscript")]
		public const int sevensubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sevensuperior")]
		public const int sevensuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_signaturemark")]
		public const int signaturemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_signifblank")]
		public const int signifblank;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_similarequal")]
		public const int similarequal;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_singlelowquotemark")]
		public const int singlelowquotemark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sixsubscript")]
		public const int sixsubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sixsuperior")]
		public const int sixsuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_slash")]
		public const int slash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_soliddiamond")]
		public const int soliddiamond;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_space")]
		public const int space;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_squareroot")]
		public const int squareroot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ssharp")]
		public const int ssharp;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_sterling")]
		public const int sterling;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_stricteq")]
		public const int stricteq;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_t")]
		public const int t;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_tabovedot")]
		public const int tabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_tcaron")]
		public const int tcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_tcedilla")]
		public const int tcedilla;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_telephone")]
		public const int telephone;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_telephonerecorder")]
		public const int telephonerecorder;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_therefore")]
		public const int therefore;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_thinspace")]
		public const int thinspace;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_thorn")]
		public const int thorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_threeeighths")]
		public const int threeeighths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_threefifths")]
		public const int threefifths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_threequarters")]
		public const int threequarters;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_threesubscript")]
		public const int threesubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_threesuperior")]
		public const int threesuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_tintegral")]
		public const int tintegral;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topintegral")]
		public const int topintegral;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topleftparens")]
		public const int topleftparens;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topleftradical")]
		public const int topleftradical;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topleftsqbracket")]
		public const int topleftsqbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topleftsummation")]
		public const int topleftsummation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_toprightparens")]
		public const int toprightparens;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_toprightsqbracket")]
		public const int toprightsqbracket;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_toprightsummation")]
		public const int toprightsummation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topt")]
		public const int topt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_topvertsummationconnector")]
		public const int topvertsummationconnector;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_trademark")]
		public const int trademark;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_trademarkincircle")]
		public const int trademarkincircle;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_tslash")]
		public const int tslash;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_twofifths")]
		public const int twofifths;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_twosubscript")]
		public const int twosubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_twosuperior")]
		public const int twosuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_twothirds")]
		public const int twothirds;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_u")]
		public const int u;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uacute")]
		public const int uacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ubelowdot")]
		public const int ubelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ubreve")]
		public const int ubreve;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ucircumflex")]
		public const int ucircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_udiaeresis")]
		public const int udiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_udoubleacute")]
		public const int udoubleacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ugrave")]
		public const int ugrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhook")]
		public const int uhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhorn")]
		public const int uhorn;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhornacute")]
		public const int uhornacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhornbelowdot")]
		public const int uhornbelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhorngrave")]
		public const int uhorngrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhornhook")]
		public const int uhornhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uhorntilde")]
		public const int uhorntilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_umacron")]
		public const int umacron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_underbar")]
		public const int underbar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_underscore")]
		public const int underscore;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_union")]
		public const int union;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uogonek")]
		public const int uogonek;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uparrow")]
		public const int uparrow;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_upcaret")]
		public const int upcaret;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_upleftcorner")]
		public const int upleftcorner;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uprightcorner")]
		public const int uprightcorner;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_upshoe")]
		public const int upshoe;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_upstile")]
		public const int upstile;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uptack")]
		public const int uptack;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_uring")]
		public const int uring;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_utilde")]
		public const int utilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_v")]
		public const int v;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_variation")]
		public const int variation;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_vertbar")]
		public const int vertbar;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_vertconnector")]
		public const int vertconnector;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_voicedsound")]
		public const int voicedsound;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_vt")]
		public const int vt;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_w")]
		public const int w;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_wacute")]
		public const int wacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_wcircumflex")]
		public const int wcircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_wdiaeresis")]
		public const int wdiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_wgrave")]
		public const int wgrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_x")]
		public const int x;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_xabovedot")]
		public const int xabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_y")]
		public const int y;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_yacute")]
		public const int yacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ybelowdot")]
		public const int ybelowdot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ycircumflex")]
		public const int ycircumflex;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ydiaeresis")]
		public const int ydiaeresis;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_yen")]
		public const int yen;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ygrave")]
		public const int ygrave;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_yhook")]
		public const int yhook;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_ytilde")]
		public const int ytilde;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_z")]
		public const int z;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zabovedot")]
		public const int zabovedot;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zacute")]
		public const int zacute;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zcaron")]
		public const int zcaron;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zerosubscript")]
		public const int zerosubscript;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zerosuperior")]
		public const int zerosuperior;
		[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_KEY_zstroke")]
		public const int zstroke;
	}
	namespace Selection {
		[CCode (cheader_filename = "gdk/gdk.h")]
		public static void convert (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, uint32 time_);
		[CCode (cheader_filename = "gdk/gdk.h")]
		public static unowned Gdk.Window? owner_get (Gdk.Atom selection);
		[CCode (cheader_filename = "gdk/gdk.h")]
		[Version (since = "2.2")]
		public static unowned Gdk.Window? owner_get_for_display (Gdk.Display display, Gdk.Atom selection);
		[CCode (cheader_filename = "gdk/gdk.h")]
		public static bool owner_set (Gdk.Window? owner, Gdk.Atom selection, uint32 time_, bool send_event);
		[CCode (cheader_filename = "gdk/gdk.h")]
		[Version (since = "2.2")]
		public static bool owner_set_for_display (Gdk.Display display, Gdk.Window? owner, Gdk.Atom selection, uint32 time_, bool send_event);
		[CCode (cheader_filename = "gdk/gdk.h")]
		public static int property_get (Gdk.Window requestor, [CCode (array_length = false, type = "guchar**")] uint8[] data, Gdk.Atom prop_type, int prop_format);
		[CCode (cheader_filename = "gdk/gdk.h")]
		public static void send_notify (Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, Gdk.Atom property, uint32 time_);
		[CCode (cheader_filename = "gdk/gdk.h")]
		[Version (since = "2.2")]
		public static void send_notify_for_display (Gdk.Display display, Gdk.Window requestor, Gdk.Atom selection, Gdk.Atom target, Gdk.Atom property, uint32 time_);
	}
	namespace X11 {
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_app_launch_context_get_type ()")]
		[GIR (name = "X11AppLaunchContext")]
		public class AppLaunchContext : Gdk.AppLaunchContext {
			[CCode (has_construct_function = false)]
			protected AppLaunchContext ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_cursor_get_type ()")]
		[GIR (name = "X11Cursor")]
		public class Cursor : Gdk.Cursor {
			[CCode (has_construct_function = false)]
			protected Cursor ();
			public X.Cursor get_xcursor ();
			public unowned X.Display get_xdisplay ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_core_get_type ()")]
		[GIR (name = "X11DeviceCore")]
		public class DeviceCore : Gdk.Device {
			[CCode (has_construct_function = false)]
			protected DeviceCore ();
			[CCode (cheader_filename = "gdk/gdkx.h", cname = "gdk_x11_device_manager_lookup")]
			[Version (since = "3.2")]
			public static unowned Gdk.X11.DeviceCore? lookup_for_device_manager (Gdk.X11.DeviceManagerCore device_manager, int device_id);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_manager_core_get_type ()")]
		[GIR (name = "X11DeviceManagerCore")]
		public class DeviceManagerCore : Gdk.DeviceManager {
			[CCode (has_construct_function = false)]
			protected DeviceManagerCore ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_manager_xi2_get_type ()")]
		[GIR (name = "X11DeviceManagerXI2")]
		public class DeviceManagerXI2 : Gdk.X11.DeviceManagerCore {
			[CCode (has_construct_function = false)]
			protected DeviceManagerXI2 ();
			[NoAccessorMethod]
			public int major { get; construct; }
			[NoAccessorMethod]
			public int minor { get; construct; }
			[NoAccessorMethod]
			public int opcode { get; construct; }
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_device_xi2_get_type ()")]
		[GIR (name = "X11DeviceXI2")]
		public class DeviceXI2 : Gdk.Device {
			[CCode (has_construct_function = false)]
			protected DeviceXI2 ();
			[NoAccessorMethod]
			public int device_id { get; construct; }
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_display_get_type ()")]
		[GIR (name = "X11Display")]
		public class Display : Gdk.Display {
			[CCode (has_construct_function = false)]
			protected Display ();
			[Version (since = "2.12")]
			public void broadcast_startup_message (string message_type, ...);
			[Version (since = "3.0")]
			public int error_trap_pop ();
			[Version (since = "3.0")]
			public void error_trap_pop_ignored ();
			[Version (since = "3.0")]
			public void error_trap_push ();
			[Version (since = "2.12")]
			public unowned string get_startup_notification_id ();
			[Version (since = "2.8")]
			public uint32 get_user_time ();
			[Version (since = "2.2")]
			public unowned X.Display get_xdisplay ();
			[Version (since = "2.2")]
			public void grab ();
			[CCode (cheader_filename = "gdk/gdkx.h", cname = "gdk_x11_lookup_xdisplay")]
			[Version (since = "2.2")]
			public static unowned Gdk.X11.Display lookup_for_xdisplay (X.Display xdisplay);
			[Version (since = "2.8")]
			public void set_cursor_theme (string theme, int size);
			[Version (since = "3.0")]
			public void set_startup_notification_id (string startup_id);
			[Version (since = "3.10")]
			public void set_window_scale (int scale);
			[Version (since = "2.24")]
			public int string_to_compound_text (string str, out Gdk.Atom encoding, out int format, [CCode (array_length_cname = "length", array_length_pos = 4.1)] out uint8[] ctext);
			[Version (since = "2.24")]
			public int text_property_to_text_list (Gdk.Atom encoding, int format, uint8 text, int length, string list);
			[Version (since = "2.2")]
			public void ungrab ();
			[Version (since = "2.24")]
			public bool utf8_to_compound_text (string str, out Gdk.Atom encoding, out int format, [CCode (array_length_cname = "length", array_length_pos = 4.1)] out uint8[] ctext);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_display_manager_get_type ()")]
		[GIR (name = "X11DisplayManager")]
		public class DisplayManager : Gdk.DisplayManager {
			[CCode (has_construct_function = false)]
			protected DisplayManager ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_drag_context_get_type ()")]
		[GIR (name = "X11DragContext")]
		public class DragContext : Gdk.DragContext {
			[CCode (has_construct_function = false)]
			protected DragContext ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_keymap_get_type ()")]
		[GIR (name = "X11Keymap")]
		public class Keymap : Gdk.Keymap {
			[CCode (has_construct_function = false)]
			protected Keymap ();
			[Version (since = "3.6")]
			public int get_group_for_state (uint state);
			[Version (since = "3.6")]
			public bool key_is_modifier (uint keycode);
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_screen_get_type ()")]
		[GIR (name = "X11Screen")]
		public class Screen : Gdk.Screen {
			[CCode (has_construct_function = false)]
			protected Screen ();
			[Version (since = "3.10")]
			public uint32 get_current_desktop ();
			[Version (since = "2.14")]
			public X.ID get_monitor_output (int monitor_num);
			[Version (since = "3.10")]
			public uint32 get_number_of_desktops ();
			[Version (since = "2.2")]
			public int get_screen_number ();
			[Version (since = "2.2")]
			public unowned string get_window_manager_name ();
			[Version (since = "2.2")]
			public unowned X.Screen get_xscreen ();
			[Version (since = "2.2")]
			public unowned Gdk.X11.Visual lookup_visual (X.VisualID xvisualid);
			[Version (since = "2.2")]
			public bool supports_net_wm_hint (Gdk.Atom property);
			public signal void window_manager_changed ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_visual_get_type ()")]
		[GIR (name = "X11Visual")]
		public class Visual : Gdk.Visual {
			[CCode (has_construct_function = false)]
			protected Visual ();
			public unowned X.Visual get_xvisual ();
		}
		[CCode (cheader_filename = "gdk/gdkx.h", type_id = "gdk_x11_window_get_type ()")]
		[GIR (name = "X11Window")]
		public class Window : Gdk.Window {
			[CCode (has_construct_function = false)]
			protected Window ();
			[CCode (cname = "gdk_x11_window_foreign_new_for_display", has_construct_function = false, type = "GdkWindow*")]
			[Version (since = "2.24")]
			public Window.foreign_for_display (Gdk.X11.Display display, X.Window window);
			[Version (since = "3.10")]
			public uint32 get_desktop ();
			public X.Window get_xid ();
			[Version (since = "2.24")]
			public static unowned Gdk.X11.Window lookup_for_display (Gdk.X11.Display display, X.Window window);
			[Version (since = "2.8")]
			public void move_to_current_desktop ();
			[Version (since = "3.10")]
			public void move_to_desktop (uint32 desktop);
			[Version (deprecated = true, deprecated_since = "3.12", since = "3.10")]
			public void set_frame_extents (int left, int right, int top, int bottom);
			[Version (since = "3.8")]
			public void set_frame_sync_enabled (bool frame_sync_enabled);
			[Version (since = "3.4")]
			public void set_hide_titlebar_when_maximized (bool hide_titlebar_when_maximized);
			[Version (since = "3.2")]
			public void set_theme_variant (string variant);
			[Version (since = "2.6")]
			public void set_user_time (uint32 timestamp);
			[Version (since = "3.4")]
			public void set_utf8_property (string name, string? value);
		}
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Atom atom_to_xatom (Gdk.Atom atom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static X.Atom atom_to_xatom_for_display (Gdk.X11.Display display, Gdk.Atom atom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "3.2")]
		public static int device_get_id (Gdk.X11.DeviceCore device);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void free_compound_text ([CCode (array_length = false, type = "guchar*")] uint8[] ctext);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void free_text_list (string list);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Window get_default_root_xwindow ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static int get_default_screen ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static unowned X.Display get_default_xdisplay ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static uint32 get_server_time (Gdk.X11.Window window);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static X.Atom get_xatom_by_name (string atom_name);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static X.Atom get_xatom_by_name_for_display (Gdk.X11.Display display, string atom_name);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static unowned string get_xatom_name (X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static unowned string get_xatom_name_for_display (Gdk.X11.Display display, X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static void grab_server ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.4")]
		public static void register_standard_event_type (Gdk.X11.Display display, int event_base, int n_events);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.24")]
		public static void set_sm_client_id (string sm_client_id);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static void ungrab_server ();
		[CCode (cheader_filename = "gdk/gdkx.h")]
		public static Gdk.Atom xatom_to_atom (X.Atom xatom);
		[CCode (cheader_filename = "gdk/gdkx.h")]
		[Version (since = "2.2")]
		public static Gdk.Atom xatom_to_atom_for_display (Gdk.X11.Display display, X.Atom xatom);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_app_launch_context_get_type ()")]
	public class AppLaunchContext : GLib.AppLaunchContext {
		[CCode (has_construct_function = false)]
		protected AppLaunchContext ();
		[Version (since = "2.14")]
		public void set_desktop (int desktop);
		[Version (since = "2.14")]
		public void set_icon (GLib.Icon? icon);
		[Version (since = "2.14")]
		public void set_icon_name (string? icon_name);
		[Version (since = "2.14")]
		public void set_screen (Gdk.Screen screen);
		[Version (since = "2.14")]
		public void set_timestamp (uint32 timestamp);
		[NoAccessorMethod]
		public Gdk.Display display { owned get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_cursor_get_type ()")]
	public class Cursor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Cursor ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.2")]
		public Cursor.for_display (Gdk.Display display, Gdk.CursorType cursor_type);
		[CCode (has_construct_function = false)]
		[Version (since = "2.8")]
		public Cursor.from_name (Gdk.Display display, string name);
		[CCode (has_construct_function = false)]
		[Version (since = "2.4")]
		public Cursor.from_pixbuf (Gdk.Display display, Gdk.Pixbuf pixbuf, int x, int y);
		[CCode (has_construct_function = false)]
		[Version (since = "3.10")]
		public Cursor.from_surface (Gdk.Display display, Cairo.Surface surface, double x, double y);
		[Version (since = "2.22")]
		public Gdk.CursorType get_cursor_type ();
		[Version (since = "2.2")]
		public unowned Gdk.Display get_display ();
		[Version (since = "2.8")]
		public Gdk.Pixbuf? get_image ();
		[Version (since = "3.10")]
		public Cairo.Surface? get_surface (out double x_hot, out double y_hot);
		public Gdk.CursorType cursor_type { get; construct; }
		public Gdk.Display display { get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_device_get_type ()")]
	public abstract class Device : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Device ();
		public static void free_history ([CCode (array_length_cname = "n_events", array_length_pos = 1.1)] Gdk.TimeCoord[] events);
		[Version (since = "3.0")]
		public unowned Gdk.Device? get_associated_device ();
		[Version (since = "3.22")]
		public Gdk.AxisFlags get_axes ();
		public bool get_axis ([CCode (array_length = false)] double[] axes, Gdk.AxisUse use, out double value);
		[Version (since = "2.20")]
		public Gdk.AxisUse get_axis_use (uint index_);
		[Version (since = "3.0")]
		public bool get_axis_value ([CCode (array_length = false)] double[] axes, Gdk.Atom axis_label, out double value);
		[Version (since = "3.0")]
		public Gdk.DeviceType get_device_type ();
		[Version (since = "3.0")]
		public unowned Gdk.Display get_display ();
		[Version (since = "2.20")]
		public bool get_has_cursor ();
		public bool get_history (Gdk.Window window, uint32 start, uint32 stop, [CCode (array_length_cname = "n_events", array_length_pos = 4.1)] out Gdk.TimeCoord[] events);
		[Version (since = "2.20")]
		public bool get_key (uint index_, out uint keyval, out Gdk.ModifierType modifiers);
		[Version (since = "3.12")]
		public unowned Gdk.Window? get_last_event_window ();
		[Version (since = "2.20")]
		public Gdk.InputMode get_mode ();
		[Version (since = "3.0")]
		public int get_n_axes ();
		[Version (since = "2.24")]
		public int get_n_keys ();
		[Version (since = "2.20")]
		public unowned string get_name ();
		[Version (since = "3.0")]
		public void get_position (out unowned Gdk.Screen screen, out int x, out int y);
		[Version (since = "3.10")]
		public void get_position_double (out unowned Gdk.Screen screen, out double x, out double y);
		[Version (since = "3.16")]
		public unowned string? get_product_id ();
		[Version (since = "3.20")]
		public unowned Gdk.Seat get_seat ();
		[Version (since = "2.20")]
		public Gdk.InputSource get_source ();
		public void get_state (Gdk.Window window, [CCode (array_length = false)] double[]? axes, out Gdk.ModifierType mask);
		[Version (since = "3.16")]
		public unowned string? get_vendor_id ();
		[Version (since = "3.0")]
		public unowned Gdk.Window? get_window_at_position (out int win_x, out int win_y);
		[Version (since = "3.0")]
		public unowned Gdk.Window? get_window_at_position_double (out double win_x, out double win_y);
		[Version (deprecated = true, deprecated_since = "3.20.", since = "3.0")]
		public Gdk.GrabStatus grab (Gdk.Window window, Gdk.GrabOwnership grab_ownership, bool owner_events, Gdk.EventMask event_mask, Gdk.Cursor? cursor, uint32 time_);
		[Version (since = "3.0")]
		public GLib.List<weak Gdk.Atom> list_axes ();
		public GLib.List<weak Gdk.Device>? list_slave_devices ();
		public void set_axis_use (uint index_, Gdk.AxisUse use);
		public void set_key (uint index_, uint keyval, Gdk.ModifierType modifiers);
		public bool set_mode (Gdk.InputMode mode);
		[Version (deprecated = true, deprecated_since = "3.20.", since = "3.0")]
		public void ungrab (uint32 time_);
		[Version (since = "3.0")]
		public void warp (Gdk.Screen screen, int x, int y);
		[Version (since = "3.0")]
		public Gdk.Device? associated_device { get; }
		[Version (since = "3.22")]
		public Gdk.AxisFlags axes { get; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.DeviceManager device_manager { owned get; construct; }
		[Version (since = "3.0")]
		public Gdk.Display display { get; construct; }
		[Version (since = "3.0")]
		public bool has_cursor { get; construct; }
		[NoAccessorMethod]
		public Gdk.InputMode input_mode { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.InputSource input_source { get; construct; }
		[Version (since = "3.0")]
		public uint n_axes { get; }
		[Version (since = "3.0")]
		public string? name { get; construct; }
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public uint num_touches { get; construct; }
		[Version (since = "3.16")]
		public string product_id { get; construct; }
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public Gdk.Seat seat { owned get; set; }
		[NoAccessorMethod]
		public Gdk.DeviceTool tool { owned get; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.DeviceType type { get; construct; }
		[Version (since = "3.16")]
		public string vendor_id { get; construct; }
		public signal void changed ();
		[Version (since = "3.22")]
		public signal void tool_changed (Gdk.DeviceTool tool);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_device_manager_get_type ()")]
	public abstract class DeviceManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DeviceManager ();
		[Version (since = "3.0")]
		public unowned Gdk.Display? get_display ();
		[Version (deprecated = true, deprecated_since = "3.20", since = "3.0")]
		public GLib.List<weak Gdk.Device> list_devices (Gdk.DeviceType type);
		public Gdk.Display display { get; construct; }
		public signal void device_added (Gdk.Device device);
		public signal void device_changed (Gdk.Device device);
		public signal void device_removed (Gdk.Device device);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_device_tool_get_type ()")]
	public class DeviceTool : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DeviceTool ();
		[Version (since = "3.22")]
		public uint64 get_hardware_id ();
		[Version (since = "3.22")]
		public uint64 get_serial ();
		[Version (since = "3.22")]
		public Gdk.DeviceToolType get_tool_type ();
		[NoAccessorMethod]
		public Gdk.AxisFlags axes { get; construct; }
		public uint64 hardware_id { get; construct; }
		public uint64 serial { get; construct; }
		public Gdk.DeviceToolType tool_type { get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_display_get_type ()")]
	public class Display : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Display ();
		[Version (since = "2.2")]
		public void beep ();
		[Version (since = "2.2")]
		public void close ();
		public bool device_is_grabbed (Gdk.Device device);
		[Version (since = "2.4")]
		public void flush ();
		[Version (since = "3.0")]
		public Gdk.AppLaunchContext get_app_launch_context ();
		[Version (since = "2.2")]
		public static unowned Gdk.Display? get_default ();
		[Version (since = "2.4")]
		public uint get_default_cursor_size ();
		[Version (since = "2.4")]
		public unowned Gdk.Window get_default_group ();
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_default_screen ();
		[Version (since = "3.20")]
		public unowned Gdk.Seat get_default_seat ();
		[Version (deprecated = true, deprecated_since = "3.20.", since = "3.0")]
		public unowned Gdk.DeviceManager? get_device_manager ();
		[Version (since = "2.2")]
		public Gdk.Event? get_event ();
		[Version (since = "2.4")]
		public void get_maximal_cursor_size (out uint width, out uint height);
		[Version (since = "3.22")]
		public unowned Gdk.Monitor? get_monitor (int monitor_num);
		[Version (since = "3.22")]
		public unowned Gdk.Monitor get_monitor_at_point (int x, int y);
		[Version (since = "3.22")]
		public unowned Gdk.Monitor get_monitor_at_window (Gdk.Window window);
		[Version (since = "3.22")]
		public int get_n_monitors ();
		[Version (since = "2.2")]
		public unowned string get_name ();
		[Version (since = "3.22")]
		public unowned Gdk.Monitor get_primary_monitor ();
		[Version (since = "3.0")]
		public bool has_pending ();
		[Version (since = "2.22")]
		public bool is_closed ();
		[Version (since = "3.90")]
		public bool is_composited ();
		[Version (since = "3.90")]
		public bool is_rgba ();
		[Version (since = "3.20")]
		public GLib.List<weak Gdk.Seat> list_seats ();
		[Version (since = "3.0")]
		public void notify_startup_complete (string startup_id);
		[Version (since = "2.2")]
		public static unowned Gdk.Display? open (string display_name);
		[Version (since = "2.2")]
		public Gdk.Event? peek_event ();
		[Version (since = "2.2")]
		public void put_event (Gdk.Event event);
		[Version (since = "2.6")]
		public bool request_selection_notification (Gdk.Atom selection);
		[Version (since = "2.4")]
		public void set_double_click_distance (uint distance);
		[Version (since = "2.2")]
		public void set_double_click_time (uint msec);
		[Version (since = "2.6")]
		public void store_clipboard (Gdk.Window clipboard_window, uint32 time_, [CCode (array_length_cname = "n_targets", array_length_pos = 3.1)] Gdk.Atom[]? targets);
		[Version (since = "2.6")]
		public bool supports_clipboard_persistence ();
		[Version (since = "2.4")]
		public bool supports_cursor_alpha ();
		[Version (since = "2.4")]
		public bool supports_cursor_color ();
		[Version (since = "2.10")]
		public bool supports_input_shapes ();
		[Version (since = "2.6")]
		public bool supports_selection_notification ();
		[Version (since = "2.10")]
		public bool supports_shapes ();
		[Version (since = "2.2")]
		public void sync ();
		[NoAccessorMethod]
		[Version (since = "3.90")]
		public bool composited { get; }
		[NoAccessorMethod]
		[Version (since = "3.90")]
		public bool rgba { get; }
		[Version (since = "2.2")]
		public signal void closed (bool is_error);
		[Version (since = "3.22")]
		public signal void monitor_added (Gdk.Monitor monitor);
		[Version (since = "3.22")]
		public signal void monitor_removed (Gdk.Monitor monitor);
		public signal void opened ();
		[Version (since = "3.20")]
		public signal void seat_added (Gdk.Seat seat);
		[Version (since = "3.20")]
		public signal void seat_removed (Gdk.Seat seat);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_display_manager_get_type ()")]
	public class DisplayManager : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DisplayManager ();
		[Version (since = "2.2")]
		public static unowned Gdk.DisplayManager @get ();
		[Version (since = "2.2")]
		public unowned Gdk.Display? get_default_display ();
		[Version (since = "2.2")]
		public GLib.SList<weak Gdk.Display> list_displays ();
		[Version (since = "3.0")]
		public unowned Gdk.Display? open_display (string name);
		[Version (since = "2.2")]
		public void set_default_display (Gdk.Display display);
		public Gdk.Display default_display { get; set; }
		[Version (since = "2.2")]
		public signal void display_opened (Gdk.Display display);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_drag_context_get_type ()")]
	public class DragContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DragContext ();
		[Version (since = "2.22")]
		public Gdk.DragAction get_actions ();
		[Version (since = "3.0")]
		public unowned Gdk.Window get_dest_window ();
		public unowned Gdk.Device get_device ();
		[Version (since = "3.20")]
		public unowned Gdk.Window? get_drag_window ();
		[Version (since = "3.0")]
		public Gdk.DragProtocol get_protocol ();
		[Version (since = "2.22")]
		public Gdk.DragAction get_selected_action ();
		[Version (since = "2.22")]
		public unowned Gdk.Window get_source_window ();
		[Version (since = "2.22")]
		public Gdk.DragAction get_suggested_action ();
		[Version (since = "2.22")]
		public unowned GLib.List<Gdk.Atom> list_targets ();
		[Version (since = "3.20")]
		public bool manage_dnd (Gdk.Window ipc_window, Gdk.DragAction actions);
		public void set_device (Gdk.Device device);
		[Version (since = "3.20")]
		public void set_hotspot (int hot_x, int hot_y);
		[Version (since = "3.20")]
		public signal void action_changed (Gdk.DragAction action);
		[Version (since = "3.20")]
		public signal void cancel (Gdk.DragCancelReason reason);
		[Version (since = "3.20")]
		public signal void dnd_finished ();
		[Version (since = "3.20")]
		public signal void drop_performed (int time);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_draw_context_get_type ()")]
	public abstract class DrawContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DrawContext ();
		[Version (since = "3.90")]
		public unowned Gdk.Display? get_display ();
		[Version (since = "3.90")]
		public unowned Gdk.Window? get_window ();
		[Version (since = "3.90")]
		public Gdk.Display display { get; }
		[Version (since = "3.90")]
		public Gdk.Window window { get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_drawing_context_get_type ()")]
	public class DrawingContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected DrawingContext ();
		[Version (since = "3.22")]
		public unowned Cairo.Context get_cairo_context ();
		[Version (since = "3.22")]
		public Cairo.Region? get_clip ();
		[Version (since = "3.90")]
		public unowned Gdk.DrawContext get_paint_context ();
		[Version (since = "3.22")]
		public unowned Gdk.Window get_window ();
		[Version (since = "3.22")]
		public bool is_valid ();
		[Version (since = "3.22")]
		public Cairo.Region clip { owned get; construct; }
		[Version (since = "3.90")]
		public Gdk.DrawContext paint_context { get; construct; }
		[Version (since = "3.22")]
		public Gdk.Window window { get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class Event {
		public Gdk.EventType type;
		[CCode (has_construct_function = false)]
		[Version (since = "2.2")]
		public Event (Gdk.EventType type);
		public Gdk.Event copy ();
		public void free ();
		public static Gdk.Event? @get ();
		public bool get_axis (Gdk.AxisUse axis_use, out double value);
		[Version (since = "3.2")]
		public bool get_button (out uint button);
		[Version (since = "3.2")]
		public bool get_click_count (out uint click_count);
		public bool get_coords (out double x_win, out double y_win);
		[Version (since = "3.0")]
		public unowned Gdk.Device? get_device ();
		[Version (since = "3.22")]
		public unowned Gdk.DeviceTool get_device_tool ();
		[Version (since = "3.4")]
		public unowned Gdk.EventSequence get_event_sequence ();
		[Version (since = "3.10")]
		public Gdk.EventType get_event_type ();
		[Version (since = "3.2")]
		public bool get_keycode (out uint16 keycode);
		[Version (since = "3.2")]
		public bool get_keyval (out uint keyval);
		[Version (since = "3.22")]
		public bool get_pointer_emulated ();
		public bool get_root_coords (out double x_root, out double y_root);
		[Version (since = "3.22")]
		public int get_scancode ();
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_screen ();
		[Version (since = "3.4")]
		public bool get_scroll_deltas (out double delta_x, out double delta_y);
		[Version (since = "3.2")]
		public bool get_scroll_direction (out Gdk.ScrollDirection direction);
		[Version (since = "3.20")]
		public unowned Gdk.Seat get_seat ();
		[Version (since = "3.0")]
		public unowned Gdk.Device? get_source_device ();
		public bool get_state (out Gdk.ModifierType state);
		public uint32 get_time ();
		[Version (since = "3.10")]
		public unowned Gdk.Window get_window ();
		public static void handler_set (owned Gdk.EventFunc func);
		[Version (since = "3.20")]
		public bool is_scroll_stop_event ();
		public static Gdk.Event? peek ();
		public void put ();
		[Version (since = "2.12")]
		public static void request_motions (Gdk.EventMotion event);
		[Version (since = "3.0")]
		public void set_device (Gdk.Device device);
		[Version (since = "3.22")]
		public void set_device_tool (Gdk.DeviceTool? tool);
		[Version (since = "2.2")]
		public void set_screen (Gdk.Screen screen);
		[Version (since = "3.0")]
		public void set_source_device (Gdk.Device device);
		[Version (since = "3.4")]
		public bool triggers_context_menu ();
		public Gdk.EventAny any {[CCode (cname = "(GdkEventAny *)")]  get; }
		public Gdk.EventButton button {[CCode (cname = "(GdkEventButton *)")]  get; }
		public Gdk.EventConfigure configure {[CCode (cname = "(GdkEventConfigure *)")]  get; }
		public Gdk.EventCrossing crossing {[CCode (cname = "(GdkEventCrossing *)")]  get; }
		public Gdk.EventDND dnd {[CCode (cname = "(GdkEventDND *)")]  get; }
		public Gdk.EventExpose expose {[CCode (cname = "(GdkEventExpose *)")]  get; }
		public Gdk.EventFocus focus_change {[CCode (cname = "(GdkEventFocus *)")]  get; }
		public Gdk.EventGrabBroken grab_broken {[CCode (cname = "(GdkEventGrabBroken *)")]  get; }
		public Gdk.EventKey key {[CCode (cname = "(GdkEventKey *)")]  get; }
		public Gdk.EventMotion motion {[CCode (cname = "(GdkEventMotion *)")]  get; }
		public Gdk.EventOwnerChange owner_change {[CCode (cname = "(GdkEventOwnerChange *)")]  get; }
		public Gdk.EventPadAxis pad_axis {[CCode (cname = "(GdkEventPadAxis *)")]  get; }
		public Gdk.EventPadButton pad_button {[CCode (cname = "(GdkEventPadButton *)")]  get; }
		public Gdk.EventPadGroupMode pad_group_mode {[CCode (cname = "(GdkEventPadGroupMode *)")]  get; }
		public Gdk.EventProperty property {[CCode (cname = "(GdkEventProperty *)")]  get; }
		public Gdk.EventProximity proximity {[CCode (cname = "(GdkEventProximity *)")]  get; }
		public Gdk.EventScroll scroll {[CCode (cname = "(GdkEventScroll *)")]  get; }
		public Gdk.EventSelection selection {[CCode (cname = "(GdkEventSelection *)")]  get; }
		public Gdk.EventSetting setting {[CCode (cname = "(GdkEventSetting *)")]  get; }
		public Gdk.EventTouch touch {[CCode (cname = "(GdkEventTouch *)")]  get; }
		public Gdk.EventTouchpadPinch touchpad_pinch {[CCode (cname = "(GdkEventTouchpadPinch *)")]  get; }
		public Gdk.EventTouchpadSwipe touchpad_swipe {[CCode (cname = "(GdkEventTouchpadSwipe *)")]  get; }
		public Gdk.EventVisibility visibility {[CCode (cname = "(GdkEventVisibility *)")]  get; }
		public Gdk.EventWindowState window_state {[CCode (cname = "(GdkEventWindowState *)")]  get; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventAny : Gdk.Event {
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventButton : Gdk.Event {
		public double axes;
		public uint button;
		public weak Gdk.Device device;
		public int8 send_event;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventConfigure : Gdk.Event {
		public int height;
		public int8 send_event;
		public Gdk.EventType type;
		public int width;
		public weak Gdk.Window window;
		public int x;
		public int y;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventCrossing : Gdk.Event {
		public Gdk.NotifyType detail;
		public bool focus;
		public Gdk.CrossingMode mode;
		public int8 send_event;
		public Gdk.ModifierType state;
		public weak Gdk.Window subwindow;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventDND : Gdk.Event {
		public weak Gdk.DragContext context;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public short x_root;
		public short y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventExpose : Gdk.Event {
		public Gdk.Rectangle area;
		public int count;
		public weak Cairo.Region region;
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventFocus : Gdk.Event {
		public int16 @in;
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (since = "2.8")]
	public class EventGrabBroken : Gdk.Event {
		public weak Gdk.Window grab_window;
		public bool implicit;
		public bool keyboard;
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventKey : Gdk.Event {
		public uint8 group;
		public uint16 hardware_keycode;
		public uint is_modifier;
		public uint keyval;
		public int length;
		public int8 send_event;
		public Gdk.ModifierType state;
		[CCode (cname = "string")]
		public string str;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventMotion : Gdk.Event {
		[CCode (array_length = false)]
		public weak double[] axes;
		public weak Gdk.Device device;
		public int16 is_hint;
		public int8 send_event;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (since = "2.6")]
	public class EventOwnerChange : Gdk.Event {
		public weak Gdk.Window owner;
		public Gdk.OwnerChange reason;
		public Gdk.Atom selection;
		public uint32 selection_time;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (since = "3.22")]
	public class EventPadAxis : Gdk.Event {
		public uint group;
		public uint index;
		public uint mode;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public double value;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (since = "3.22")]
	public class EventPadButton : Gdk.Event {
		public uint button;
		public uint group;
		public uint mode;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (since = "3.22")]
	public class EventPadGroupMode : Gdk.Event {
		public uint group;
		public uint mode;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventProperty : Gdk.Event {
		public Gdk.Atom atom;
		public int8 send_event;
		public Gdk.PropertyState state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventProximity : Gdk.Event {
		public weak Gdk.Device device;
		public int8 send_event;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventScroll : Gdk.Event {
		public double delta_x;
		public double delta_y;
		public weak Gdk.Device device;
		public Gdk.ScrollDirection direction;
		public uint is_stop;
		public int8 send_event;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventSelection : Gdk.Event {
		public Gdk.Atom property;
		public weak Gdk.Window requestor;
		public Gdk.Atom selection;
		public int8 send_event;
		public Gdk.Atom target;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_sequence_get_type ()")]
	[Compact]
	public class EventSequence {
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventSetting : Gdk.Event {
		public Gdk.SettingAction action;
		public weak string name;
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventTouch : Gdk.Event {
		public double axes;
		public weak Gdk.Device device;
		public bool emulating_pointer;
		public int8 send_event;
		public weak Gdk.EventSequence sequence;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventTouchpadPinch : Gdk.Event {
		public double angle_delta;
		public double dx;
		public double dy;
		public int8 n_fingers;
		public Gdk.TouchpadGesturePhase phase;
		public double scale;
		public int8 send_event;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventTouchpadSwipe : Gdk.Event {
		public double dx;
		public double dy;
		public int8 n_fingers;
		public Gdk.TouchpadGesturePhase phase;
		public int8 send_event;
		public Gdk.ModifierType state;
		public uint32 time;
		public Gdk.EventType type;
		public weak Gdk.Window window;
		public double x;
		public double x_root;
		public double y;
		public double y_root;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	[Version (deprecated = true, deprecated_since = "3.12")]
	public class EventVisibility : Gdk.Event {
		public int8 send_event;
		public Gdk.VisibilityState state;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gdk_event_get_type ()")]
	[Compact]
	public class EventWindowState : Gdk.Event {
		public Gdk.WindowState changed_mask;
		public Gdk.WindowState new_window_state;
		public int8 send_event;
		public Gdk.EventType type;
		public weak Gdk.Window window;
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_frame_clock_get_type ()")]
	public abstract class FrameClock : GLib.Object {
		[CCode (has_construct_function = false)]
		protected FrameClock ();
		[Version (since = "3.8")]
		public void begin_updating ();
		[Version (since = "3.8")]
		public void end_updating ();
		[Version (since = "3.8")]
		public Gdk.FrameTimings? get_current_timings ();
		[Version (since = "3.8")]
		public int64 get_frame_counter ();
		[Version (since = "3.8")]
		public int64 get_frame_time ();
		[Version (since = "3.8")]
		public int64 get_history_start ();
		[Version (since = "3.8")]
		public void get_refresh_info (int64 base_time, int64 refresh_interval_return, int64 presentation_time_return);
		[Version (since = "3.8")]
		public Gdk.FrameTimings? get_timings (int64 frame_counter);
		[Version (since = "3.8")]
		public void request_phase (Gdk.FrameClockPhase phase);
		public signal void after_paint ();
		public signal void before_paint ();
		public signal void flush_events ();
		public signal void layout ();
		public signal void paint ();
		public signal void resume_events ();
		public signal void update ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", ref_function = "gdk_frame_timings_ref", type_id = "gdk_frame_timings_get_type ()", unref_function = "gdk_frame_timings_unref")]
	[Compact]
	public class FrameTimings {
		[Version (since = "3.8")]
		public bool get_complete ();
		[Version (since = "3.8")]
		public int64 get_frame_counter ();
		public int64 get_frame_time ();
		[Version (since = "3.8")]
		public int64 get_predicted_presentation_time ();
		[Version (since = "3.8")]
		public int64 get_presentation_time ();
		[Version (since = "3.8")]
		public int64 get_refresh_interval ();
		[Version (since = "3.8")]
		public Gdk.FrameTimings @ref ();
		[Version (since = "3.8")]
		public void unref ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_gl_context_get_type ()")]
	public abstract class GLContext : Gdk.DrawContext {
		[CCode (has_construct_function = false)]
		protected GLContext ();
		[Version (since = "3.16")]
		public static void clear_current ();
		[Version (since = "3.16")]
		public static unowned Gdk.GLContext? get_current ();
		public Cairo.Region get_damage ();
		[Version (since = "3.16")]
		public bool get_debug_enabled ();
		[Version (since = "3.16")]
		public unowned Gdk.Display? get_display ();
		[Version (since = "3.16")]
		public bool get_forward_compatible ();
		[Version (since = "3.16")]
		public void get_required_version (out int? major, out int? minor);
		[Version (since = "3.16")]
		public unowned Gdk.GLContext? get_shared_context ();
		[Version (since = "3.22")]
		public bool get_use_es ();
		[Version (since = "3.16")]
		public void get_version (out int major, out int minor);
		[Version (since = "3.16")]
		public unowned Gdk.Window? get_window ();
		[Version (since = "3.20")]
		public bool is_legacy ();
		[Version (since = "3.16")]
		public void make_current ();
		[Version (since = "3.16")]
		public bool realize () throws GLib.Error;
		[Version (since = "3.16")]
		public void set_debug_enabled (bool enabled);
		[Version (since = "3.16")]
		public void set_forward_compatible (bool compatible);
		[Version (since = "3.16")]
		public void set_required_version (int major, int minor);
		[Version (since = "3.22")]
		public void set_use_es (int use_es);
		[Version (since = "3.16")]
		public Gdk.GLContext shared_context { get; construct; }
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_keymap_get_type ()")]
	public class Keymap : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Keymap ();
		[Version (since = "2.20")]
		public void add_virtual_modifiers (ref Gdk.ModifierType state);
		[Version (since = "2.16")]
		public bool get_caps_lock_state ();
		public static unowned Gdk.Keymap get_default ();
		public Pango.Direction get_direction ();
		public bool get_entries_for_keycode (uint hardware_keycode, [CCode (array_length_cname = "n_entries", array_length_pos = 3.1)] out Gdk.KeymapKey[] keys, [CCode (array_length_cname = "n_entries", array_length_pos = 3.1)] out uint[] keyvals);
		public bool get_entries_for_keyval (uint keyval, [CCode (array_length_cname = "n_keys", array_length_pos = 2.1)] out Gdk.KeymapKey[] keys);
		[Version (since = "2.2")]
		public static unowned Gdk.Keymap get_for_display (Gdk.Display display);
		[Version (since = "3.4")]
		public Gdk.ModifierType get_modifier_mask (Gdk.ModifierIntent intent);
		[Version (since = "3.4")]
		public uint get_modifier_state ();
		[Version (since = "3.0")]
		public bool get_num_lock_state ();
		[Version (since = "3.18")]
		public bool get_scroll_lock_state ();
		[Version (since = "2.12")]
		public bool have_bidi_layouts ();
		public uint lookup_key (Gdk.KeymapKey key);
		[Version (since = "2.20")]
		public bool map_virtual_modifiers (ref Gdk.ModifierType state);
		public bool translate_keyboard_state (uint hardware_keycode, Gdk.ModifierType state, int group, out uint keyval, out int effective_group, out int level, out Gdk.ModifierType consumed_modifiers);
		[Version (since = "2.0")]
		public signal void direction_changed ();
		[Version (since = "2.2")]
		public signal void keys_changed ();
		[Version (since = "2.16")]
		public signal void state_changed ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_monitor_get_type ()")]
	public class Monitor : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Monitor ();
		[Version (since = "3.22")]
		public unowned Gdk.Display get_display ();
		[Version (since = "3.22")]
		public Gdk.Rectangle get_geometry ();
		[Version (since = "3.22")]
		public int get_height_mm ();
		public unowned string? get_manufacturer ();
		public unowned string? get_model ();
		[Version (since = "3.22")]
		public int get_refresh_rate ();
		[Version (since = "3.22")]
		public int get_scale_factor ();
		[Version (since = "3.22")]
		public Gdk.SubpixelLayout get_subpixel_layout ();
		[Version (since = "3.22")]
		public int get_width_mm ();
		[Version (since = "3.22")]
		public Gdk.Rectangle get_workarea ();
		[Version (since = "3.22")]
		public bool is_primary ();
		public Gdk.Display display { get; construct; }
		public Gdk.Rectangle geometry { get; }
		public int height_mm { get; }
		public string manufacturer { get; }
		public string model { get; }
		public int refresh_rate { get; }
		public int scale_factor { get; }
		public Gdk.SubpixelLayout subpixel_layout { get; }
		public int width_mm { get; }
		public Gdk.Rectangle workarea { get; }
		public signal void invalidate ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_screen_get_type ()")]
	public class Screen : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Screen ();
		[Version (since = "2.2")]
		public static unowned Gdk.Screen? get_default ();
		[Version (since = "2.2")]
		public unowned Gdk.Display get_display ();
		[Version (since = "2.10")]
		public double get_resolution ();
		[Version (since = "2.2")]
		public unowned Gdk.Window get_root_window ();
		[Version (since = "2.2")]
		public bool get_setting (string name, GLib.Value value);
		[Version (since = "2.2")]
		public GLib.List<weak Gdk.Window> get_toplevel_windows ();
		[Version (since = "2.10")]
		public void set_resolution (double dpi);
		public double resolution { get; set; }
		[Version (since = "2.14")]
		public signal void monitors_changed ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_seat_get_type ()")]
	public abstract class Seat : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Seat ();
		[Version (since = "3.20")]
		public Gdk.SeatCapabilities get_capabilities ();
		public unowned Gdk.Display get_display ();
		[Version (since = "3.20")]
		public unowned Gdk.Device? get_keyboard ();
		[Version (since = "3.20")]
		public unowned Gdk.Device? get_pointer ();
		[Version (since = "3.20")]
		public GLib.List<weak Gdk.Device> get_slaves (Gdk.SeatCapabilities capabilities);
		[Version (since = "3.20")]
		public Gdk.GrabStatus grab (Gdk.Window window, Gdk.SeatCapabilities capabilities, bool owner_events, Gdk.Cursor? cursor, Gdk.Event? event, Gdk.SeatGrabPrepareFunc? prepare_func);
		[Version (since = "3.20")]
		public void ungrab ();
		[Version (since = "3.20")]
		public Gdk.Display display { get; construct; }
		[Version (since = "3.20")]
		public signal void device_added (Gdk.Device device);
		[Version (since = "3.20")]
		public signal void device_removed (Gdk.Device device);
		[Version (since = "3.22")]
		public signal void tool_added (Gdk.DeviceTool tool);
		[Version (since = "3.22")]
		public signal void tool_removed (Gdk.DeviceTool tool);
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_visual_get_type ()")]
	public class Visual : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Visual ();
		[Version (since = "2.22")]
		public void get_blue_pixel_details (out uint32 mask, out int shift, out int precision);
		[Version (since = "2.22")]
		public int get_depth ();
		[Version (since = "2.22")]
		public void get_green_pixel_details (out uint32 mask, out int shift, out int precision);
		[Version (since = "2.22")]
		public void get_red_pixel_details (out uint32 mask, out int shift, out int precision);
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_screen ();
		[Version (since = "2.22")]
		public Gdk.VisualType get_visual_type ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_vulkan_context_get_type ()")]
	public abstract class VulkanContext : Gdk.DrawContext, GLib.Initable {
		[CCode (has_construct_function = false)]
		protected VulkanContext ();
		public uint32 get_draw_index ();
		public uint32 get_n_images ();
		public uint32 get_queue_family_index ();
		public signal void images_updated ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_window_get_type ()")]
	public class Window : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Window ();
		public void add_filter (Gdk.FilterFunc function);
		[Version (since = "2.12")]
		public void beep ();
		[Version (since = "3.22")]
		public unowned Gdk.DrawingContext begin_draw_frame (Gdk.DrawContext? context, Cairo.Region region);
		public void begin_move_drag (int button, int root_x, int root_y, uint32 timestamp);
		[Version (since = "3.4")]
		public void begin_move_drag_for_device (Gdk.Device device, int button, int root_x, int root_y, uint32 timestamp);
		public void begin_resize_drag (Gdk.WindowEdge edge, int button, int root_x, int root_y, uint32 timestamp);
		[Version (since = "3.4")]
		public void begin_resize_drag_for_device (Gdk.WindowEdge edge, Gdk.Device device, int button, int root_x, int root_y, uint32 timestamp);
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public Window.child (Gdk.Window parent, int event_mask, Gdk.Rectangle position);
		public static void constrain_size (Gdk.Geometry geometry, Gdk.WindowHints flags, int width, int height, out int new_width, out int new_height);
		[Version (since = "2.22")]
		public void coords_from_parent (double parent_x, double parent_y, out double x, out double y);
		[Version (since = "2.22")]
		public void coords_to_parent (double x, double y, out double parent_x, out double parent_y);
		[Version (since = "3.16")]
		public Gdk.GLContext create_gl_context () throws GLib.Error;
		[Version (since = "3.10")]
		public Cairo.ImageSurface create_similar_image_surface (int format, int width, int height, int scale);
		[Version (since = "2.22")]
		public Cairo.Surface create_similar_surface (Cairo.Content content, int width, int height);
		[Version (since = "3.90")]
		public Gdk.VulkanContext create_vulkan_context () throws GLib.Error;
		public void deiconify ();
		[DestroysInstance]
		public void destroy ();
		[Version (since = "3.22")]
		public void end_draw_frame (Gdk.DrawingContext context);
		public void focus (uint32 timestamp);
		public void freeze_updates ();
		[Version (since = "2.2")]
		public void fullscreen ();
		public void fullscreen_on_monitor (int monitor);
		[Version (since = "2.22")]
		public bool get_accept_focus ();
		public GLib.List<weak Gdk.Window> get_children ();
		[Version (since = "3.10")]
		public GLib.List<weak Gdk.Window> get_children_with_user_data (void* user_data);
		public Cairo.Region get_clip_region ();
		[Version (since = "2.18")]
		public unowned Gdk.Cursor? get_cursor ();
		public bool get_decorations (out Gdk.WMDecoration decorations);
		[Version (since = "3.0")]
		public unowned Gdk.Cursor? get_device_cursor (Gdk.Device device);
		[Version (since = "3.0")]
		public Gdk.EventMask get_device_events (Gdk.Device device);
		[Version (since = "3.0")]
		public unowned Gdk.Window? get_device_position (Gdk.Device device, out int x, out int y, out Gdk.ModifierType mask);
		[Version (since = "3.10")]
		public unowned Gdk.Window? get_device_position_double (Gdk.Device device, out double x, out double y, out Gdk.ModifierType mask);
		[Version (since = "2.24")]
		public unowned Gdk.Display get_display ();
		[Version (since = "3.0")]
		public Gdk.DragProtocol get_drag_protocol (out Gdk.Window target);
		[Version (since = "3.12")]
		public bool get_event_compression ();
		public Gdk.EventMask get_events ();
		[Version (since = "2.22")]
		public bool get_focus_on_map ();
		[Version (since = "3.8")]
		public unowned Gdk.FrameClock get_frame_clock ();
		public void get_frame_extents (out Gdk.Rectangle rect);
		[Version (since = "3.8")]
		public Gdk.FullscreenMode get_fullscreen_mode ();
		public void get_geometry (out int x, out int y, out int width, out int height);
		[Version (since = "2.4")]
		public unowned Gdk.Window get_group ();
		[Version (since = "2.24")]
		public int get_height ();
		[Version (since = "2.22")]
		public bool get_modal_hint ();
		public int get_origin (out int x, out int y);
		public unowned Gdk.Window get_parent ();
		[Version (since = "3.18")]
		public bool get_pass_through ();
		public void get_position (out int x, out int y);
		[Version (since = "2.18")]
		public void get_root_coords (int x, int y, out int root_x, out int root_y);
		public void get_root_origin (out int x, out int y);
		[Version (since = "3.10")]
		public int get_scale_factor ();
		[Version (since = "2.24")]
		public unowned Gdk.Screen get_screen ();
		public Gdk.EventMask get_source_events (Gdk.InputSource source);
		public Gdk.WindowState get_state ();
		[Version (since = "3.0")]
		public bool get_support_multidevice ();
		public unowned Gdk.Window get_toplevel ();
		[Version (since = "2.10")]
		public Gdk.WindowTypeHint get_type_hint ();
		public Cairo.Region get_update_area ();
		public void get_user_data (out void* data);
		public Cairo.Region get_visible_region ();
		[Version (since = "2.24")]
		public int get_width ();
		public Gdk.WindowType get_window_type ();
		[Version (since = "2.22")]
		public bool has_native ();
		public void hide ();
		public void iconify ();
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public Window.input (Gdk.Window parent, int event_mask, Gdk.Rectangle position);
		[Version (since = "2.10")]
		public void input_shape_combine_region (Cairo.Region shape_region, int offset_x, int offset_y);
		public void invalidate_maybe_recurse (Cairo.Region region, Gdk.WindowChildFunc? child_func);
		public void invalidate_rect (Gdk.Rectangle? rect, bool invalidate_children);
		public void invalidate_region (Cairo.Region region, bool invalidate_children);
		[Version (since = "2.18")]
		public bool is_destroyed ();
		[Version (since = "2.22")]
		public bool is_input_only ();
		[Version (since = "2.22")]
		public bool is_shaped ();
		public bool is_viewable ();
		public bool is_visible ();
		public void lower ();
		public void mark_paint_from_clip (Cairo.Context cr);
		public void maximize ();
		[Version (since = "2.10")]
		public void merge_child_input_shapes ();
		public void merge_child_shapes ();
		public void move (int x, int y);
		[Version (since = "2.8")]
		public void move_region (Cairo.Region region, int dx, int dy);
		public void move_resize (int x, int y, int width, int height);
		public unowned GLib.List<Gdk.Window> peek_children ();
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public Window.popup (Gdk.Display display, int event_mask, Gdk.Rectangle position);
		public void raise ();
		public void register_dnd ();
		public void remove_filter (Gdk.FilterFunc function);
		public void resize (int width, int height);
		[Version (since = "2.18")]
		public void restack (Gdk.Window? sibling, bool above);
		public void scroll (int dx, int dy);
		[Version (since = "2.4")]
		public void set_accept_focus (bool accept_focus);
		[Version (since = "2.10")]
		public void set_child_input_shapes ();
		public void set_child_shapes ();
		public void set_cursor (Gdk.Cursor? cursor);
		public void set_decorations (Gdk.WMDecoration decorations);
		[Version (since = "3.0")]
		public void set_device_cursor (Gdk.Device device, Gdk.Cursor cursor);
		[Version (since = "3.0")]
		public void set_device_events (Gdk.Device device, Gdk.EventMask event_mask);
		[Version (since = "3.12")]
		public void set_event_compression (bool event_compression);
		public void set_events (Gdk.EventMask event_mask);
		[Version (since = "2.6")]
		public void set_focus_on_map (bool focus_on_map);
		[Version (since = "3.8")]
		public void set_fullscreen_mode (Gdk.FullscreenMode mode);
		public void set_functions (Gdk.WMFunction functions);
		public void set_geometry_hints (Gdk.Geometry geometry, Gdk.WindowHints geom_mask);
		public void set_group (Gdk.Window? leader);
		public void set_icon_list (GLib.List<Gdk.Pixbuf> pixbufs);
		public void set_icon_name (string? name);
		[Version (since = "2.4")]
		public void set_keep_above (bool setting);
		[Version (since = "2.4")]
		public void set_keep_below (bool setting);
		public void set_modal_hint (bool modal);
		[Version (since = "2.12")]
		public void set_opacity (double opacity);
		[Version (since = "3.10")]
		public void set_opaque_region (Cairo.Region? region);
		[Version (since = "3.18")]
		public void set_pass_through (bool pass_through);
		public void set_role (string role);
		[Version (since = "3.12")]
		public void set_shadow_width (int left, int right, int top, int bottom);
		[Version (since = "2.2")]
		public void set_skip_pager_hint (bool skips_pager);
		[Version (since = "2.2")]
		public void set_skip_taskbar_hint (bool skips_taskbar);
		[Version (since = "3.0")]
		public void set_source_events (Gdk.InputSource source, Gdk.EventMask event_mask);
		[Version (since = "2.12")]
		public void set_startup_id (string startup_id);
		[Version (since = "3.0")]
		public void set_support_multidevice (bool support_multidevice);
		public void set_title (string title);
		public void set_transient_for (Gdk.Window parent);
		public void set_type_hint (Gdk.WindowTypeHint hint);
		[Version (since = "2.8")]
		public void set_urgency_hint (bool urgent);
		public void set_user_data (GLib.Object? user_data);
		public void shape_combine_region (Cairo.Region? shape_region, int offset_x, int offset_y);
		public void show ();
		public void show_unraised ();
		[Version (since = "3.14")]
		public bool show_window_menu (Gdk.Event event);
		public void stick ();
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public Window.temp (Gdk.Display display);
		public void thaw_updates ();
		[CCode (has_construct_function = false)]
		[Version (since = "3.90")]
		public Window.toplevel (Gdk.Display display, int event_mask, int width, int height);
		[Version (since = "2.2")]
		public void unfullscreen ();
		public void unmaximize ();
		public void unstick ();
		public void withdraw ();
		[Version (since = "2.18")]
		public Gdk.Cursor cursor { get; set; }
		[Version (since = "3.90")]
		public Gdk.Display display { get; construct; }
		[Version (since = "3.22")]
		public signal void moved_to_rect ([CCode (type = "gpointer")] Gdk.Rectangle flipped_rect, [CCode (type = "gpointer")] Gdk.Rectangle final_rect, bool flipped_x, bool flipped_y);
	}
	[CCode (cheader_filename = "gdk/gdk.h", ref_function = "", unref_function = "")]
	[Compact]
	public class XEvent {
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_cname = "GdkDevicePadInterface", type_id = "gdk_device_pad_get_type ()")]
	public interface DevicePad : Gdk.Device {
		[Version (since = "3.22")]
		public int get_feature_group (Gdk.DevicePadFeature feature, int feature_idx);
		[Version (since = "3.22")]
		public int get_group_n_modes (int group_idx);
		[Version (since = "3.22")]
		public int get_n_features (Gdk.DevicePadFeature feature);
		[Version (since = "3.22")]
		public int get_n_groups ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", has_type_id = false)]
	[SimpleType]
	public struct Atom : uint {
		[CCode (cname = "GDK_NONE")]
		public static Gdk.Atom NONE;
		public static Gdk.Atom intern (string atom_name, bool only_if_exists);
		[Version (since = "2.10")]
		public static Gdk.Atom intern_static_string (string atom_name);
		public string name ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", has_type_id = false)]
	public struct Geometry {
		public int min_width;
		public int min_height;
		public int max_width;
		public int max_height;
		public int base_width;
		public int base_height;
		public int width_inc;
		public int height_inc;
		public double min_aspect;
		public double max_aspect;
		public Gdk.Gravity win_gravity;
	}
	[CCode (cheader_filename = "gdk/gdk.h", has_type_id = false)]
	public struct KeymapKey {
		public uint keycode;
		public int group;
		public int level;
	}
	[CCode (cheader_filename = "gdk/gdk.h", has_type_id = false)]
	public struct Point {
		public int x;
		public int y;
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_rgba_get_type ()")]
	public struct RGBA {
		public double red;
		public double green;
		public double blue;
		public double alpha;
		[Version (since = "3.0")]
		public Gdk.RGBA? copy ();
		[Version (since = "3.0")]
		public bool equal (Gdk.RGBA p2);
		[Version (since = "3.0")]
		public void free ();
		[Version (since = "3.0")]
		public uint hash ();
		[Version (since = "3.90")]
		public bool is_clear ();
		[Version (since = "3.90")]
		public bool is_opaque ();
		[Version (since = "3.0")]
		public bool parse (string spec);
		[Version (since = "3.0")]
		public string to_string ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", type_id = "gdk_rectangle_get_type ()")]
	public struct Rectangle : Cairo.RectangleInt {
		[Version (since = "3.20")]
		public bool equal (Gdk.Rectangle rect2);
		public bool intersect (Gdk.Rectangle src2, out Gdk.Rectangle dest);
		public void union (Gdk.Rectangle src2, out Gdk.Rectangle dest);
	}
	[CCode (cheader_filename = "gdk/gdk.h", has_type_id = false)]
	public struct TimeCoord {
		public uint32 time;
		[CCode (array_length = false)]
		public weak double axes[128];
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_ANCHOR_", type_id = "gdk_anchor_hints_get_type ()")]
	[Flags]
	[Version (since = "3.22")]
	public enum AnchorHints {
		FLIP_X,
		FLIP_Y,
		SLIDE_X,
		SLIDE_Y,
		RESIZE_X,
		RESIZE_Y,
		FLIP,
		SLIDE,
		RESIZE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_AXIS_FLAG_", type_id = "gdk_axis_flags_get_type ()")]
	[Flags]
	[Version (since = "3.22")]
	public enum AxisFlags {
		X,
		Y,
		PRESSURE,
		XTILT,
		YTILT,
		WHEEL,
		DISTANCE,
		ROTATION,
		SLIDER
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_AXIS_", type_id = "gdk_axis_use_get_type ()")]
	public enum AxisUse {
		IGNORE,
		X,
		Y,
		PRESSURE,
		XTILT,
		YTILT,
		WHEEL,
		DISTANCE,
		ROTATION,
		SLIDER,
		LAST
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_byte_order_get_type ()")]
	public enum ByteOrder {
		LSB_FIRST,
		MSB_FIRST
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_CROSSING_", type_id = "gdk_crossing_mode_get_type ()")]
	public enum CrossingMode {
		NORMAL,
		GRAB,
		UNGRAB,
		GTK_GRAB,
		GTK_UNGRAB,
		STATE_CHANGED,
		TOUCH_BEGIN,
		TOUCH_END,
		DEVICE_SWITCH
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_cursor_type_get_type ()")]
	public enum CursorType {
		X_CURSOR,
		ARROW,
		BASED_ARROW_DOWN,
		BASED_ARROW_UP,
		BOAT,
		BOGOSITY,
		BOTTOM_LEFT_CORNER,
		BOTTOM_RIGHT_CORNER,
		BOTTOM_SIDE,
		BOTTOM_TEE,
		BOX_SPIRAL,
		CENTER_PTR,
		CIRCLE,
		CLOCK,
		COFFEE_MUG,
		CROSS,
		CROSS_REVERSE,
		CROSSHAIR,
		DIAMOND_CROSS,
		DOT,
		DOTBOX,
		DOUBLE_ARROW,
		DRAFT_LARGE,
		DRAFT_SMALL,
		DRAPED_BOX,
		EXCHANGE,
		FLEUR,
		GOBBLER,
		GUMBY,
		HAND1,
		HAND2,
		HEART,
		ICON,
		IRON_CROSS,
		LEFT_PTR,
		LEFT_SIDE,
		LEFT_TEE,
		LEFTBUTTON,
		LL_ANGLE,
		LR_ANGLE,
		MAN,
		MIDDLEBUTTON,
		MOUSE,
		PENCIL,
		PIRATE,
		PLUS,
		QUESTION_ARROW,
		RIGHT_PTR,
		RIGHT_SIDE,
		RIGHT_TEE,
		RIGHTBUTTON,
		RTL_LOGO,
		SAILBOAT,
		SB_DOWN_ARROW,
		SB_H_DOUBLE_ARROW,
		SB_LEFT_ARROW,
		SB_RIGHT_ARROW,
		SB_UP_ARROW,
		SB_V_DOUBLE_ARROW,
		SHUTTLE,
		SIZING,
		SPIDER,
		SPRAYCAN,
		STAR,
		TARGET,
		TCROSS,
		TOP_LEFT_ARROW,
		TOP_LEFT_CORNER,
		TOP_RIGHT_CORNER,
		TOP_SIDE,
		TOP_TEE,
		TREK,
		UL_ANGLE,
		UMBRELLA,
		UR_ANGLE,
		WATCH,
		XTERM,
		LAST_CURSOR,
		BLANK_CURSOR,
		CURSOR_IS_PIXMAP
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DEVICE_PAD_FEATURE_", type_id = "gdk_device_pad_feature_get_type ()")]
	public enum DevicePadFeature {
		BUTTON,
		RING,
		STRIP
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DEVICE_TOOL_TYPE_", type_id = "gdk_device_tool_type_get_type ()")]
	[Version (since = "3.22")]
	public enum DeviceToolType {
		UNKNOWN,
		PEN,
		ERASER,
		BRUSH,
		PENCIL,
		AIRBRUSH,
		MOUSE,
		LENS
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DEVICE_TYPE_", type_id = "gdk_device_type_get_type ()")]
	public enum DeviceType {
		MASTER,
		SLAVE,
		FLOATING
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_ACTION_", type_id = "gdk_drag_action_get_type ()")]
	[Flags]
	public enum DragAction {
		DEFAULT,
		COPY,
		MOVE,
		LINK,
		PRIVATE,
		ASK
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DRAG_CANCEL_", type_id = "gdk_drag_cancel_reason_get_type ()")]
	[Version (since = "3.20")]
	public enum DragCancelReason {
		NO_TARGET,
		USER_CANCELLED,
		ERROR
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DRAG_PROTO_", type_id = "gdk_drag_protocol_get_type ()")]
	public enum DragProtocol {
		NONE,
		MOTIF,
		XDND,
		ROOTWIN,
		WIN32_DROPFILES,
		OLE2,
		LOCAL,
		WAYLAND
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_event_mask_get_type ()")]
	[Flags]
	public enum EventMask {
		EXPOSURE_MASK,
		POINTER_MOTION_MASK,
		POINTER_MOTION_HINT_MASK,
		BUTTON_MOTION_MASK,
		BUTTON1_MOTION_MASK,
		BUTTON2_MOTION_MASK,
		BUTTON3_MOTION_MASK,
		BUTTON_PRESS_MASK,
		BUTTON_RELEASE_MASK,
		KEY_PRESS_MASK,
		KEY_RELEASE_MASK,
		ENTER_NOTIFY_MASK,
		LEAVE_NOTIFY_MASK,
		FOCUS_CHANGE_MASK,
		STRUCTURE_MASK,
		PROPERTY_CHANGE_MASK,
		VISIBILITY_NOTIFY_MASK,
		PROXIMITY_IN_MASK,
		PROXIMITY_OUT_MASK,
		SUBSTRUCTURE_MASK,
		SCROLL_MASK,
		TOUCH_MASK,
		SMOOTH_SCROLL_MASK,
		TOUCHPAD_GESTURE_MASK,
		TABLET_PAD_MASK,
		ALL_EVENTS_MASK
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_event_type_get_type ()")]
	public enum EventType {
		NOTHING,
		DELETE,
		DESTROY,
		EXPOSE,
		MOTION_NOTIFY,
		BUTTON_PRESS,
		@2BUTTON_PRESS,
		DOUBLE_BUTTON_PRESS,
		@3BUTTON_PRESS,
		TRIPLE_BUTTON_PRESS,
		BUTTON_RELEASE,
		KEY_PRESS,
		KEY_RELEASE,
		ENTER_NOTIFY,
		LEAVE_NOTIFY,
		FOCUS_CHANGE,
		CONFIGURE,
		MAP,
		UNMAP,
		PROPERTY_NOTIFY,
		SELECTION_CLEAR,
		SELECTION_REQUEST,
		SELECTION_NOTIFY,
		PROXIMITY_IN,
		PROXIMITY_OUT,
		DRAG_ENTER,
		DRAG_LEAVE,
		DRAG_MOTION,
		DRAG_STATUS,
		DROP_START,
		DROP_FINISHED,
		CLIENT_EVENT,
		VISIBILITY_NOTIFY,
		SCROLL,
		WINDOW_STATE,
		SETTING,
		OWNER_CHANGE,
		GRAB_BROKEN,
		DAMAGE,
		TOUCH_BEGIN,
		TOUCH_UPDATE,
		TOUCH_END,
		TOUCH_CANCEL,
		TOUCHPAD_SWIPE,
		TOUCHPAD_PINCH,
		PAD_BUTTON_PRESS,
		PAD_BUTTON_RELEASE,
		PAD_RING,
		PAD_STRIP,
		PAD_GROUP_MODE,
		EVENT_LAST
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_FILTER_", type_id = "gdk_filter_return_get_type ()")]
	public enum FilterReturn {
		CONTINUE,
		TRANSLATE,
		REMOVE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_FRAME_CLOCK_PHASE_", type_id = "gdk_frame_clock_phase_get_type ()")]
	[Flags]
	[Version (since = "3.8")]
	public enum FrameClockPhase {
		NONE,
		FLUSH_EVENTS,
		BEFORE_PAINT,
		UPDATE,
		LAYOUT,
		PAINT,
		RESUME_EVENTS,
		AFTER_PAINT
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_FULLSCREEN_ON_", type_id = "gdk_fullscreen_mode_get_type ()")]
	[Version (since = "3.8")]
	public enum FullscreenMode {
		CURRENT_MONITOR,
		ALL_MONITORS
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_OWNERSHIP_", type_id = "gdk_grab_ownership_get_type ()")]
	public enum GrabOwnership {
		NONE,
		WINDOW,
		APPLICATION
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_GRAB_", type_id = "gdk_grab_status_get_type ()")]
	public enum GrabStatus {
		SUCCESS,
		ALREADY_GRABBED,
		INVALID_TIME,
		NOT_VIEWABLE,
		FROZEN,
		FAILED
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_GRAVITY_", type_id = "gdk_gravity_get_type ()")]
	public enum Gravity {
		NORTH_WEST,
		NORTH,
		NORTH_EAST,
		WEST,
		CENTER,
		EAST,
		SOUTH_WEST,
		SOUTH,
		SOUTH_EAST,
		STATIC
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_MODE_", type_id = "gdk_input_mode_get_type ()")]
	public enum InputMode {
		DISABLED,
		SCREEN,
		WINDOW
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_SOURCE_", type_id = "gdk_input_source_get_type ()")]
	public enum InputSource {
		MOUSE,
		PEN,
		ERASER,
		CURSOR,
		KEYBOARD,
		TOUCHSCREEN,
		TOUCHPAD,
		TRACKPOINT,
		TABLET_PAD
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_MODIFIER_INTENT_", type_id = "gdk_modifier_intent_get_type ()")]
	[Version (since = "3.4")]
	public enum ModifierIntent {
		PRIMARY_ACCELERATOR,
		CONTEXT_MENU,
		EXTEND_SELECTION,
		MODIFY_SELECTION,
		NO_TEXT_INPUT,
		SHIFT_GROUP,
		DEFAULT_MOD_MASK
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_modifier_type_get_type ()")]
	[Flags]
	public enum ModifierType {
		SHIFT_MASK,
		LOCK_MASK,
		CONTROL_MASK,
		MOD1_MASK,
		MOD2_MASK,
		MOD3_MASK,
		MOD4_MASK,
		MOD5_MASK,
		BUTTON1_MASK,
		BUTTON2_MASK,
		BUTTON3_MASK,
		BUTTON4_MASK,
		BUTTON5_MASK,
		SUPER_MASK,
		HYPER_MASK,
		META_MASK,
		RELEASE_MASK,
		MODIFIER_MASK
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_NOTIFY_", type_id = "gdk_notify_type_get_type ()")]
	public enum NotifyType {
		ANCESTOR,
		VIRTUAL,
		INFERIOR,
		NONLINEAR,
		NONLINEAR_VIRTUAL,
		UNKNOWN
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_OWNER_CHANGE_", type_id = "gdk_owner_change_get_type ()")]
	public enum OwnerChange {
		NEW_OWNER,
		DESTROY,
		CLOSE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_PROP_MODE_", type_id = "gdk_prop_mode_get_type ()")]
	public enum PropMode {
		REPLACE,
		PREPEND,
		APPEND
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_PROPERTY_", type_id = "gdk_property_state_get_type ()")]
	public enum PropertyState {
		NEW_VALUE,
		DELETE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_SCROLL_", type_id = "gdk_scroll_direction_get_type ()")]
	public enum ScrollDirection {
		UP,
		DOWN,
		LEFT,
		RIGHT,
		SMOOTH
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_SEAT_CAPABILITY_", type_id = "gdk_seat_capabilities_get_type ()")]
	[Flags]
	[Version (since = "3.20")]
	public enum SeatCapabilities {
		NONE,
		POINTER,
		TOUCH,
		TABLET_STYLUS,
		KEYBOARD,
		ALL_POINTING,
		ALL
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_SETTING_ACTION_", type_id = "gdk_setting_action_get_type ()")]
	public enum SettingAction {
		NEW,
		CHANGED,
		DELETED
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_", type_id = "gdk_status_get_type ()")]
	public enum Status {
		OK,
		ERROR,
		ERROR_PARAM,
		ERROR_FILE,
		ERROR_MEM
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_SUBPIXEL_LAYOUT_", type_id = "gdk_subpixel_layout_get_type ()")]
	[Version (since = "3.22")]
	public enum SubpixelLayout {
		UNKNOWN,
		NONE,
		HORIZONTAL_RGB,
		HORIZONTAL_BGR,
		VERTICAL_RGB,
		VERTICAL_BGR
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_TOUCHPAD_GESTURE_PHASE_", type_id = "gdk_touchpad_gesture_phase_get_type ()")]
	public enum TouchpadGesturePhase {
		BEGIN,
		UPDATE,
		END,
		CANCEL
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_VISIBILITY_", type_id = "gdk_visibility_state_get_type ()")]
	public enum VisibilityState {
		UNOBSCURED,
		PARTIAL,
		FULLY_OBSCURED
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_VISUAL_", type_id = "gdk_visual_type_get_type ()")]
	public enum VisualType {
		STATIC_GRAY,
		GRAYSCALE,
		STATIC_COLOR,
		PSEUDO_COLOR,
		TRUE_COLOR,
		DIRECT_COLOR
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_DECOR_", type_id = "gdk_wm_decoration_get_type ()")]
	[Flags]
	public enum WMDecoration {
		ALL,
		BORDER,
		RESIZEH,
		TITLE,
		MENU,
		MINIMIZE,
		MAXIMIZE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_FUNC_", type_id = "gdk_wm_function_get_type ()")]
	[Flags]
	public enum WMFunction {
		ALL,
		RESIZE,
		MOVE,
		MINIMIZE,
		MAXIMIZE,
		CLOSE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_WINDOW_EDGE_", type_id = "gdk_window_edge_get_type ()")]
	public enum WindowEdge {
		NORTH_WEST,
		NORTH,
		NORTH_EAST,
		WEST,
		EAST,
		SOUTH_WEST,
		SOUTH,
		SOUTH_EAST
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_HINT_", type_id = "gdk_window_hints_get_type ()")]
	[Flags]
	public enum WindowHints {
		POS,
		MIN_SIZE,
		MAX_SIZE,
		BASE_SIZE,
		ASPECT,
		RESIZE_INC,
		WIN_GRAVITY,
		USER_POS,
		USER_SIZE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_WINDOW_STATE_", type_id = "gdk_window_state_get_type ()")]
	[Flags]
	public enum WindowState {
		WITHDRAWN,
		ICONIFIED,
		MAXIMIZED,
		STICKY,
		FULLSCREEN,
		ABOVE,
		BELOW,
		FOCUSED,
		TILED
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_WINDOW_", type_id = "gdk_window_type_get_type ()")]
	public enum WindowType {
		ROOT,
		TOPLEVEL,
		CHILD,
		TEMP,
		FOREIGN,
		SUBSURFACE
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_WINDOW_TYPE_HINT_", type_id = "gdk_window_type_hint_get_type ()")]
	public enum WindowTypeHint {
		NORMAL,
		DIALOG,
		MENU,
		TOOLBAR,
		SPLASHSCREEN,
		UTILITY,
		DOCK,
		DESKTOP,
		DROPDOWN_MENU,
		POPUP_MENU,
		TOOLTIP,
		NOTIFICATION,
		COMBO,
		DND
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_INPUT_", type_id = "gdk_window_window_class_get_type ()")]
	public enum WindowWindowClass {
		[CCode (cname = "GDK_INPUT_OUTPUT")]
		INPUT_OUTPUT,
		[CCode (cname = "GDK_INPUT_ONLY")]
		INPUT_ONLY
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_GL_ERROR_")]
	[Version (since = "3.16")]
	public errordomain GLError {
		NOT_AVAILABLE,
		UNSUPPORTED_FORMAT,
		UNSUPPORTED_PROFILE,
		COMPILATION_FAILED,
		LINK_FAILED;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", cprefix = "GDK_VULKAN_ERROR_")]
	[Version (since = "3.90")]
	public errordomain VulkanError {
		UNSUPPORTED,
		NOT_AVAILABLE;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gdk/gdk.h", instance_pos = 1.9)]
	public delegate void EventFunc (Gdk.Event event);
	[CCode (cheader_filename = "gdk/gdk.h", instance_pos = 2.9)]
	public delegate Gdk.FilterReturn FilterFunc (Gdk.XEvent xevent, Gdk.Event event);
	[CCode (cheader_filename = "gdk/gdk.h", instance_pos = 2.9)]
	[Version (since = "3.20")]
	public delegate void SeatGrabPrepareFunc (Gdk.Seat seat, Gdk.Window window);
	[CCode (cheader_filename = "gdk/gdk.h", instance_pos = 1.9)]
	public delegate bool WindowChildFunc (Gdk.Window window);
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_BUTTON_MIDDLE")]
	[Version (since = "3.4")]
	public const int BUTTON_MIDDLE;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_BUTTON_PRIMARY")]
	[Version (since = "3.4")]
	public const int BUTTON_PRIMARY;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_BUTTON_SECONDARY")]
	[Version (since = "3.4")]
	public const int BUTTON_SECONDARY;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_CURRENT_TIME")]
	public const int CURRENT_TIME;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_EVENT_PROPAGATE")]
	[Version (since = "3.4")]
	public const bool EVENT_PROPAGATE;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_EVENT_STOP")]
	[Version (since = "3.4")]
	public const bool EVENT_STOP;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_MAX_TIMECOORD_AXES")]
	public const int MAX_TIMECOORD_AXES;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_PARENT_RELATIVE")]
	public const int PARENT_RELATIVE;
	[CCode (cheader_filename = "gdk/gdk.h", cname = "GDK_PRIORITY_REDRAW")]
	public const int PRIORITY_REDRAW;
	[CCode (cheader_filename = "gdk/gdk.h")]
	public const Gdk.Atom SELECTION_CLIPBOARD;
	[CCode (cheader_filename = "gdk/gdk.h")]
	public const Gdk.Atom SELECTION_PRIMARY;
	[CCode (cheader_filename = "gdk/gdk.h")]
	public const Gdk.Atom SELECTION_SECONDARY;
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void beep ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.16")]
	public static void cairo_draw_from_gl (Cairo.Context cr, Gdk.Window window, int source, int source_type, int buffer_scale, int x, int y, int width, int height);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool cairo_get_clip_rectangle (Cairo.Context cr, out Gdk.Rectangle rect);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.22")]
	public static unowned Gdk.DrawingContext? cairo_get_drawing_context (Cairo.Context cr);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.8")]
	public static void cairo_rectangle (Cairo.Context cr, Gdk.Rectangle rectangle);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.8")]
	public static void cairo_region (Cairo.Context cr, Cairo.Region region);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Cairo.Region cairo_region_create_from_surface (Cairo.Surface surface);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.8")]
	public static void cairo_set_source_pixbuf (Cairo.Context cr, Gdk.Pixbuf pixbuf, double pixbuf_x, double pixbuf_y);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static void cairo_set_source_rgba (Cairo.Context cr, Gdk.RGBA rgba);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.10")]
	public static Cairo.Surface cairo_surface_create_from_pixbuf (Gdk.Pixbuf pixbuf, int scale, Gdk.Window? for_window);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.90")]
	public static void cairo_surface_upload_to_gl (Cairo.Surface surface, int target, int width, int height, Gdk.GLContext? context);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static void disable_multidevice ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void drag_abort (Gdk.DragContext context, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Gdk.DragContext drag_begin (Gdk.Window window, GLib.List<Gdk.Atom> targets);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Gdk.DragContext drag_begin_for_device (Gdk.Window window, Gdk.Device device, GLib.List<Gdk.Atom> targets);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.20")]
	public static Gdk.DragContext drag_begin_from_point (Gdk.Window window, Gdk.Device device, GLib.List<Gdk.Atom> targets, int x_root, int y_root);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void drag_drop (Gdk.DragContext context, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.20")]
	public static void drag_drop_done (Gdk.DragContext context, bool success);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.6")]
	public static bool drag_drop_succeeded (Gdk.DragContext context);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static void drag_find_window_for_screen (Gdk.DragContext context, Gdk.Window drag_window, Gdk.Screen screen, int x_root, int y_root, out Gdk.Window dest_window, out Gdk.DragProtocol protocol);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Gdk.Atom drag_get_selection (Gdk.DragContext context);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool drag_motion (Gdk.DragContext context, Gdk.Window dest_window, Gdk.DragProtocol protocol, int x_root, int y_root, Gdk.DragAction suggested_action, Gdk.DragAction possible_actions, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void drag_status (Gdk.DragContext context, Gdk.DragAction action, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void drop_finish (Gdk.DragContext context, bool success, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void drop_reply (Gdk.DragContext context, bool accepted, uint32 time_);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static int error_trap_pop ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static void error_trap_pop_ignored ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void error_trap_push ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static bool events_get_angle (Gdk.Event event1, Gdk.Event event2, out double angle);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static bool events_get_center (Gdk.Event event1, Gdk.Event event2, out double x, out double y);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.0")]
	public static bool events_get_distance (Gdk.Event event1, Gdk.Event event2, out double distance);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool events_pending ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void flush ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static unowned Gdk.Window get_default_root_window ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static unowned string? get_display_arg_name ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static unowned string get_program_class ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool get_show_events ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void init ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[] argv);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool init_check ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[] argv);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void keyval_convert_case (uint symbol, out uint lower, out uint upper);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static uint keyval_from_name (string keyval_name);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool keyval_is_lower (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool keyval_is_upper (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static unowned string? keyval_name (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static uint keyval_to_lower (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static uint32 keyval_to_unicode (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static uint keyval_to_upper (uint keyval);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static void notify_startup_complete ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.12")]
	public static void notify_startup_complete_with_id (string startup_id);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Pango.Context pango_context_get ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.22")]
	public static Pango.Context pango_context_get_for_display (Gdk.Display display);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static Pango.Context pango_context_get_for_screen (Gdk.Screen screen);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Cairo.Region pango_layout_get_clip_region (Pango.Layout layout, int x_origin, int y_origin, int index_ranges, int n_ranges);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static void parse_args ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[] argv);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static Gdk.Pixbuf? pixbuf_get_from_surface (Cairo.Surface surface, int src_x, int src_y, int width, int height);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void property_change (Gdk.Window window, Gdk.Atom property, Gdk.Atom type, int format, Gdk.PropMode mode, [CCode (array_length = false, type = "const guchar*")] uint8[] data, int nelements);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void property_delete (Gdk.Window window, Gdk.Atom property);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool property_get (Gdk.Window window, Gdk.Atom property, Gdk.Atom type, ulong offset, ulong length, int pdelete, out Gdk.Atom actual_property_type, out int actual_format, [CCode (array_length_cname = "actual_length", array_length_pos = 8.5)] out uint8[] data);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "3.10")]
	public static void set_allowed_backends (string backends);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void set_double_click_time (uint msec);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void set_program_class (string program_class);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static void set_show_events (bool show_events);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static bool setting_get (string name, GLib.Value value);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.2")]
	public static int text_property_to_utf8_list_for_display (Gdk.Display display, Gdk.Atom encoding, int format, [CCode (array_length_cname = "length", array_length_pos = 4.5)] uint8[] text, [CCode (array_length = false, array_null_terminated = true)] out string[] list);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.12")]
	public static uint threads_add_idle (GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.12")]
	public static uint threads_add_idle_full (int priority, owned GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.12")]
	public static uint threads_add_timeout (uint interval, GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.12")]
	public static uint threads_add_timeout_full (int priority, uint interval, owned GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.14")]
	public static uint threads_add_timeout_seconds (uint interval, GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (since = "2.14")]
	public static uint threads_add_timeout_seconds_full (int priority, uint interval, owned GLib.SourceFunc function);
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (deprecated = true, deprecated_since = "3.6")]
	public static void threads_enter ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (deprecated = true, deprecated_since = "3.6")]
	public static void threads_init ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	[Version (deprecated = true, deprecated_since = "3.6")]
	public static void threads_leave ();
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static uint unicode_to_keyval (uint32 wc);
	[CCode (cheader_filename = "gdk/gdk.h")]
	public static string? utf8_to_string_target (string str);
}
[CCode (cprefix = "Gsk", gir_namespace = "Gsk", gir_version = "4.0", lower_case_cprefix = "gsk_")]
namespace Gsk {
	[CCode (cheader_filename = "gsk/gsk.h", get_value_function = "gsk_value_get_render_node", ref_function = "gsk_render_node_ref", set_value_function = "gsk_value_set_render_node", take_value_function = "gsk_value_take_render_node", type_id = "gsk_render_node_get_type ()", unref_function = "gsk_render_node_unref")]
	[Version (since = "3.90")]
	public class RenderNode {
		[CCode (has_construct_function = false)]
		protected RenderNode ();
		[CCode (cname = "gsk_blend_node_new", has_construct_function = false)]
		public RenderNode.blend (Gsk.RenderNode bottom, Gsk.RenderNode top, Gsk.BlendMode blend_mode);
		[CCode (cname = "gsk_border_node_new", has_construct_function = false)]
		public RenderNode.border (Gsk.RoundedRect outline, float border_width, Gdk.RGBA border_color);
		[CCode (cname = "gsk_cairo_node_new", has_construct_function = false)]
		public RenderNode.cairo (Graphene.Rect bounds);
		[CCode (cname = "gsk_cairo_node_get_draw_context")]
		public Cairo.Context cairo_node_get_draw_context (Gsk.Renderer? renderer);
		[CCode (cname = "gsk_clip_node_new", has_construct_function = false)]
		public RenderNode.clip (Gsk.RenderNode child, Graphene.Rect clip);
		[CCode (cname = "gsk_clip_node_get_child")]
		public unowned Gsk.RenderNode clip_node_get_child ();
		[CCode (cname = "gsk_color_node_new", has_construct_function = false)]
		public RenderNode.color (Gdk.RGBA rgba, Graphene.Rect bounds);
		[CCode (cname = "gsk_color_matrix_node_new", has_construct_function = false)]
		public RenderNode.color_matrix (Gsk.RenderNode child, Graphene.Matrix color_matrix, Graphene.Vec4 color_offset);
		[CCode (cname = "gsk_container_node_new", has_construct_function = false)]
		public RenderNode.container ([CCode (array_length_cname = "n_children", array_length_pos = 1.1, array_length_type = "guint")] Gsk.RenderNode[] children);
		[CCode (cname = "gsk_container_node_get_child")]
		public Gsk.RenderNode container_node_get_child (uint idx);
		[CCode (cname = "gsk_container_node_get_n_children")]
		public uint container_node_get_n_children ();
		[CCode (cname = "gsk_cross_fade_node_new", has_construct_function = false)]
		public RenderNode.cross_fade (Gsk.RenderNode start, Gsk.RenderNode end, double progress);
		public static Gsk.RenderNode? deserialize (GLib.Bytes bytes) throws GLib.Error;
		public void draw (Cairo.Context cr);
		public Graphene.Rect get_bounds ();
		public unowned string? get_name ();
		public Gsk.RenderNodeType get_node_type ();
		[CCode (cname = "gsk_inset_shadow_node_new", has_construct_function = false)]
		public RenderNode.inset_shadow (Gsk.RoundedRect outline, Gdk.RGBA color, float dx, float dy, float spread, float blur_radius);
		[CCode (cname = "gsk_linear_gradient_node_new", has_construct_function = false)]
		public RenderNode.linear_gradient (Graphene.Rect bounds, Graphene.Point start, Graphene.Point end, [CCode (array_length_cname = "n_color_stops", array_length_pos = 4.1, array_length_type = "gsize", type = "const GskColorStop*")] Gsk.ColorStop[] color_stops);
		[CCode (cname = "gsk_opacity_node_new", has_construct_function = false)]
		public RenderNode.opacity (Gsk.RenderNode child, double opacity);
		[CCode (cname = "gsk_opacity_node_get_child")]
		public unowned Gsk.RenderNode opacity_node_get_child ();
		[CCode (cname = "gsk_outset_shadow_node_new", has_construct_function = false)]
		public RenderNode.outset_shadow (Gsk.RoundedRect outline, Gdk.RGBA color, float dx, float dy, float spread, float blur_radius);
		public unowned Gsk.RenderNode @ref ();
		[CCode (cname = "gsk_repeat_node_new", has_construct_function = false)]
		public RenderNode.repeat (Graphene.Rect bounds, Gsk.RenderNode child, Graphene.Rect child_bounds);
		[CCode (cname = "gsk_repeating_linear_gradient_node_new", has_construct_function = false)]
		public RenderNode.repeating_linear_gradient (Graphene.Rect bounds, Graphene.Point start, Graphene.Point end, [CCode (array_length_cname = "n_color_stops", array_length_pos = 4.1, array_length_type = "gsize", type = "const GskColorStop*")] Gsk.ColorStop[] color_stops);
		[CCode (cname = "gsk_rounded_clip_node_new", has_construct_function = false)]
		public RenderNode.rounded_clip (Gsk.RenderNode child, Gsk.RoundedRect clip);
		[CCode (cname = "gsk_rounded_clip_node_get_child")]
		public unowned Gsk.RenderNode rounded_clip_node_get_child ();
		public GLib.Bytes serialize ();
		public void set_name (string? name);
		public void set_scaling_filter (Gsk.ScalingFilter min_filter, Gsk.ScalingFilter mag_filter);
		[CCode (cname = "gsk_shadow_node_new", has_construct_function = false)]
		public RenderNode.shadow (Gsk.RenderNode child, [CCode (array_length_cname = "n_shadows", array_length_pos = 2.1, array_length_type = "gsize")] Gsk.Shadow[] shadows);
		[CCode (cname = "gsk_transform_node_new", has_construct_function = false)]
		public RenderNode.transform (Gsk.RenderNode child, Graphene.Matrix transform);
		[CCode (cname = "gsk_transform_node_get_child")]
		public unowned Gsk.RenderNode transform_node_get_child ();
		public void unref ();
		public bool write_to_file (string filename) throws GLib.Error;
	}
	[CCode (cheader_filename = "gsk/gsk.h", type_id = "gsk_renderer_get_type ()")]
	public abstract class Renderer : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Renderer ();
		public void end_draw_frame (Gdk.DrawingContext context);
		[CCode (cname = "gsk_renderer_new_for_window")]
		[Version (since = "3.90")]
		public static Gsk.Renderer? for_window (Gdk.Window window);
		[Version (since = "3.90")]
		public unowned Gdk.Display get_display ();
		[Version (since = "3.90")]
		public int get_scale_factor ();
		[Version (since = "3.90")]
		public Graphene.Rect get_viewport ();
		[Version (since = "3.90")]
		public unowned Gdk.Window? get_window ();
		[Version (since = "3.90")]
		public bool realize (Gdk.Window window) throws GLib.Error;
		[Version (since = "3.90")]
		public void render (Gsk.RenderNode root, Gdk.DrawingContext context);
		[Version (since = "3.90")]
		public Gsk.Texture render_texture (Gsk.RenderNode root, Graphene.Rect? viewport);
		[Version (since = "3.90")]
		public void set_scale_factor (int scale_factor);
		[Version (since = "3.90")]
		public void set_viewport (Graphene.Rect? viewport);
		[Version (since = "3.90")]
		public void unrealize ();
		[Version (since = "3.90")]
		public Gdk.Display display { get; construct; }
		[NoAccessorMethod]
		[Version (since = "3.90")]
		public Gdk.DrawingContext drawing_context { owned get; }
		[Version (since = "3.90")]
		public int scale_factor { get; set; }
		[Version (since = "3.90")]
		public Graphene.Rect viewport { get; set; }
		public Gdk.Window window { get; construct; }
	}
	[CCode (cheader_filename = "gsk/gsk.h", type_id = "gsk_texture_get_type ()")]
	[Version (since = "3.90")]
	public abstract class Texture : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Texture ();
		public void download (uint8 data, size_t stride);
		[CCode (has_construct_function = false)]
		public Texture.for_data ([CCode (array_length = false, type = "const guchar*")] uint8[] data, int width, int height, int stride);
		[CCode (has_construct_function = false)]
		public Texture.for_pixbuf (Gdk.Pixbuf pixbuf);
		public int get_height ();
		public int get_width ();
		public Gsk.RenderNode node_new (Graphene.Rect bounds);
		public int height { get; construct; }
		public int width { get; construct; }
	}
	[CCode (cheader_filename = "gsk/gsk.h", has_type_id = false)]
	public struct ColorStop {
		public double offset;
		public Gdk.RGBA color;
	}
	[CCode (cheader_filename = "gsk/gsk.h", has_type_id = false)]
	[Version (since = "3.90")]
	public struct RoundedRect {
		public Graphene.Rect bounds;
		[CCode (array_length = false)]
		public weak Graphene.Size corner[4];
		public bool contains_point (Graphene.Point point);
		public bool contains_rect (Graphene.Rect rect);
		public unowned Gsk.RoundedRect? init (Graphene.Rect bounds, Graphene.Size top_left, Graphene.Size top_right, Graphene.Size bottom_right, Graphene.Size bottom_left);
		public unowned Gsk.RoundedRect? init_copy (Gsk.RoundedRect src);
		public unowned Gsk.RoundedRect? init_from_rect (Graphene.Rect bounds, float radius);
		public bool intersects_rect (Graphene.Rect rect);
		public bool is_rectilinear ();
		public unowned Gsk.RoundedRect? normalize ();
		public unowned Gsk.RoundedRect? offset (float dx, float dy);
		public unowned Gsk.RoundedRect? shrink (float top, float right, float bottom, float left);
	}
	[CCode (cheader_filename = "gsk/gsk.h", has_type_id = false)]
	public struct Shadow {
		public Gdk.RGBA color;
		public float dx;
		public float dy;
		public float radius;
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_BLEND_MODE_", has_type_id = false)]
	[Version (since = "3.90")]
	public enum BlendMode {
		DEFAULT,
		MULTIPLY,
		SCREEN,
		OVERLAY,
		DARKEN,
		LIGHTEN,
		COLOR_DODGE,
		COLOR_BURN,
		HARD_LIGHT,
		SOFT_LIGHT,
		DIFFERENCE,
		EXCLUSION,
		COLOR,
		HUE,
		SATURATION,
		LUMINOSITY
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_CORNER_", has_type_id = false)]
	public enum Corner {
		TOP_LEFT,
		TOP_RIGHT,
		BOTTOM_RIGHT,
		BOTTOM_LEFT
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_", has_type_id = false)]
	[Version (since = "3.90")]
	public enum RenderNodeType {
		NOT_A_RENDER_NODE,
		CONTAINER_NODE,
		CAIRO_NODE,
		COLOR_NODE,
		LINEAR_GRADIENT_NODE,
		REPEATING_LINEAR_GRADIENT_NODE,
		BORDER_NODE,
		TEXTURE_NODE,
		INSET_SHADOW_NODE,
		OUTSET_SHADOW_NODE,
		TRANSFORM_NODE,
		OPACITY_NODE,
		COLOR_MATRIX_NODE,
		REPEAT_NODE,
		CLIP_NODE,
		ROUNDED_CLIP_NODE,
		SHADOW_NODE,
		BLEND_NODE,
		CROSS_FADE_NODE
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_SCALING_FILTER_", has_type_id = false)]
	[Version (since = "3.90")]
	public enum ScalingFilter {
		LINEAR,
		NEAREST,
		TRILINEAR
	}
	[CCode (cheader_filename = "gsk/gsk.h", cprefix = "GSK_SERIALIZATION_")]
	public errordomain SerializationError {
		UNSUPPORTED_FORMAT,
		UNSUPPORTED_VERSION,
		INVALID_DATA;
		public static GLib.Quark quark ();
	}
}
[CCode (cprefix = "Gtk", gir_namespace = "Gtk", gir_version = "4.0", lower_case_cprefix = "gtk_")]
namespace Gtk {
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_about_dialog_get_type ()")]
	public class AboutDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public AboutDialog ();
		[Version (since = "3.4")]
		public void add_credit_section (string section_name, [CCode (array_length = false, array_null_terminated = true)] string[] people);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public unowned string[] get_artists ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public unowned string[] get_authors ();
		[Version (since = "2.6")]
		public unowned string get_comments ();
		[Version (since = "2.6")]
		public unowned string get_copyright ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public unowned string[] get_documenters ();
		[Version (since = "2.6")]
		public unowned string get_license ();
		[Version (since = "3.0")]
		public Gtk.License get_license_type ();
		[Version (since = "2.6")]
		public unowned Gdk.Pixbuf get_logo ();
		[Version (since = "2.6")]
		public unowned string get_logo_icon_name ();
		[Version (since = "2.12")]
		public unowned string get_program_name ();
		[Version (since = "2.6")]
		public unowned string get_translator_credits ();
		[Version (since = "2.6")]
		public unowned string get_version ();
		[Version (since = "2.6")]
		public unowned string get_website ();
		[Version (since = "2.6")]
		public unowned string get_website_label ();
		[Version (since = "2.8")]
		public bool get_wrap_license ();
		[Version (since = "2.6")]
		public void set_artists ([CCode (array_length = false, array_null_terminated = true)] string[] artists);
		[Version (since = "2.6")]
		public void set_authors ([CCode (array_length = false, array_null_terminated = true)] string[] authors);
		[Version (since = "2.6")]
		public void set_comments (string? comments);
		[Version (since = "2.6")]
		public void set_copyright (string? copyright);
		[Version (since = "2.6")]
		public void set_documenters ([CCode (array_length = false, array_null_terminated = true)] string[] documenters);
		[Version (since = "2.6")]
		public void set_license (string? license);
		[Version (since = "3.0")]
		public void set_license_type (Gtk.License license_type);
		[Version (since = "2.6")]
		public void set_logo (Gdk.Pixbuf? logo);
		[Version (since = "2.6")]
		public void set_logo_icon_name (string? icon_name);
		[Version (since = "2.12")]
		public void set_program_name (string name);
		[Version (since = "2.6")]
		public void set_translator_credits (string? translator_credits);
		[Version (since = "2.6")]
		public void set_version (string? version);
		[Version (since = "2.6")]
		public void set_website (string? website);
		[Version (since = "2.6")]
		public void set_website_label (string website_label);
		[Version (since = "2.8")]
		public void set_wrap_license (bool wrap_license);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public string[] artists { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public string[] authors { get; set; }
		[Version (since = "2.6")]
		public string comments { get; set; }
		[Version (since = "2.6")]
		public string copyright { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public string[] documenters { get; set; }
		[Version (since = "2.6")]
		public string license { get; set; }
		[Version (since = "3.0")]
		public Gtk.License license_type { get; set; }
		[Version (since = "2.6")]
		public Gdk.Pixbuf logo { get; set; }
		[Version (since = "2.6")]
		public string logo_icon_name { get; set; }
		[Version (since = "2.12")]
		public string program_name { get; set; }
		[Version (since = "2.6")]
		public string translator_credits { get; set; }
		[Version (since = "2.6")]
		public string version { get; set; }
		[Version (since = "2.6")]
		public string website { get; set; }
		[Version (since = "2.6")]
		public string website_label { get; set; }
		[Version (since = "2.8")]
		public bool wrap_license { get; set; }
		[Version (since = "2.24")]
		public virtual signal bool activate_link (string uri);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_group_get_type ()")]
	public class AccelGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public AccelGroup ();
		public bool activate (GLib.Quark accel_quark, GLib.Object acceleratable, uint accel_key, Gdk.ModifierType accel_mods);
		public void connect (uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags, [CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate closure);
		public void connect_by_path (string accel_path, [CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate closure);
		public bool disconnect (GLib.Closure? closure);
		public bool disconnect_key (uint accel_key, Gdk.ModifierType accel_mods);
		public Gtk.AccelKey* find (Gtk.AccelGroupFindFunc find_func);
		public static unowned Gtk.AccelGroup? from_accel_closure (GLib.Closure closure);
		[Version (since = "2.14")]
		public bool get_is_locked ();
		[Version (since = "2.14")]
		public Gdk.ModifierType get_modifier_mask ();
		public void @lock ();
		[CCode (array_length_pos = 2.1, array_length_type = "guint")]
		public unowned Gtk.AccelGroupEntry[]? query (uint accel_key, Gdk.ModifierType accel_mods);
		public void unlock ();
		public bool is_locked { get; }
		public Gdk.ModifierType modifier_mask { get; }
		public signal bool accel_activate (GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier);
		public virtual signal void accel_changed (uint keyval, Gdk.ModifierType modifier, GLib.Closure accel_closure);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_label_get_type ()")]
	public class AccelLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AccelLabel (string string);
		[Version (since = "3.12")]
		public void get_accel (out uint accelerator_key, out Gdk.ModifierType accelerator_mods);
		public unowned Gtk.Widget? get_accel_widget ();
		public uint get_accel_width ();
		public bool refetch ();
		[Version (since = "3.6")]
		public void set_accel (uint accelerator_key, Gdk.ModifierType accelerator_mods);
		public void set_accel_closure ([CCode (type = "GClosure*")] owned Gtk.AccelGroupActivate accel_closure);
		public void set_accel_widget (Gtk.Widget accel_widget);
		[NoAccessorMethod]
		public GLib.Closure accel_closure { owned get; set; }
		public Gtk.Widget accel_widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_accel_map_get_type ()")]
	public class AccelMap : GLib.Object {
		[CCode (has_construct_function = false)]
		protected AccelMap ();
		public static void add_entry (string accel_path, uint accel_key, Gdk.ModifierType accel_mods);
		public static void add_filter (string filter_pattern);
		public static bool change_entry (string accel_path, uint accel_key, Gdk.ModifierType accel_mods, bool replace);
		public static void @foreach (void* data, Gtk.AccelMapForeach foreach_func);
		public static void foreach_unfiltered (void* data, Gtk.AccelMapForeach foreach_func);
		[Version (since = "2.4")]
		public static unowned Gtk.AccelMap @get ();
		public static void load (string file_name);
		public static void load_fd (int fd);
		public static void load_scanner (GLib.Scanner scanner);
		[Version (since = "2.4")]
		public static void lock_path (string accel_path);
		public static bool lookup_entry (string accel_path, out Gtk.AccelKey key);
		public static void save (string file_name);
		public static void save_fd (int fd);
		[Version (since = "2.4")]
		public static void unlock_path (string accel_path);
		[Version (since = "2.4")]
		public signal void changed (string accel_path, uint accel_key, Gdk.ModifierType accel_mods);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_accessible_get_type ()")]
	public class Accessible : Atk.Object {
		[CCode (has_construct_function = false)]
		protected Accessible ();
		[Version (since = "2.22")]
		public unowned Gtk.Widget? get_widget ();
		[Version (since = "2.22")]
		public void set_widget (Gtk.Widget? widget);
		[NoWrapper]
		public virtual void widget_set ();
		[NoWrapper]
		public virtual void widget_unset ();
		public Gtk.Widget widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_action_bar_get_type ()")]
	public class ActionBar : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.12")]
		public ActionBar ();
		[Version (since = "3.12")]
		public unowned Gtk.Widget? get_center_widget ();
		[Version (since = "3.90")]
		public bool get_revealed ();
		[Version (since = "3.12")]
		public void pack_end (Gtk.Widget child);
		[Version (since = "3.12")]
		public void pack_start (Gtk.Widget child);
		[Version (since = "3.12")]
		public void set_center_widget (Gtk.Widget? center_widget);
		[Version (since = "3.90")]
		public void set_revealed (bool revealed);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_adjustment_get_type ()")]
	public class Adjustment : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public Adjustment (double value, double lower, double upper, double step_increment, double page_increment, double page_size);
		public void clamp_page (double lower, double upper);
		[Version (since = "2.14")]
		public void configure (double value, double lower, double upper, double step_increment, double page_increment, double page_size);
		[Version (since = "2.14")]
		public double get_lower ();
		[Version (since = "3.2")]
		public double get_minimum_increment ();
		[Version (since = "2.14")]
		public double get_page_increment ();
		[Version (since = "2.14")]
		public double get_page_size ();
		[Version (since = "2.14")]
		public double get_step_increment ();
		[Version (since = "2.14")]
		public double get_upper ();
		public double get_value ();
		[Version (since = "2.14")]
		public void set_lower (double lower);
		[Version (since = "2.14")]
		public void set_page_increment (double page_increment);
		[Version (since = "2.14")]
		public void set_page_size (double page_size);
		[Version (since = "2.14")]
		public void set_step_increment (double step_increment);
		[Version (since = "2.14")]
		public void set_upper (double upper);
		public void set_value (double value);
		[Version (since = "2.4")]
		public double lower { get; set; }
		[Version (since = "2.4")]
		public double page_increment { get; set; }
		[Version (since = "2.4")]
		public double page_size { get; set; }
		[Version (since = "2.4")]
		public double step_increment { get; set; }
		[Version (since = "2.4")]
		public double upper { get; set; }
		[Version (since = "2.4")]
		public double value { get; set; }
		public virtual signal void changed ();
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_button_get_type ()")]
	public class AppChooserButton : Gtk.ComboBox, Atk.Implementor, Gtk.AppChooser, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public AppChooserButton (string content_type);
		[Version (since = "3.0")]
		public void append_custom_item (string name, string label, GLib.Icon icon);
		[Version (since = "3.0")]
		public void append_separator ();
		public unowned string? get_heading ();
		[Version (since = "3.2")]
		public bool get_show_default_item ();
		[Version (since = "3.0")]
		public bool get_show_dialog_item ();
		[Version (since = "3.0")]
		public void set_active_custom_item (string name);
		public void set_heading (string heading);
		[Version (since = "3.2")]
		public void set_show_default_item (bool setting);
		[Version (since = "3.0")]
		public void set_show_dialog_item (bool setting);
		public string heading { get; set; }
		[Version (since = "3.2")]
		public bool show_default_item { get; set construct; }
		public bool show_dialog_item { get; set construct; }
		public virtual signal void custom_item_activated (string item_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_dialog_get_type ()")]
	public class AppChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.AppChooser, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public AppChooserDialog (Gtk.Window? parent, Gtk.DialogFlags flags, GLib.File file);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public AppChooserDialog.for_content_type (Gtk.Window? parent, Gtk.DialogFlags flags, string content_type);
		public unowned string? get_heading ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_widget ();
		public void set_heading (string heading);
		[NoAccessorMethod]
		public GLib.File gfile { owned get; construct; }
		public string heading { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_widget_get_type ()")]
	public class AppChooserWidget : Gtk.Box, Atk.Implementor, Gtk.AppChooser, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public AppChooserWidget (string content_type);
		[Version (since = "3.0")]
		public unowned string get_default_text ();
		[Version (since = "3.0")]
		public bool get_show_all ();
		[Version (since = "3.0")]
		public bool get_show_default ();
		[Version (since = "3.0")]
		public bool get_show_fallback ();
		[Version (since = "3.0")]
		public bool get_show_other ();
		[Version (since = "3.0")]
		public bool get_show_recommended ();
		public void set_default_text (string text);
		[Version (since = "3.0")]
		public void set_show_all (bool setting);
		[Version (since = "3.0")]
		public void set_show_default (bool setting);
		[Version (since = "3.0")]
		public void set_show_fallback (bool setting);
		[Version (since = "3.0")]
		public void set_show_other (bool setting);
		[Version (since = "3.0")]
		public void set_show_recommended (bool setting);
		public string default_text { get; set; }
		public bool show_all { get; set construct; }
		public bool show_default { get; set construct; }
		public bool show_fallback { get; set construct; }
		public bool show_other { get; set construct; }
		public bool show_recommended { get; set construct; }
		public virtual signal void application_activated (GLib.AppInfo app_info);
		public virtual signal void application_selected (GLib.AppInfo app_info);
		public virtual signal void populate_popup (Gtk.Menu menu, GLib.AppInfo app_info);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_application_get_type ()")]
	public class Application : GLib.Application, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false)]
		[Version (since = "3.0")]
		public Application (string? application_id, GLib.ApplicationFlags flags);
		[Version (since = "3.0")]
		public void add_window (Gtk.Window window);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "3.12")]
		public string[] get_accels_for_action (string detailed_action_name);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "3.14")]
		public string[] get_actions_for_accel (string accel);
		[Version (since = "3.6")]
		public unowned Gtk.Window get_active_window ();
		[Version (since = "3.4")]
		public unowned GLib.MenuModel? get_app_menu ();
		[Version (since = "3.14")]
		public unowned GLib.Menu get_menu_by_id (string id);
		[Version (since = "3.4")]
		public unowned GLib.MenuModel get_menubar ();
		[Version (since = "3.6")]
		public unowned Gtk.Window? get_window_by_id (uint id);
		[Version (since = "3.0")]
		public unowned GLib.List<Gtk.Window> get_windows ();
		[Version (since = "3.4")]
		public uint inhibit (Gtk.Window? window, Gtk.ApplicationInhibitFlags flags, string? reason);
		[Version (since = "3.4")]
		public bool is_inhibited (Gtk.ApplicationInhibitFlags flags);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "3.12")]
		public string[] list_action_descriptions ();
		[Version (since = "3.14")]
		public bool prefers_app_menu ();
		[Version (since = "3.0")]
		public void remove_window (Gtk.Window window);
		[Version (since = "3.12")]
		public void set_accels_for_action (string detailed_action_name, [CCode (array_length = false, array_null_terminated = true)] string[] accels);
		[Version (since = "3.4")]
		public void set_app_menu (GLib.MenuModel? app_menu);
		[Version (since = "3.4")]
		public void set_menubar (GLib.MenuModel? menubar);
		[Version (since = "3.4")]
		public void uninhibit (uint cookie);
		public Gtk.Window active_window { get; }
		public GLib.MenuModel app_menu { get; set; }
		public GLib.MenuModel menubar { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.4")]
		public bool register_session { get; set; }
		[Version (since = "3.2")]
		public virtual signal void window_added (Gtk.Window window);
		[Version (since = "3.2")]
		public virtual signal void window_removed (Gtk.Window window);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_application_window_get_type ()")]
	public class ApplicationWindow : Gtk.Window, Atk.Implementor, GLib.ActionGroup, GLib.ActionMap, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public ApplicationWindow (Gtk.Application application);
		[Version (since = "3.20")]
		public unowned Gtk.ShortcutsWindow? get_help_overlay ();
		[Version (since = "3.6")]
		public uint get_id ();
		[Version (since = "3.4")]
		public bool get_show_menubar ();
		[Version (since = "3.20")]
		public void set_help_overlay (Gtk.ShortcutsWindow? help_overlay);
		[Version (since = "3.4")]
		public void set_show_menubar (bool show_menubar);
		public bool show_menubar { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_aspect_frame_get_type ()")]
	public class AspectFrame : Gtk.Frame, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AspectFrame (string? label, float xalign, float yalign, float ratio, bool obey_child);
		public void @set (float xalign, float yalign, float ratio, bool obey_child);
		[NoAccessorMethod]
		public bool obey_child { get; set; }
		[NoAccessorMethod]
		public float ratio { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_assistant_get_type ()")]
	public class Assistant : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public Assistant ();
		[Version (since = "2.10")]
		public void add_action_widget (Gtk.Widget child);
		[Version (since = "2.10")]
		public int append_page (Gtk.Widget page);
		[Version (since = "2.22")]
		public void commit ();
		[Version (since = "2.10")]
		public int get_current_page ();
		[Version (since = "2.10")]
		public int get_n_pages ();
		[Version (since = "2.10")]
		public unowned Gtk.Widget? get_nth_page (int page_num);
		[Version (since = "2.10")]
		public bool get_page_complete (Gtk.Widget page);
		[Version (since = "3.18")]
		public bool get_page_has_padding (Gtk.Widget page);
		[Version (since = "2.10")]
		public unowned string get_page_title (Gtk.Widget page);
		[Version (since = "2.10")]
		public Gtk.AssistantPageType get_page_type (Gtk.Widget page);
		[Version (since = "2.10")]
		public int insert_page (Gtk.Widget page, int position);
		[Version (since = "3.0")]
		public void next_page ();
		[Version (since = "2.10")]
		public int prepend_page (Gtk.Widget page);
		[Version (since = "3.0")]
		public void previous_page ();
		[Version (since = "2.10")]
		public void remove_action_widget (Gtk.Widget child);
		[Version (since = "3.2")]
		public void remove_page (int page_num);
		[Version (since = "2.10")]
		public void set_current_page (int page_num);
		[Version (since = "2.10")]
		public void set_forward_page_func (owned Gtk.AssistantPageFunc? page_func);
		[Version (since = "2.10")]
		public void set_page_complete (Gtk.Widget page, bool complete);
		[Version (since = "3.18")]
		public void set_page_has_padding (Gtk.Widget page, bool has_padding);
		[Version (since = "2.10")]
		public void set_page_title (Gtk.Widget page, string title);
		[Version (since = "2.10")]
		public void set_page_type (Gtk.Widget page, Gtk.AssistantPageType type);
		[Version (since = "2.10")]
		public void update_buttons_state ();
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public int use_header_bar { get; construct; }
		[Version (since = "2.10")]
		public virtual signal void apply ();
		[Version (since = "2.10")]
		public virtual signal void cancel ();
		[Version (since = "2.10")]
		public virtual signal void close ();
		public signal void escape ();
		[Version (since = "2.10")]
		public virtual signal void prepare (Gtk.Widget page);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_bin_get_type ()")]
	public abstract class Bin : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Bin ();
		public unowned Gtk.Widget get_child ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class BindingEntry {
		public weak Gtk.BindingSet binding_set;
		public uint destroyed;
		public weak Gtk.BindingEntry hash_next;
		public uint in_emission;
		public uint keyval;
		public uint marks_unbound;
		public Gdk.ModifierType modifiers;
		public weak Gtk.BindingEntry set_next;
		public weak Gtk.BindingSignal signals;
		public static void add_signal (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers, string signal_name, uint n_args, ...);
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "3.0")]
		public static GLib.TokenType add_signal_from_string (Gtk.BindingSet binding_set, string signal_desc);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void add_signall (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers, string signal_name, [CCode (type = "GSList*")] GLib.SList<Gtk.BindingArg?> binding_args);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void remove (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers);
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "2.12")]
		public static void skip (Gtk.BindingSet binding_set, uint keyval, Gdk.ModifierType modifiers);
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class BindingSet {
		public weak GLib.SList<void*> class_branch_pspecs;
		public weak Gtk.BindingEntry current;
		public weak Gtk.BindingEntry entries;
		public uint parsed;
		public int priority;
		public weak string set_name;
		public weak GLib.SList<void*> widget_class_pspecs;
		public weak GLib.SList<void*> widget_path_pspecs;
		public bool activate (uint keyval, Gdk.ModifierType modifiers, GLib.Object object);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static unowned Gtk.BindingSet by_class ([CCode (type = "gpointer")] GLib.ObjectClass object_class);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static unowned Gtk.BindingSet? find (string set_name);
		public static unowned Gtk.BindingSet @new (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class BindingSignal {
		[CCode (array_length_cname = "n_args", array_length_type = "guint")]
		public weak Gtk.BindingArg[] args;
		public uint n_args;
		public weak Gtk.BindingSignal next;
		public weak string signal_name;
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_boolean_cell_accessible_get_type ()")]
	public class BooleanCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected BooleanCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_box_get_type ()")]
	public class Box : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Box (Gtk.Orientation orientation, int spacing);
		[Version (since = "3.10")]
		public Gtk.BaselinePosition get_baseline_position ();
		[Version (since = "3.12")]
		public unowned Gtk.Widget? get_center_widget ();
		public bool get_homogeneous ();
		public int get_spacing ();
		public void pack_end (Gtk.Widget child, bool expand = true, bool fill = true);
		public void pack_start (Gtk.Widget child, bool expand = true, bool fill = true);
		public void query_child_packing (Gtk.Widget child, out bool expand, out bool fill, out Gtk.PackType pack_type);
		public void reorder_child (Gtk.Widget child, int position);
		[Version (since = "3.10")]
		public void set_baseline_position (Gtk.BaselinePosition position);
		[Version (since = "3.12")]
		public void set_center_widget (Gtk.Widget? widget);
		public void set_child_packing (Gtk.Widget child, bool expand, bool fill, Gtk.PackType pack_type);
		public void set_homogeneous (bool homogeneous);
		public void set_spacing (int spacing);
		public Gtk.BaselinePosition baseline_position { get; set; }
		public bool homogeneous { get; set; }
		public int spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_builder_get_type ()")]
	public class Builder : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public Builder ();
		[Version (since = "3.10")]
		public void add_callback_symbol (string callback_name, [CCode (scope = "async")] GLib.Callback callback_symbol);
		[Version (since = "3.10")]
		public void add_callback_symbols (string first_callback_name, ...);
		[Version (since = "2.12")]
		public uint add_from_file (string filename) throws GLib.Error;
		[Version (since = "3.4")]
		public uint add_from_resource (string resource_path) throws GLib.Error;
		[Version (since = "2.12")]
		public uint add_from_string (string buffer, size_t length) throws GLib.Error;
		[Version (since = "2.14")]
		public uint add_objects_from_file (string filename, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		[Version (since = "3.4")]
		public uint add_objects_from_resource (string resource_path, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		[Version (since = "2.14")]
		public uint add_objects_from_string (string buffer, size_t length, [CCode (array_length = false, array_null_terminated = true)] string[] object_ids) throws GLib.Error;
		[Version (since = "2.12")]
		public void connect_signals (void* user_data);
		[Version (since = "2.12")]
		public void connect_signals_full (Gtk.BuilderConnectFunc func);
		[Version (since = "3.8")]
		public void expose_object (string name, GLib.Object object);
		public uint extend_with_template (Gtk.Widget widget, GLib.Type template_type, string buffer, size_t length) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "3.10")]
		public Builder.from_file (string filename);
		[CCode (has_construct_function = false)]
		[Version (since = "3.10")]
		public Builder.from_resource (string resource_path);
		[CCode (has_construct_function = false)]
		[Version (since = "3.10")]
		public Builder.from_string (string string, ssize_t length);
		[Version (since = "3.10")]
		public unowned Gtk.Application? get_application ();
		[Version (since = "2.12")]
		public unowned GLib.Object? get_object (string name);
		[Version (since = "2.12")]
		public GLib.SList<weak GLib.Object> get_objects ();
		[Version (since = "2.12")]
		public unowned string get_translation_domain ();
		[Version (since = "2.12")]
		public virtual GLib.Type get_type_from_name (string type_name);
		[Version (since = "3.10")]
		public unowned GLib.Callback? lookup_callback_symbol (string callback_name);
		[Version (since = "3.10")]
		public void set_application (Gtk.Application application);
		[Version (since = "2.12")]
		public void set_translation_domain (string? domain);
		[Version (since = "2.12")]
		public bool value_from_string (GLib.ParamSpec pspec, string string, out GLib.Value value) throws GLib.Error;
		[Version (since = "2.12")]
		public bool value_from_string_type (GLib.Type type, string string, out GLib.Value value) throws GLib.Error;
		[Version (since = "2.12")]
		public string translation_domain { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_button_get_type ()")]
	public class Button : Gtk.Bin, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public Button.from_icon_name (string icon_name, [CCode (type = "GtkIconSize")] Gtk.IconSize size = Gtk.IconSize.BUTTON);
		[Version (since = "3.90")]
		public unowned string? get_icon_name ();
		public unowned string? get_label ();
		public Gtk.ReliefStyle get_relief ();
		public bool get_use_underline ();
		[Version (since = "3.90")]
		public void set_icon_name (string icon_name);
		public void set_label (string label);
		public void set_relief (Gtk.ReliefStyle relief);
		public void set_use_underline (bool use_underline);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Button.with_mnemonic (string label);
		public string icon_name { get; set; }
		public string label { get; set; }
		public Gtk.ReliefStyle relief { get; set; }
		public bool use_underline { get; set; }
		public virtual signal void activate ();
		[HasEmitter]
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_button_accessible_get_type ()")]
	public class ButtonAccessible : Gtk.ContainerAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_button_box_get_type ()")]
	public class ButtonBox : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public ButtonBox (Gtk.Orientation orientation);
		[Version (since = "3.2")]
		public bool get_child_non_homogeneous (Gtk.Widget child);
		[Version (since = "2.4")]
		public bool get_child_secondary (Gtk.Widget child);
		public Gtk.ButtonBoxStyle get_layout ();
		[Version (since = "3.2")]
		public void set_child_non_homogeneous (Gtk.Widget child, bool non_homogeneous);
		public void set_child_secondary (Gtk.Widget child, bool is_secondary);
		public void set_layout (Gtk.ButtonBoxStyle layout_style);
		[NoAccessorMethod]
		public Gtk.ButtonBoxStyle layout_style { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_calendar_get_type ()")]
	public class Calendar : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Calendar ();
		public void clear_marks ();
		public void get_date (out uint year, out uint month, out uint day);
		[Version (since = "3.0")]
		public bool get_day_is_marked (uint day);
		[Version (since = "2.14")]
		public int get_detail_height_rows ();
		[Version (since = "2.14")]
		public int get_detail_width_chars ();
		[Version (since = "2.4")]
		public Gtk.CalendarDisplayOptions get_display_options ();
		public void mark_day (uint day);
		public void select_day (uint day);
		public void select_month (uint month, uint year);
		[Version (since = "2.14")]
		public void set_detail_func (owned Gtk.CalendarDetailFunc func);
		[Version (since = "2.14")]
		public void set_detail_height_rows (int rows);
		[Version (since = "2.14")]
		public void set_detail_width_chars (int chars);
		[Version (since = "2.4")]
		public void set_display_options (Gtk.CalendarDisplayOptions flags);
		public void unmark_day (uint day);
		[NoAccessorMethod]
		public int day { get; set; }
		[Version (since = "2.14")]
		public int detail_height_rows { get; set; }
		[Version (since = "2.14")]
		public int detail_width_chars { get; set; }
		[NoAccessorMethod]
		public int month { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool no_month_change { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool show_day_names { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public bool show_details { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool show_heading { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public bool show_week_numbers { get; set; }
		[NoAccessorMethod]
		public int year { get; set; }
		public virtual signal void day_selected ();
		public virtual signal void day_selected_double_click ();
		public virtual signal void month_changed ();
		public virtual signal void next_month ();
		public virtual signal void next_year ();
		public virtual signal void prev_month ();
		public virtual signal void prev_year ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_cell_accessible_get_type ()")]
	public class CellAccessible : Gtk.Accessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected CellAccessible ();
		[NoWrapper]
		public virtual void update_cache (bool emit_signal);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_get_type ()")]
	public abstract class CellArea : GLib.InitiallyUnowned, Gtk.Buildable, Gtk.CellLayout {
		[CCode (has_construct_function = false)]
		protected CellArea ();
		[Version (since = "3.0")]
		public virtual bool activate (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool edit_only);
		[Version (since = "3.0")]
		public bool activate_cell (Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Event event, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[Version (since = "3.0")]
		public virtual void add (Gtk.CellRenderer renderer);
		[Version (since = "3.0")]
		public void add_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		[Version (since = "3.0")]
		public void add_with_properties (Gtk.CellRenderer renderer, ...);
		[Version (since = "3.0")]
		public void attribute_connect (Gtk.CellRenderer renderer, string attribute, int column);
		[Version (since = "3.0")]
		public void attribute_disconnect (Gtk.CellRenderer renderer, string attribute);
		[Version (since = "3.14")]
		public int attribute_get_column (Gtk.CellRenderer renderer, string attribute);
		[Version (since = "3.0")]
		public void cell_get (Gtk.CellRenderer renderer, ...);
		[Version (since = "3.0")]
		public void cell_get_property (Gtk.CellRenderer renderer, string property_name, GLib.Value value);
		[Version (since = "3.0")]
		public void cell_get_valist (Gtk.CellRenderer renderer, string first_property_name, [CCode (type = "va_list")] va_list var_args);
		[Version (since = "3.0")]
		public void cell_set (Gtk.CellRenderer renderer, ...);
		[Version (since = "3.0")]
		public void cell_set_property (Gtk.CellRenderer renderer, string property_name, GLib.Value value);
		[Version (since = "3.0")]
		public void cell_set_valist (Gtk.CellRenderer renderer, string first_property_name, [CCode (type = "va_list")] va_list var_args);
		[Version (since = "3.0")]
		public virtual Gtk.CellAreaContext copy_context (Gtk.CellAreaContext context);
		[Version (since = "3.0")]
		public virtual Gtk.CellAreaContext create_context ();
		[Version (since = "3.0")]
		public virtual int event (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Event event, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[CCode (cname = "gtk_cell_area_class_find_cell_property")]
		[Version (since = "3.0")]
		public class unowned GLib.ParamSpec find_cell_property (string property_name);
		[Version (since = "3.0")]
		public virtual bool focus (Gtk.DirectionType direction);
		[Version (since = "3.0")]
		public virtual void @foreach (Gtk.CellCallback callback);
		[Version (since = "3.0")]
		public virtual void foreach_alloc (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, Gdk.Rectangle background_area, Gtk.CellAllocCallback callback);
		[Version (since = "3.0")]
		public Gdk.Rectangle get_cell_allocation (Gtk.CellAreaContext context, Gtk.Widget widget, Gtk.CellRenderer renderer, Gdk.Rectangle cell_area);
		[Version (since = "3.0")]
		public unowned Gtk.CellRenderer get_cell_at_position (Gtk.CellAreaContext context, Gtk.Widget widget, Gdk.Rectangle cell_area, int x, int y, out Gdk.Rectangle alloc_area);
		[NoWrapper]
		public virtual void get_cell_property (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		[Version (since = "3.0")]
		public unowned string get_current_path_string ();
		[Version (since = "3.0")]
		public unowned Gtk.CellEditable get_edit_widget ();
		[Version (since = "3.0")]
		public unowned Gtk.CellRenderer get_edited_cell ();
		[Version (since = "3.0")]
		public unowned Gtk.CellRenderer get_focus_cell ();
		[Version (since = "3.0")]
		public unowned Gtk.CellRenderer? get_focus_from_sibling (Gtk.CellRenderer renderer);
		[Version (since = "3.0")]
		public unowned GLib.List<Gtk.CellRenderer> get_focus_siblings (Gtk.CellRenderer renderer);
		[Version (since = "3.0")]
		public virtual void get_preferred_height (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public virtual void get_preferred_height_for_width (Gtk.CellAreaContext context, Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public virtual void get_preferred_width (Gtk.CellAreaContext context, Gtk.Widget widget, out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public virtual void get_preferred_width_for_height (Gtk.CellAreaContext context, Gtk.Widget widget, int height, out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public virtual Gtk.SizeRequestMode get_request_mode ();
		[Version (since = "3.0")]
		public bool has_renderer (Gtk.CellRenderer renderer);
		[Version (since = "3.0")]
		public Gdk.Rectangle inner_cell_area (Gtk.Widget widget, Gdk.Rectangle cell_area);
		[CCode (cname = "gtk_cell_area_class_install_cell_property")]
		[Version (since = "3.0")]
		public class void install_cell_property (uint property_id, GLib.ParamSpec pspec);
		[Version (since = "3.0")]
		public virtual bool is_activatable ();
		[Version (since = "3.0")]
		public bool is_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		[CCode (array_length_pos = 0.1, array_length_type = "guint", cname = "gtk_cell_area_class_list_cell_properties")]
		[Version (since = "3.0")]
		public class (unowned GLib.ParamSpec)[] list_cell_properties ();
		[Version (since = "3.0")]
		public virtual void remove (Gtk.CellRenderer renderer);
		[Version (since = "3.0")]
		public void remove_focus_sibling (Gtk.CellRenderer renderer, Gtk.CellRenderer sibling);
		[Version (since = "3.0")]
		public void request_renderer (Gtk.CellRenderer renderer, Gtk.Orientation orientation, Gtk.Widget widget, int for_size, out int minimum_size, out int natural_size);
		[NoWrapper]
		public virtual void set_cell_property (Gtk.CellRenderer renderer, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		[Version (since = "3.0")]
		public void set_focus_cell (Gtk.CellRenderer renderer);
		[Version (since = "3.90")]
		public virtual void snapshot (Gtk.CellAreaContext context, Gtk.Widget widget, Gtk.Snapshot snapshot, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags, bool paint_focus);
		[Version (since = "3.0")]
		public void stop_editing (bool canceled);
		[Version (since = "3.0")]
		public Gtk.CellEditable edit_widget { get; }
		[Version (since = "3.0")]
		public Gtk.CellRenderer edited_cell { get; }
		[Version (since = "3.0")]
		public Gtk.CellRenderer focus_cell { get; set; }
		[Version (since = "3.0")]
		public signal void add_editable (Gtk.CellRenderer renderer, Gtk.CellEditable editable, Gdk.Rectangle cell_area, string path);
		[HasEmitter]
		[Version (since = "3.0")]
		public virtual signal void apply_attributes (Gtk.TreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded);
		[Version (since = "3.0")]
		public signal void focus_changed (Gtk.CellRenderer renderer, string path);
		[Version (since = "3.0")]
		public signal void remove_editable (Gtk.CellRenderer renderer, Gtk.CellEditable editable);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_box_get_type ()")]
	public class CellAreaBox : Gtk.CellArea, Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkCellArea*")]
		[Version (since = "3.0")]
		public CellAreaBox ();
		[Version (since = "3.0")]
		public int get_spacing ();
		[CCode (cname = "gtk_cell_area_box_pack_end")]
		[Version (since = "3.0")]
		public void pack_end_full (Gtk.CellRenderer renderer, bool expand = true, bool align = false, bool fixed = true);
		[CCode (cname = "gtk_cell_area_box_pack_start")]
		[Version (since = "3.0")]
		public void pack_start_full (Gtk.CellRenderer renderer, bool expand = true, bool align = false, bool fixed = true);
		[Version (since = "3.0")]
		public void set_spacing (int spacing);
		[Version (since = "3.0")]
		public int spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_area_context_get_type ()")]
	public class CellAreaContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected CellAreaContext ();
		public virtual void allocate (int width, int height);
		[Version (since = "3.0")]
		public void get_allocation (out int width, out int height);
		[Version (since = "3.0")]
		public unowned Gtk.CellArea get_area ();
		[Version (since = "3.0")]
		public void get_preferred_height (out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public virtual void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public void get_preferred_width (out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public virtual void get_preferred_width_for_height (int height, out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public void push_preferred_height (int minimum_height, int natural_height);
		[Version (since = "3.0")]
		public void push_preferred_width (int minimum_width, int natural_width);
		public virtual void reset ();
		[Version (since = "3.0")]
		public Gtk.CellArea area { get; construct; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int minimum_height { get; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int minimum_width { get; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int natural_height { get; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int natural_width { get; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_get_type ()")]
	public abstract class CellRenderer : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		protected CellRenderer ();
		public virtual bool activate (Gdk.Event event, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[Version (since = "3.0")]
		public virtual Gdk.Rectangle get_aligned_area (Gtk.Widget widget, Gtk.CellRendererState flags, Gdk.Rectangle cell_area);
		[Version (since = "2.18")]
		public void get_alignment (out float xalign, out float yalign);
		public void get_fixed_size (out int width, out int height);
		[Version (since = "2.18")]
		public void get_padding (out int xpad, out int ypad);
		[Version (since = "3.0")]
		public virtual void get_preferred_height (Gtk.Widget widget, out int minimum_size, out int natural_size);
		[Version (since = "3.0")]
		public virtual void get_preferred_height_for_width (Gtk.Widget widget, int width, out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public void get_preferred_size (Gtk.Widget widget, out Gtk.Requisition minimum_size, out Gtk.Requisition natural_size);
		[Version (since = "3.0")]
		public virtual void get_preferred_width (Gtk.Widget widget, out int minimum_size, out int natural_size);
		[Version (since = "3.0")]
		public virtual void get_preferred_width_for_height (Gtk.Widget widget, int height, out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public virtual Gtk.SizeRequestMode get_request_mode ();
		[Version (since = "2.18")]
		public bool get_sensitive ();
		[Version (deprecated = true, deprecated_since = "3.0", replacement = "get_preferred_size")]
		public abstract void get_size (Gtk.Widget widget, Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
		[Version (since = "3.0")]
		public Gtk.StateFlags get_state (Gtk.Widget? widget, Gtk.CellRendererState cell_state);
		[Version (since = "2.18")]
		public bool get_visible ();
		[Version (since = "3.0")]
		public bool is_activatable ();
		[CCode (cname = "gtk_cell_renderer_class_set_accessible_type")]
		public class void set_accessible_type (GLib.Type type);
		[Version (since = "2.18")]
		public void set_alignment (float xalign, float yalign);
		public void set_fixed_size (int width, int height);
		[Version (since = "2.18")]
		public void set_padding (int xpad, int ypad);
		[Version (since = "2.18")]
		public void set_sensitive (bool sensitive);
		[Version (since = "2.18")]
		public void set_visible (bool visible);
		[Version (since = "3.90")]
		public virtual void snapshot (Gtk.Snapshot snapshot, Gtk.Widget widget, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		public virtual unowned Gtk.CellEditable? start_editing (Gdk.Event? event, Gtk.Widget widget, string path, Gdk.Rectangle background_area, Gdk.Rectangle cell_area, Gtk.CellRendererState flags);
		[Version (since = "2.6")]
		public void stop_editing (bool canceled);
		[NoAccessorMethod]
		public string cell_background { set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.RGBA cell_background_rgba { get; set; }
		[NoAccessorMethod]
		public bool cell_background_set { get; set; }
		[NoAccessorMethod]
		public bool editing { get; }
		[NoAccessorMethod]
		public int height { get; set; }
		[NoAccessorMethod]
		public bool is_expanded { get; set; }
		[NoAccessorMethod]
		public bool is_expander { get; set; }
		[NoAccessorMethod]
		public Gtk.CellRendererMode mode { get; set; }
		public bool sensitive { get; set; }
		public bool visible { get; set; }
		[NoAccessorMethod]
		public int width { get; set; }
		[NoAccessorMethod]
		public float xalign { get; set; }
		[NoAccessorMethod]
		public uint xpad { get; set; }
		[NoAccessorMethod]
		public float yalign { get; set; }
		[NoAccessorMethod]
		public uint ypad { get; set; }
		[Version (since = "2.4")]
		public virtual signal void editing_canceled ();
		[Version (since = "2.6")]
		public virtual signal void editing_started (Gtk.CellEditable editable, string path);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_accel_get_type ()")]
	public class CellRendererAccel : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.10")]
		public CellRendererAccel ();
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public uint accel_key { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Gtk.CellRendererAccelMode accel_mode { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Gdk.ModifierType accel_mods { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public uint keycode { get; set; }
		[Version (since = "2.10")]
		public virtual signal void accel_cleared (string path_string);
		[Version (since = "2.10")]
		public virtual signal void accel_edited (string path_string, uint accel_key, Gdk.ModifierType accel_mods, uint hardware_keycode);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_combo_get_type ()")]
	public class CellRendererCombo : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.6")]
		public CellRendererCombo ();
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public bool has_entry { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public Gtk.TreeModel model { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public int text_column { get; set; }
		[Version (since = "2.14")]
		public signal void changed (string path_string, Gtk.TreeIter new_iter);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_pixbuf_get_type ()")]
	public class CellRendererPixbuf : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererPixbuf ();
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public GLib.Icon gicon { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf_expander_closed { owned get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf_expander_open { owned get; set; }
		[NoAccessorMethod]
		public string stock_detail { owned get; set; }
		[NoAccessorMethod]
		public uint stock_size { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.10")]
		public Cairo.Surface surface { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_progress_get_type ()")]
	public class CellRendererProgress : Gtk.CellRenderer, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.6")]
		public CellRendererProgress ();
		[NoAccessorMethod]
		public bool inverted { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public int pulse { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public string text { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public float text_xalign { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public float text_yalign { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public int value { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_spin_get_type ()")]
	public class CellRendererSpin : Gtk.CellRendererText {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.10")]
		public CellRendererSpin ();
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Gtk.Adjustment adjustment { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public double climb_rate { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public uint digits { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_spinner_get_type ()")]
	public class CellRendererSpinner : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		[Version (since = "2.20")]
		public CellRendererSpinner ();
		[NoAccessorMethod]
		public bool active { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.20")]
		public uint pulse { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.20")]
		public Gtk.IconSize size { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_text_get_type ()")]
	public class CellRendererText : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererText ();
		public void set_fixed_height_from_font (int number_of_rows);
		[NoAccessorMethod]
		public bool align_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Pango.Alignment alignment { get; set; }
		[NoAccessorMethod]
		public Pango.AttrList attributes { owned get; set; }
		[NoAccessorMethod]
		public string background { set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.RGBA background_rgba { get; set; }
		[NoAccessorMethod]
		public bool background_set { get; set; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool editable_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public Pango.EllipsizeMode ellipsize { get; set; }
		[NoAccessorMethod]
		public bool ellipsize_set { get; set; }
		[NoAccessorMethod]
		public string family { owned get; set; }
		[NoAccessorMethod]
		public bool family_set { get; set; }
		[NoAccessorMethod]
		public string font { owned get; set; }
		[NoAccessorMethod]
		public Pango.FontDescription font_desc { owned get; set; }
		[NoAccessorMethod]
		public string foreground { set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gdk.RGBA foreground_rgba { get; set; }
		[NoAccessorMethod]
		public bool foreground_set { get; set; }
		[NoAccessorMethod]
		public string language { owned get; set; }
		[NoAccessorMethod]
		public bool language_set { get; set; }
		[NoAccessorMethod]
		public string markup { set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int max_width_chars { get; set; }
		[NoAccessorMethod]
		public string placeholder_text { owned get; set; }
		[NoAccessorMethod]
		public int rise { get; set; }
		[NoAccessorMethod]
		public bool rise_set { get; set; }
		[NoAccessorMethod]
		public double scale { get; set; }
		[NoAccessorMethod]
		public bool scale_set { get; set; }
		[NoAccessorMethod]
		public bool single_paragraph_mode { get; set; }
		[NoAccessorMethod]
		public int size { get; set; }
		[NoAccessorMethod]
		public double size_points { get; set; }
		[NoAccessorMethod]
		public bool size_set { get; set; }
		[NoAccessorMethod]
		public Pango.Stretch stretch { get; set; }
		[NoAccessorMethod]
		public bool stretch_set { get; set; }
		[NoAccessorMethod]
		public bool strikethrough { get; set; }
		[NoAccessorMethod]
		public bool strikethrough_set { get; set; }
		[NoAccessorMethod]
		public Pango.Style style { get; set; }
		[NoAccessorMethod]
		public bool style_set { get; set; }
		[NoAccessorMethod]
		public string text { owned get; set; }
		[NoAccessorMethod]
		public Pango.Underline underline { get; set; }
		[NoAccessorMethod]
		public bool underline_set { get; set; }
		[NoAccessorMethod]
		public Pango.Variant variant { get; set; }
		[NoAccessorMethod]
		public bool variant_set { get; set; }
		[NoAccessorMethod]
		public int weight { get; set; }
		[NoAccessorMethod]
		public bool weight_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public int width_chars { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public Pango.WrapMode wrap_mode { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public int wrap_width { get; set; }
		public virtual signal void edited (string path, string new_text);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_renderer_toggle_get_type ()")]
	public class CellRendererToggle : Gtk.CellRenderer {
		[CCode (has_construct_function = false, type = "GtkCellRenderer*")]
		public CellRendererToggle ();
		[Version (since = "2.18")]
		public bool get_activatable ();
		public bool get_active ();
		public bool get_radio ();
		[Version (since = "2.18")]
		public void set_activatable (bool setting);
		public void set_active (bool setting);
		public void set_radio (bool radio);
		public bool activatable { get; set; }
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool inconsistent { get; set; }
		public bool radio { get; set; }
		public virtual signal void toggled (string path);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_view_get_type ()")]
	public class CellView : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public CellView ();
		[Version (since = "2.6")]
		public Gtk.TreePath? get_displayed_row ();
		[Version (since = "3.0")]
		public bool get_draw_sensitive ();
		[Version (since = "3.0")]
		public bool get_fit_model ();
		[Version (since = "2.16")]
		public unowned Gtk.TreeModel? get_model ();
		[Version (since = "2.6")]
		public void set_displayed_row (Gtk.TreePath? path);
		[Version (since = "3.0")]
		public void set_draw_sensitive (bool draw_sensitive);
		[Version (since = "3.0")]
		public void set_fit_model (bool fit_model);
		[Version (since = "2.6")]
		public void set_model (Gtk.TreeModel? model);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public CellView.with_context (Gtk.CellArea area, Gtk.CellAreaContext context);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public CellView.with_markup (string markup);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public CellView.with_pixbuf (Gdk.Pixbuf pixbuf);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public CellView.with_text (string text);
		[NoAccessorMethod]
		public Gtk.CellArea cell_area { owned get; construct; }
		[NoAccessorMethod]
		public Gtk.CellAreaContext cell_area_context { owned get; construct; }
		public bool draw_sensitive { get; set; }
		public bool fit_model { get; set; }
		public Gtk.TreeModel model { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_check_button_get_type ()")]
	public class CheckButton : Gtk.ToggleButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton ();
		[NoWrapper]
		public virtual void draw_indicator (Cairo.Context cr);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckButton.with_mnemonic (string label);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_check_menu_item_get_type ()")]
	public class CheckMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem ();
		public bool get_active ();
		[Version (since = "2.4")]
		public bool get_draw_as_radio ();
		public bool get_inconsistent ();
		public void set_active (bool is_active);
		[Version (since = "2.4")]
		public void set_draw_as_radio (bool draw_as_radio);
		public void set_inconsistent (bool setting);
		[NoWrapper]
		public virtual void snapshot_indicator (Gtk.Snapshot snapshot);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckMenuItem.with_mnemonic (string label);
		public bool active { get; set; }
		public bool draw_as_radio { get; set; }
		public bool inconsistent { get; set; }
		[HasEmitter]
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_check_menu_item_accessible_get_type ()")]
	public class CheckMenuItemAccessible : Gtk.MenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected CheckMenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_clipboard_get_type ()")]
	public class Clipboard : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Clipboard ();
		public void clear ();
		public static unowned Gtk.Clipboard @get (Gdk.Atom selection);
		[Version (since = "3.16")]
		public static unowned Gtk.Clipboard get_default (Gdk.Display display);
		[Version (since = "2.2")]
		public unowned Gdk.Display get_display ();
		[Version (since = "2.2")]
		public static unowned Gtk.Clipboard get_for_display (Gdk.Display display, Gdk.Atom selection);
		public unowned GLib.Object? get_owner ();
		[Version (since = "3.22")]
		public Gdk.Atom get_selection ();
		public void request_contents (Gdk.Atom target, [CCode (scope = "async")] Gtk.ClipboardReceivedFunc callback);
		[Version (since = "2.6")]
		public void request_image ([CCode (scope = "async")] Gtk.ClipboardImageReceivedFunc callback);
		[Version (since = "2.10")]
		public void request_rich_text (Gtk.TextBuffer buffer, [CCode (scope = "async")] Gtk.ClipboardRichTextReceivedFunc callback);
		[Version (since = "2.4")]
		public void request_targets ([CCode (scope = "async")] Gtk.ClipboardTargetsReceivedFunc callback);
		public void request_text ([CCode (scope = "async")] Gtk.ClipboardTextReceivedFunc callback);
		[Version (since = "2.14")]
		public void request_uris ([CCode (scope = "async")] Gtk.ClipboardURIReceivedFunc callback);
		[Version (since = "2.6")]
		public void set_can_store ([CCode (array_length_cname = "n_targets", array_length_pos = 1.1)] Gtk.TargetEntry[]? targets);
		[Version (since = "2.6")]
		public void set_image (Gdk.Pixbuf pixbuf);
		public void set_text (string text, int len);
		public bool set_with_data ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5, array_length_type = "guint")] Gtk.TargetEntry[] targets, [CCode (scope = "async")] Gtk.ClipboardGetFunc get_func, [CCode (scope = "async")] Gtk.ClipboardClearFunc clear_func);
		public bool set_with_owner ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5, array_length_type = "guint")] Gtk.TargetEntry[] targets, [CCode (scope = "async")] Gtk.ClipboardGetFunc get_func, [CCode (scope = "async")] Gtk.ClipboardClearFunc clear_func, GLib.Object owner);
		[Version (since = "2.6")]
		public void store ();
		public Gtk.SelectionData? wait_for_contents (Gdk.Atom target);
		[Version (since = "2.6")]
		public Gdk.Pixbuf? wait_for_image ();
		[CCode (array_length_pos = 2.1, array_length_type = "gsize")]
		[Version (since = "2.10")]
		public uint8[]? wait_for_rich_text (Gtk.TextBuffer buffer, out Gdk.Atom format);
		[Version (since = "2.4")]
		public bool wait_for_targets ([CCode (array_length_cname = "n_targets", array_length_pos = 1.1)] out Gdk.Atom[] targets);
		public string? wait_for_text ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.14")]
		public string[]? wait_for_uris ();
		[Version (since = "2.6")]
		public bool wait_is_image_available ();
		[Version (since = "2.10")]
		public bool wait_is_rich_text_available (Gtk.TextBuffer buffer);
		[Version (since = "2.6")]
		public bool wait_is_target_available (Gdk.Atom target);
		public bool wait_is_text_available ();
		[Version (since = "2.14")]
		public bool wait_is_uris_available ();
		[Version (since = "2.6")]
		public signal void owner_change (Gdk.EventOwnerChange event);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_button_get_type ()")]
	public class ColorButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable, Gtk.ColorChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ColorButton ();
		[Version (since = "2.4")]
		public unowned string get_title ();
		[Version (since = "2.4")]
		public void set_title (string title);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public ColorButton.with_rgba (Gdk.RGBA rgba);
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public bool show_editor { get; set; }
		[Version (since = "2.4")]
		public string title { get; set; }
		[Version (since = "2.4")]
		public virtual signal void color_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_chooser_dialog_get_type ()")]
	public class ColorChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.ColorChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public ColorChooserDialog (string? title, Gtk.Window? parent);
		[NoAccessorMethod]
		public bool show_editor { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_color_chooser_widget_get_type ()")]
	public class ColorChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.ColorChooser, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public ColorChooserWidget ();
		[NoAccessorMethod]
		[Version (since = "3.4")]
		public bool show_editor { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_combo_box_get_type ()")]
	public class ComboBox : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ComboBox ();
		[Version (since = "2.4")]
		public int get_active ();
		[Version (since = "3.0")]
		public unowned string? get_active_id ();
		[Version (since = "2.4")]
		public bool get_active_iter (out Gtk.TreeIter iter);
		[Version (since = "2.14")]
		public Gtk.SensitivityType get_button_sensitivity ();
		[Version (since = "2.6")]
		public int get_column_span_column ();
		[Version (since = "2.24")]
		public int get_entry_text_column ();
		[Version (since = "2.24")]
		public bool get_has_entry ();
		[Version (since = "3.0")]
		public int get_id_column ();
		[Version (since = "2.4")]
		public unowned Gtk.TreeModel get_model ();
		[Version (since = "2.6")]
		public unowned Atk.Object get_popup_accessible ();
		[Version (since = "3.0")]
		public bool get_popup_fixed_width ();
		[Version (since = "2.6")]
		public unowned Gtk.TreeViewRowSeparatorFunc get_row_separator_func ();
		[Version (since = "2.6")]
		public int get_row_span_column ();
		[Version (since = "2.6")]
		public int get_wrap_width ();
		[Version (since = "3.0")]
		public void popup_for_device (Gdk.Device device);
		[Version (since = "2.4")]
		public void set_active (int index_);
		[Version (since = "3.0")]
		public bool set_active_id (string? active_id);
		[Version (since = "2.4")]
		public void set_active_iter (Gtk.TreeIter? iter);
		[Version (since = "2.14")]
		public void set_button_sensitivity (Gtk.SensitivityType sensitivity);
		[Version (since = "2.4")]
		public void set_column_span_column (int column_span);
		[Version (since = "2.24")]
		public void set_entry_text_column (int text_column);
		[Version (since = "3.0")]
		public void set_id_column (int id_column);
		[Version (since = "2.4")]
		public void set_model (Gtk.TreeModel? model);
		[Version (since = "3.0")]
		public void set_popup_fixed_width (bool fixed);
		[Version (since = "2.6")]
		public void set_row_separator_func (owned Gtk.TreeViewRowSeparatorFunc func);
		[Version (since = "2.4")]
		public void set_row_span_column (int row_span);
		[Version (since = "2.4")]
		public void set_wrap_width (int width);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ComboBox.with_area_and_entry (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.24")]
		public ComboBox.with_entry ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public ComboBox.with_model (Gtk.TreeModel model);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.24")]
		public ComboBox.with_model_and_entry (Gtk.TreeModel model);
		[Version (since = "2.4")]
		public int active { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public string? active_id { owned get; set; }
		[Version (since = "2.14")]
		public Gtk.SensitivityType button_sensitivity { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gtk.CellArea cell_area { owned get; construct; }
		[Version (since = "2.4")]
		public int column_span_column { get; set; }
		[Version (since = "2.24")]
		public int entry_text_column { get; set; }
		[Version (since = "2.24")]
		public bool has_entry { get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public bool has_frame { get; set; }
		[Version (since = "3.0")]
		public int id_column { get; set; }
		[Version (since = "2.4")]
		public Gtk.TreeModel model { get; set; }
		[Version (since = "3.0")]
		public bool popup_fixed_width { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool popup_shown { get; }
		[Version (since = "2.4")]
		public int row_span_column { get; set; }
		[Version (since = "2.4")]
		public int wrap_width { get; set; }
		[Version (since = "2.4")]
		public virtual signal void changed ();
		[Version (since = "3.4")]
		public virtual signal string format_entry_text (string path);
		[Version (since = "2.12")]
		public signal void move_active (Gtk.ScrollType scroll_type);
		[HasEmitter]
		[Version (since = "2.12")]
		public signal bool popdown ();
		[HasEmitter]
		[Version (since = "2.12")]
		public signal void popup ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_combo_box_accessible_get_type ()")]
	public class ComboBoxAccessible : Gtk.ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected ComboBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_combo_box_text_get_type ()")]
	public class ComboBoxText : Gtk.ComboBox, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.CellLayout {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.24")]
		public ComboBoxText ();
		[Version (since = "2.24")]
		public void append (string? id, string text);
		[Version (since = "2.24")]
		public void append_text (string text);
		[Version (since = "2.24")]
		public string get_active_text ();
		[Version (since = "3.0")]
		public void insert (int position, string? id, string text);
		[Version (since = "2.24")]
		public void insert_text (int position, string text);
		[Version (since = "2.24")]
		public void prepend (string? id, string text);
		[Version (since = "2.24")]
		public void prepend_text (string text);
		[Version (since = "2.24")]
		public void remove (int position);
		[Version (since = "3.0")]
		public void remove_all ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.24")]
		public ComboBoxText.with_entry ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_container_get_type ()")]
	public abstract class Container : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected Container ();
		public void add_with_properties (Gtk.Widget widget, ...);
		public void child_get (Gtk.Widget child, ...);
		public void child_get_property (Gtk.Widget child, string property_name, GLib.Value value);
		public void child_get_valist (Gtk.Widget child, string first_property_name, [CCode (type = "va_list")] va_list var_args);
		[Version (since = "3.2")]
		public void child_notify (Gtk.Widget child, string child_property);
		[Version (since = "3.18")]
		public void child_notify_by_pspec (Gtk.Widget child, GLib.ParamSpec pspec);
		public void child_set (Gtk.Widget child, ...);
		public void child_set_property (Gtk.Widget child, string property_name, GLib.Value value);
		public void child_set_valist (Gtk.Widget child, string first_property_name, [CCode (type = "va_list")] va_list var_args);
		public virtual GLib.Type child_type ();
		[CCode (cname = "gtk_container_class_find_child_property")]
		public class unowned GLib.ParamSpec? find_child_property (string property_name);
		public void forall (Gtk.Callback callback);
		[CCode (vfunc_name = "forall")]
		[NoWrapper]
		public virtual void forall_internal (bool include_internal, Gtk.Callback callback);
		public void @foreach (Gtk.Callback callback);
		[NoWrapper]
		public virtual void get_child_property (Gtk.Widget child, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public GLib.List<weak Gtk.Widget> get_children ();
		public bool get_focus_chain (out GLib.List<weak Gtk.Widget> focusable_widgets);
		[Version (since = "2.14")]
		public unowned Gtk.Widget? get_focus_child ();
		public unowned Gtk.Adjustment? get_focus_hadjustment ();
		public unowned Gtk.Adjustment? get_focus_vadjustment ();
		public virtual Gtk.WidgetPath get_path_for_child (Gtk.Widget child);
		[CCode (cname = "gtk_container_class_install_child_properties")]
		[Version (since = "3.18")]
		public class void install_child_properties ([CCode (array_length_cname = "n_pspecs", array_length_pos = 0.5, array_length_type = "guint")] GLib.ParamSpec[] pspecs);
		[CCode (cname = "gtk_container_class_install_child_property")]
		public class void install_child_property (uint property_id, GLib.ParamSpec pspec);
		[CCode (array_length_pos = 0.1, array_length_type = "guint", cname = "gtk_container_class_list_child_properties")]
		public class (unowned GLib.ParamSpec)[] list_child_properties ();
		public void propagate_draw (Gtk.Widget child, Cairo.Context cr);
		[NoWrapper]
		public virtual void set_child_property (Gtk.Widget child, uint property_id, GLib.Value value, GLib.ParamSpec pspec);
		public void set_focus_chain (GLib.List<Gtk.Widget> focusable_widgets);
		public void set_focus_hadjustment (Gtk.Adjustment adjustment);
		public void set_focus_vadjustment (Gtk.Adjustment adjustment);
		public void unset_focus_chain ();
		[HasEmitter]
		public virtual signal void add (Gtk.Widget widget);
		[HasEmitter]
		public virtual signal void check_resize ();
		[HasEmitter]
		public virtual signal void remove (Gtk.Widget widget);
		[HasEmitter]
		public virtual signal void set_focus_child (Gtk.Widget? child);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_container_accessible_get_type ()")]
	public class ContainerAccessible : Gtk.WidgetAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ContainerAccessible ();
		[NoWrapper]
		public virtual int add_gtk (Gtk.Widget widget, void* data);
		[NoWrapper]
		public virtual int remove_gtk (Gtk.Widget widget, void* data);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_container_cell_accessible_get_type ()")]
	public class ContainerCellAccessible : Gtk.CellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		public ContainerCellAccessible ();
		public void add_child (Gtk.CellAccessible child);
		public unowned GLib.List<Gtk.CellAccessible> get_children ();
		public void remove_child (Gtk.CellAccessible child);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_css_provider_get_type ()")]
	public class CssProvider : GLib.Object, Gtk.StyleProvider {
		[CCode (has_construct_function = false)]
		public CssProvider ();
		public static unowned Gtk.CssProvider get_default ();
		public static unowned Gtk.CssProvider get_named (string name, string? variant);
		[CCode (cname = "gtk_css_provider_load_from_data")]
		public void load_from_buffer ([CCode (array_length_cname = "length", array_length_pos = 1.1, array_length_type = "gssize")] uint8[] data);
		public void load_from_file (GLib.File file);
		public void load_from_path (string path);
		[Version (since = "3.16")]
		public void load_from_resource (string resource_path);
		[Version (since = "3.2")]
		public string to_string ();
		public virtual signal void parsing_error (Gtk.CssSection section, GLib.Error error);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_css_section_ref", type_id = "gtk_css_section_get_type ()", unref_function = "gtk_css_section_unref")]
	[Compact]
	[Version (since = "3.2")]
	public class CssSection {
		public uint get_end_line ();
		public uint get_end_position ();
		public unowned GLib.File get_file ();
		public unowned Gtk.CssSection? get_parent ();
		public Gtk.CssSectionType get_section_type ();
		public uint get_start_line ();
		public uint get_start_position ();
		public Gtk.CssSection @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_dialog_get_type ()")]
	public class Dialog : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialog ();
		public void add_action_widget (Gtk.Widget child, int response_id);
		public unowned Gtk.Widget add_button (string button_text, int response_id);
		public void add_buttons (...);
		[Version (since = "2.14")]
		public unowned Gtk.Box get_content_area ();
		[Version (since = "3.12")]
		public unowned Gtk.Widget get_header_bar ();
		[Version (since = "2.8")]
		public int get_response_for_widget (Gtk.Widget widget);
		[Version (since = "2.20")]
		public unowned Gtk.Widget? get_widget_for_response (int response_id);
		public int run ();
		public void set_default_response (int response_id);
		public void set_response_sensitive (int response_id, bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Dialog.with_buttons (string? title, Gtk.Window? parent, Gtk.DialogFlags flags, ...);
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public int use_header_bar { get; construct; }
		public virtual signal void close ();
		[HasEmitter]
		public virtual signal void response (int response_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_drawing_area_get_type ()")]
	public class DrawingArea : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public DrawingArea ();
		[Version (since = "3.90")]
		public int get_content_height ();
		[Version (since = "3.90")]
		public int get_content_width ();
		[Version (since = "3.90")]
		public void set_content_height (int height);
		[Version (since = "3.90")]
		public void set_content_width (int width);
		[Version (since = "3.90")]
		public void set_draw_func (owned Gtk.DrawingAreaDrawFunc? draw_func);
		[Version (since = "3.90")]
		public int content_height { get; set; }
		[Version (since = "3.90")]
		public int content_width { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_get_type ()")]
	public class Entry : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Entry ();
		public bool get_activates_default ();
		[Version (since = "2.4")]
		public float get_alignment ();
		[Version (since = "3.6")]
		public unowned Pango.AttrList? get_attributes ();
		[Version (since = "2.18")]
		public unowned Gtk.EntryBuffer get_buffer ();
		[Version (since = "2.4")]
		public unowned Gtk.EntryCompletion get_completion ();
		[Version (since = "2.16")]
		public int get_current_icon_drag_source ();
		[Version (since = "2.12")]
		public unowned Gtk.Adjustment? get_cursor_hadjustment ();
		public bool get_has_frame ();
		[Version (since = "2.16")]
		public bool get_icon_activatable (Gtk.EntryIconPosition icon_pos);
		[Version (since = "3.0")]
		public Gdk.Rectangle get_icon_area (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public int get_icon_at_pos (int x, int y);
		[Version (since = "2.16")]
		public unowned GLib.Icon? get_icon_gicon (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public unowned string? get_icon_name (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public unowned Gdk.Pixbuf? get_icon_pixbuf (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public bool get_icon_sensitive (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public Gtk.ImageType get_icon_storage_type (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public string? get_icon_tooltip_markup (Gtk.EntryIconPosition icon_pos);
		[Version (since = "2.16")]
		public string? get_icon_tooltip_text (Gtk.EntryIconPosition icon_pos);
		[Version (since = "3.6")]
		public Gtk.InputHints get_input_hints ();
		[Version (since = "3.6")]
		public Gtk.InputPurpose get_input_purpose ();
		public unichar get_invisible_char ();
		public unowned Pango.Layout get_layout ();
		public void get_layout_offsets (out int x, out int y);
		public int get_max_length ();
		[Version (since = "3.12")]
		public int get_max_width_chars ();
		[Version (since = "2.14")]
		public bool get_overwrite_mode ();
		[Version (since = "3.2")]
		public unowned string get_placeholder_text ();
		[Version (since = "2.16")]
		public double get_progress_fraction ();
		[Version (since = "2.16")]
		public double get_progress_pulse_step ();
		[Version (since = "3.10")]
		public unowned Pango.TabArray? get_tabs ();
		public unowned string get_text ();
		[Version (since = "2.14")]
		public uint16 get_text_length ();
		public bool get_visibility ();
		public int get_width_chars ();
		[Version (since = "3.16")]
		public void grab_focus_without_selecting ();
		[Version (since = "2.22")]
		public bool im_context_filter_keypress (Gdk.EventKey event);
		public int layout_index_to_text_index (int layout_index);
		[Version (since = "2.16")]
		public void progress_pulse ();
		[Version (since = "2.22")]
		public void reset_im_context ();
		public void set_activates_default (bool setting);
		[Version (since = "2.4")]
		public void set_alignment (float xalign);
		[Version (since = "3.6")]
		public void set_attributes (Pango.AttrList attrs);
		[Version (since = "2.18")]
		public void set_buffer (Gtk.EntryBuffer buffer);
		[Version (since = "2.4")]
		public void set_completion (Gtk.EntryCompletion? completion);
		[Version (since = "2.12")]
		public void set_cursor_hadjustment (Gtk.Adjustment? adjustment);
		public void set_has_frame (bool setting);
		[Version (since = "2.16")]
		public void set_icon_activatable (Gtk.EntryIconPosition icon_pos, bool activatable);
		[Version (since = "2.16")]
		public void set_icon_drag_source (Gtk.EntryIconPosition icon_pos, Gtk.TargetList target_list, Gdk.DragAction actions);
		[Version (since = "2.16")]
		public void set_icon_from_gicon (Gtk.EntryIconPosition icon_pos, GLib.Icon? icon);
		[Version (since = "2.16")]
		public void set_icon_from_icon_name (Gtk.EntryIconPosition icon_pos, string? icon_name);
		[Version (since = "2.16")]
		public void set_icon_from_pixbuf (Gtk.EntryIconPosition icon_pos, Gdk.Pixbuf? pixbuf);
		[Version (since = "2.16")]
		public void set_icon_sensitive (Gtk.EntryIconPosition icon_pos, bool sensitive);
		[Version (since = "2.16")]
		public void set_icon_tooltip_markup (Gtk.EntryIconPosition icon_pos, string? tooltip);
		[Version (since = "2.16")]
		public void set_icon_tooltip_text (Gtk.EntryIconPosition icon_pos, string? tooltip);
		[Version (since = "3.6")]
		public void set_input_hints (Gtk.InputHints hints);
		[Version (since = "3.6")]
		public void set_input_purpose (Gtk.InputPurpose purpose);
		public void set_invisible_char (unichar ch);
		public void set_max_length (int max);
		[Version (since = "3.12")]
		public void set_max_width_chars (int n_chars);
		[Version (since = "2.14")]
		public void set_overwrite_mode (bool overwrite);
		[Version (since = "3.2")]
		public void set_placeholder_text (string? text);
		[Version (since = "2.16")]
		public void set_progress_fraction (double fraction);
		[Version (since = "2.16")]
		public void set_progress_pulse_step (double fraction);
		[Version (since = "3.10")]
		public void set_tabs (Pango.TabArray tabs);
		public void set_text (string text);
		public void set_visibility (bool visible);
		public void set_width_chars (int n_chars);
		public int text_index_to_layout_index (int text_index);
		[Version (since = "2.16")]
		public void unset_invisible_char ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.18")]
		public Entry.with_buffer (Gtk.EntryBuffer buffer);
		public bool activates_default { get; set; }
		[Version (since = "3.6")]
		public Pango.AttrList attributes { get; set; }
		public Gtk.EntryBuffer buffer { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool caps_lock_warning { get; set; }
		[Version (since = "3.2")]
		public Gtk.EntryCompletion completion { get; set; }
		[NoAccessorMethod]
		public int cursor_position { get; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		public bool has_frame { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string im_module { owned get; set; }
		[Version (since = "3.6")]
		public Gtk.InputHints input_hints { get; set; }
		[Version (since = "3.6")]
		public Gtk.InputPurpose input_purpose { get; set; }
		public uint invisible_char { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool invisible_char_set { get; set; }
		public int max_length { get; set; }
		[Version (since = "3.12")]
		public int max_width_chars { get; set; }
		[Version (since = "2.14")]
		public bool overwrite_mode { get; set; }
		[Version (since = "3.2")]
		public string placeholder_text { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.8")]
		public bool populate_all { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool primary_icon_activatable { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public GLib.Icon primary_icon_gicon { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string primary_icon_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public Gdk.Pixbuf primary_icon_pixbuf { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool primary_icon_sensitive { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public Gtk.ImageType primary_icon_storage_type { get; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string primary_icon_tooltip_markup { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string primary_icon_tooltip_text { owned get; set; }
		[Version (since = "2.16")]
		public double progress_fraction { get; set; }
		[Version (since = "2.16")]
		public double progress_pulse_step { get; set; }
		[NoAccessorMethod]
		public int scroll_offset { get; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool secondary_icon_activatable { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public GLib.Icon secondary_icon_gicon { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string secondary_icon_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public Gdk.Pixbuf secondary_icon_pixbuf { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public bool secondary_icon_sensitive { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public Gtk.ImageType secondary_icon_storage_type { get; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string secondary_icon_tooltip_markup { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string secondary_icon_tooltip_text { owned get; set; }
		[NoAccessorMethod]
		public int selection_bound { get; }
		public Pango.TabArray tabs { get; set; }
		public string text { get; set; }
		[Version (since = "2.14")]
		public uint text_length { get; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool truncate_multiline { get; set; }
		public bool visibility { get; set; }
		public int width_chars { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public float xalign { get; set; }
		public virtual signal void activate ();
		public virtual signal void backspace ();
		public virtual signal void copy_clipboard ();
		public virtual signal void cut_clipboard ();
		public virtual signal void delete_from_cursor (Gtk.DeleteType type, int count);
		[Version (since = "2.16")]
		public signal void icon_press (Gtk.EntryIconPosition icon_pos, Gdk.EventButton event);
		[Version (since = "2.16")]
		public signal void icon_release (Gtk.EntryIconPosition icon_pos, Gdk.EventButton event);
		public virtual signal void insert_at_cursor (string str);
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public virtual signal void paste_clipboard ();
		public virtual signal void populate_popup (Gtk.Widget popup);
		[Version (since = "2.20")]
		public signal void preedit_changed (string preedit);
		public virtual signal void toggle_overwrite ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_entry_accessible_get_type ()")]
	public class EntryAccessible : Gtk.WidgetAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text {
		[CCode (has_construct_function = false)]
		protected EntryAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_buffer_get_type ()")]
	public class EntryBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.18")]
		public EntryBuffer ([CCode (array_length_cname = "n_initial_chars", array_length_pos = 1.1, type = "const gchar*")] uint8[]? initial_chars = null);
		[Version (since = "2.18")]
		public virtual uint delete_text (uint position, uint n_chars);
		[Version (since = "2.18")]
		public void emit_deleted_text (uint position, uint n_chars);
		[Version (since = "2.18")]
		public void emit_inserted_text (uint position, [CCode (array_length_cname = "n_chars", array_length_pos = 2.1, array_length_type = "guint", type = "const gchar*")] uint8[] chars);
		[Version (since = "2.18")]
		public size_t get_bytes ();
		[Version (since = "2.18")]
		public virtual uint get_length ();
		[Version (since = "2.18")]
		public int get_max_length ();
		[NoWrapper]
		public virtual unowned string get_text (out size_t n_bytes = null);
		[Version (since = "2.18")]
		public virtual uint insert_text (uint position, [CCode (array_length_cname = "n_chars", array_length_pos = 2.1, array_length_type = "guint", type = "const gchar*")] uint8[] chars);
		[Version (since = "2.18")]
		public void set_max_length (int max_length);
		[Version (since = "2.18")]
		public void set_text ([CCode (array_length_cname = "n_chars", array_length_pos = 1.1, type = "const gchar*")] uint8[] chars);
		[Version (since = "2.18")]
		public uint length { get; }
		[Version (since = "2.18")]
		public int max_length { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.18")]
		public string text { owned get; set; }
		[Version (since = "2.18")]
		public virtual signal void deleted_text (uint position, uint n_chars);
		[Version (since = "2.18")]
		public virtual signal void inserted_text (uint position, string chars, uint n_chars);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_entry_completion_get_type ()")]
	public class EntryCompletion : GLib.Object, Gtk.Buildable, Gtk.CellLayout {
		[CCode (has_construct_function = false)]
		[Version (since = "2.4")]
		public EntryCompletion ();
		[Version (since = "2.4")]
		public void complete ();
		[Version (since = "3.4")]
		public string? compute_prefix (string key);
		[Version (since = "2.4")]
		public void delete_action (int index_);
		[Version (since = "2.12")]
		public unowned string get_completion_prefix ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget get_entry ();
		[Version (since = "2.6")]
		public bool get_inline_completion ();
		[Version (since = "2.12")]
		public bool get_inline_selection ();
		[Version (since = "2.4")]
		public int get_minimum_key_length ();
		[Version (since = "2.4")]
		public unowned Gtk.TreeModel? get_model ();
		[Version (since = "2.6")]
		public bool get_popup_completion ();
		[Version (since = "2.8")]
		public bool get_popup_set_width ();
		[Version (since = "2.8")]
		public bool get_popup_single_match ();
		[Version (since = "2.6")]
		public int get_text_column ();
		[Version (since = "2.4")]
		public void insert_action_markup (int index_, string markup);
		[Version (since = "2.4")]
		public void insert_action_text (int index_, string text);
		[CCode (cname = "gtk_entry_completion_insert_prefix")]
		[Version (since = "2.6")]
		public void request_prefix_insertion ();
		[Version (since = "2.6")]
		public void set_inline_completion (bool inline_completion);
		[Version (since = "2.12")]
		public void set_inline_selection (bool inline_selection);
		[Version (since = "2.4")]
		public void set_match_func (owned Gtk.EntryCompletionMatchFunc func);
		[Version (since = "2.4")]
		public void set_minimum_key_length (int length);
		[Version (since = "2.4")]
		public void set_model (Gtk.TreeModel? model);
		[Version (since = "2.6")]
		public void set_popup_completion (bool popup_completion);
		[Version (since = "2.8")]
		public void set_popup_set_width (bool popup_set_width);
		[Version (since = "2.8")]
		public void set_popup_single_match (bool popup_single_match);
		[Version (since = "2.4")]
		public void set_text_column (int column);
		[CCode (has_construct_function = false)]
		[Version (since = "3.0")]
		public EntryCompletion.with_area (Gtk.CellArea area);
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gtk.CellArea cell_area { owned get; construct; }
		[Version (since = "2.6")]
		public bool inline_completion { get; set; }
		[Version (since = "2.12")]
		public bool inline_selection { get; set; }
		public int minimum_key_length { get; set; }
		public Gtk.TreeModel model { get; set; }
		[Version (since = "2.6")]
		public bool popup_completion { get; set; }
		[Version (since = "2.8")]
		public bool popup_set_width { get; set; }
		[Version (since = "2.8")]
		public bool popup_single_match { get; set; }
		[Version (since = "2.6")]
		public int text_column { get; set; }
		[Version (since = "2.4")]
		public virtual signal void action_activated (int index_);
		[Version (since = "2.12")]
		public virtual signal bool cursor_on_match (Gtk.TreeModel model, Gtk.TreeIter iter);
		[Version (since = "2.6")]
		public virtual signal bool insert_prefix (string prefix);
		[Version (since = "2.4")]
		public virtual signal bool match_selected (Gtk.TreeModel model, Gtk.TreeIter iter);
		[Version (since = "3.14")]
		public virtual signal void no_matches ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_entry_icon_accessible_get_type ()")]
	public class EntryIconAccessible : Atk.Object, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected EntryIconAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_event_box_get_type ()")]
	public class EventBox : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public EventBox ();
		[Version (since = "2.4")]
		public bool get_above_child ();
		[Version (since = "2.4")]
		public bool get_visible_window ();
		[Version (since = "2.4")]
		public void set_above_child (bool above_child);
		[Version (since = "2.4")]
		public void set_visible_window (bool visible_window);
		public bool above_child { get; set; }
		public bool visible_window { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_event_controller_get_type ()")]
	public abstract class EventController : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EventController ();
		[Version (since = "3.14")]
		public Gtk.PropagationPhase get_propagation_phase ();
		[Version (since = "3.14")]
		public unowned Gtk.Widget get_widget ();
		[Version (since = "3.14")]
		public bool handle_event (Gdk.Event event);
		[Version (since = "3.14")]
		public void reset ();
		[Version (since = "3.14")]
		public void set_propagation_phase (Gtk.PropagationPhase phase);
		[Version (since = "3.14")]
		public Gtk.PropagationPhase propagation_phase { get; set; }
		[Version (since = "3.14")]
		public Gtk.Widget widget { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_expander_get_type ()")]
	public class Expander : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public Expander (string label);
		[Version (since = "2.4")]
		public bool get_expanded ();
		[Version (since = "2.4")]
		public unowned string get_label ();
		[Version (since = "2.22")]
		public bool get_label_fill ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_label_widget ();
		[Version (since = "3.2")]
		public bool get_resize_toplevel ();
		[Version (since = "2.4")]
		public bool get_use_markup ();
		[Version (since = "2.4")]
		public bool get_use_underline ();
		[Version (since = "2.4")]
		public void set_expanded (bool expanded);
		[Version (since = "2.4")]
		public void set_label (string? label);
		[Version (since = "2.22")]
		public void set_label_fill (bool label_fill);
		[Version (since = "2.4")]
		public void set_label_widget (Gtk.Widget? label_widget);
		[Version (since = "3.2")]
		public void set_resize_toplevel (bool resize_toplevel);
		[Version (since = "2.4")]
		public void set_use_markup (bool use_markup);
		[Version (since = "2.4")]
		public void set_use_underline (bool use_underline);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public Expander.with_mnemonic (string? label);
		public bool expanded { get; set construct; }
		public string label { get; set construct; }
		public bool label_fill { get; set construct; }
		public Gtk.Widget label_widget { get; set; }
		[Version (since = "3.2")]
		public bool resize_toplevel { get; set; }
		public bool use_markup { get; set construct; }
		public bool use_underline { get; set construct; }
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_expander_accessible_get_type ()")]
	public class ExpanderAccessible : Gtk.ContainerAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ExpanderAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_button_get_type ()")]
	public class FileChooserButton : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public FileChooserButton (string title, Gtk.FileChooserAction action);
		[Version (since = "2.6")]
		public unowned string get_title ();
		[Version (since = "2.6")]
		public int get_width_chars ();
		[Version (since = "2.6")]
		public void set_title (string title);
		[Version (since = "2.6")]
		public void set_width_chars (int n_chars);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public FileChooserButton.with_dialog (Gtk.Dialog dialog);
		[Version (since = "2.6")]
		public Gtk.FileChooser dialog { construct; }
		[Version (since = "2.6")]
		public string title { get; set; }
		[Version (since = "2.6")]
		public int width_chars { get; set; }
		[Version (since = "2.12")]
		public virtual signal void file_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_dialog_get_type ()")]
	public class FileChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public FileChooserDialog (string? title, Gtk.Window? parent, Gtk.FileChooserAction action, ...);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_native_get_type ()")]
	public class FileChooserNative : Gtk.NativeDialog, Gtk.FileChooser {
		[CCode (has_construct_function = false)]
		[Version (since = "3.20")]
		public FileChooserNative (string? title, Gtk.Window? parent, Gtk.FileChooserAction action, string? accept_label, string? cancel_label);
		[Version (since = "3.20")]
		public unowned string? get_accept_label ();
		[Version (since = "3.20")]
		public unowned string? get_cancel_label ();
		[Version (since = "3.20")]
		public void set_accept_label (string? accept_label);
		[Version (since = "3.20")]
		public void set_cancel_label (string? cancel_label);
		public string accept_label { get; set; }
		public string cancel_label { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_widget_get_type ()")]
	public class FileChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.FileChooser, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public FileChooserWidget (Gtk.FileChooserAction action);
		[NoAccessorMethod]
		public bool search_mode { get; set; }
		[NoAccessorMethod]
		public string subtitle { owned get; }
		public signal void desktop_folder ();
		public signal void down_folder ();
		public signal void home_folder ();
		public signal void location_popup (string path);
		public signal void location_popup_on_paste ();
		public signal void location_toggle_popup ();
		public signal void places_shortcut ();
		public signal void quick_bookmark (int bookmark_index);
		public signal void recent_shortcut ();
		public signal void search_shortcut ();
		public signal void show_hidden ();
		public signal void up_folder ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_filter_get_type ()")]
	public class FileFilter : GLib.InitiallyUnowned, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "2.4")]
		public FileFilter ();
		[Version (since = "2.4")]
		public void add_custom (Gtk.FileFilterFlags needed, owned Gtk.FileFilterFunc func);
		[Version (since = "2.4")]
		public void add_mime_type (string mime_type);
		[Version (since = "2.4")]
		public void add_pattern (string pattern);
		[Version (since = "2.6")]
		public void add_pixbuf_formats ();
		[Version (since = "2.4")]
		public bool filter (Gtk.FileFilterInfo filter_info);
		[CCode (has_construct_function = false)]
		[Version (since = "3.22")]
		public FileFilter.from_gvariant (GLib.Variant variant);
		[CCode (cname = "gtk_file_filter_get_name")]
		[Version (since = "2.4")]
		public unowned string? get_filter_name ();
		[Version (since = "2.4")]
		public Gtk.FileFilterFlags get_needed ();
		[CCode (cname = "gtk_file_filter_set_name")]
		[Version (since = "2.4")]
		public void set_filter_name (string? name);
		[CCode (returns_floating_reference = true)]
		[Version (since = "3.22")]
		public GLib.Variant to_gvariant ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class FileFilterInfo {
		public Gtk.FileFilterFlags contains;
		public weak string display_name;
		public weak string filename;
		public weak string mime_type;
		public weak string uri;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_fixed_get_type ()")]
	public class Fixed : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Fixed ();
		public void move (Gtk.Widget widget, int x, int y);
		public void put (Gtk.Widget widget, int x, int y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class FixedChild {
		public weak Gtk.Widget widget;
		public int x;
		public int y;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_flow_box_get_type ()")]
	public class FlowBox : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.12")]
		public FlowBox ();
		[Version (since = "3.18")]
		public void bind_model (GLib.ListModel? model, owned Gtk.FlowBoxCreateWidgetFunc? create_widget_func);
		[Version (since = "3.12")]
		public bool get_activate_on_single_click ();
		[Version (since = "3.12")]
		public unowned Gtk.FlowBoxChild? get_child_at_index (int idx);
		[Version (since = "3.22.6")]
		public unowned Gtk.FlowBoxChild? get_child_at_pos (int x, int y);
		[Version (since = "3.12")]
		public uint get_column_spacing ();
		[Version (since = "3.12")]
		public bool get_homogeneous ();
		[Version (since = "3.12")]
		public uint get_max_children_per_line ();
		[Version (since = "3.12")]
		public uint get_min_children_per_line ();
		[Version (since = "3.12")]
		public uint get_row_spacing ();
		[Version (since = "3.12")]
		public GLib.List<weak Gtk.FlowBoxChild> get_selected_children ();
		[Version (since = "3.12")]
		public Gtk.SelectionMode get_selection_mode ();
		[Version (since = "3.12")]
		public void insert (Gtk.Widget widget, int position);
		[Version (since = "3.12")]
		public void invalidate_filter ();
		[Version (since = "3.12")]
		public void invalidate_sort ();
		[Version (since = "3.12")]
		public void select_child (Gtk.FlowBoxChild child);
		[Version (since = "3.12")]
		public void selected_foreach (Gtk.FlowBoxForeachFunc func);
		[Version (since = "3.12")]
		public void set_activate_on_single_click (bool single);
		[Version (since = "3.12")]
		public void set_column_spacing (uint spacing);
		[Version (since = "3.12")]
		public void set_filter_func (owned Gtk.FlowBoxFilterFunc? filter_func);
		[Version (since = "3.12")]
		public void set_hadjustment (Gtk.Adjustment adjustment);
		[Version (since = "3.12")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "3.12")]
		public void set_max_children_per_line (uint n_children);
		[Version (since = "3.12")]
		public void set_min_children_per_line (uint n_children);
		[Version (since = "3.12")]
		public void set_row_spacing (uint spacing);
		[Version (since = "3.12")]
		public void set_selection_mode (Gtk.SelectionMode mode);
		[Version (since = "3.12")]
		public void set_sort_func (owned Gtk.FlowBoxSortFunc? sort_func);
		[Version (since = "3.12")]
		public void set_vadjustment (Gtk.Adjustment adjustment);
		[Version (since = "3.12")]
		public void unselect_child (Gtk.FlowBoxChild child);
		public bool activate_on_single_click { get; set; }
		public uint column_spacing { get; set; }
		public bool homogeneous { get; set; }
		public uint max_children_per_line { get; set; }
		public uint min_children_per_line { get; set; }
		public uint row_spacing { get; set; }
		public Gtk.SelectionMode selection_mode { get; set; }
		public virtual signal void activate_cursor_child ();
		public virtual signal void child_activated (Gtk.FlowBoxChild child);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		[HasEmitter]
		public virtual signal void select_all ();
		public virtual signal void selected_children_changed ();
		public virtual signal void toggle_cursor_child ();
		[HasEmitter]
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_flow_box_accessible_get_type ()")]
	public class FlowBoxAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected FlowBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_flow_box_child_get_type ()")]
	public class FlowBoxChild : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.12")]
		public FlowBoxChild ();
		[Version (since = "3.12")]
		public void changed ();
		[Version (since = "3.12")]
		public int get_index ();
		[Version (since = "3.12")]
		public bool is_selected ();
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_flow_box_child_accessible_get_type ()")]
	public class FlowBoxChildAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected FlowBoxChildAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_button_get_type ()")]
	public class FontButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable, Gtk.FontChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public FontButton ();
		[Version (since = "2.4")]
		public unowned string get_font_name ();
		[Version (since = "2.4")]
		public bool get_show_size ();
		[Version (since = "2.4")]
		public bool get_show_style ();
		[Version (since = "2.4")]
		public unowned string get_title ();
		[Version (since = "2.4")]
		public bool get_use_font ();
		[Version (since = "2.4")]
		public bool get_use_size ();
		[Version (since = "2.4")]
		public bool set_font_name (string fontname);
		[Version (since = "2.4")]
		public void set_show_size (bool show_size);
		[Version (since = "2.4")]
		public void set_show_style (bool show_style);
		[Version (since = "2.4")]
		public void set_title (string title);
		[Version (since = "2.4")]
		public void set_use_font (bool use_font);
		[Version (since = "2.4")]
		public void set_use_size (bool use_size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public FontButton.with_font (string fontname);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public string font_name { owned get; set; }
		[Version (since = "2.4")]
		public bool show_size { get; set; }
		[Version (since = "2.4")]
		public bool show_style { get; set; }
		[Version (since = "2.4")]
		public string title { get; set; }
		[Version (since = "2.4")]
		public bool use_font { get; set; }
		[Version (since = "2.4")]
		public bool use_size { get; set; }
		[Version (since = "2.4")]
		public virtual signal void font_set ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_chooser_dialog_get_type ()")]
	public class FontChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.FontChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.2")]
		public FontChooserDialog (string? title, Gtk.Window? parent);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_chooser_widget_get_type ()")]
	public class FontChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.FontChooser, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.2")]
		public FontChooserWidget ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_frame_get_type ()")]
	public class Frame : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Frame (string? label);
		[NoWrapper]
		public virtual void compute_child_allocation (Gtk.Allocation allocation);
		public unowned string? get_label ();
		public void get_label_align (out float xalign, out float yalign);
		public unowned Gtk.Widget? get_label_widget ();
		public Gtk.ShadowType get_shadow_type ();
		public void set_label (string? label);
		public void set_label_align (float xalign, float yalign);
		public void set_label_widget (Gtk.Widget? label_widget);
		public void set_shadow_type (Gtk.ShadowType type);
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
		[NoAccessorMethod]
		public float label_xalign { get; set; }
		[NoAccessorMethod]
		public float label_yalign { get; set; }
		public Gtk.ShadowType shadow_type { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_frame_accessible_get_type ()")]
	public class FrameAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected FrameAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gl_area_get_type ()")]
	[Version (since = "3.16")]
	public class GLArea : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public GLArea ();
		public void attach_buffers ();
		public bool get_auto_render ();
		public unowned Gdk.GLContext get_context ();
		public unowned GLib.Error? get_error ();
		public bool get_has_alpha ();
		public bool get_has_depth_buffer ();
		public bool get_has_stencil_buffer ();
		public void get_required_version (out int major, out int minor);
		[Version (since = "3.22")]
		public bool get_use_es ();
		public void make_current ();
		public void queue_render ();
		public void set_auto_render (bool auto_render);
		public void set_error (GLib.Error? error);
		public void set_has_alpha (bool has_alpha);
		public void set_has_depth_buffer (bool has_depth_buffer);
		public void set_has_stencil_buffer (bool has_stencil_buffer);
		public void set_required_version (int major, int minor);
		[Version (since = "3.22")]
		public void set_use_es (bool use_es);
		public bool auto_render { get; set; }
		public Gdk.GLContext context { get; }
		public bool has_alpha { get; set; }
		public bool has_depth_buffer { get; set; }
		public bool has_stencil_buffer { get; set; }
		[Version (since = "3.22")]
		public bool use_es { get; set; }
		public virtual signal Gdk.GLContext create_context ();
		public virtual signal bool render (Gdk.GLContext context);
		public virtual signal void resize (int width, int height);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_get_type ()")]
	public abstract class Gesture : Gtk.EventController {
		[CCode (has_construct_function = false)]
		protected Gesture ();
		[Version (since = "3.14")]
		public bool get_bounding_box (out Gdk.Rectangle rect);
		[Version (since = "3.14")]
		public bool get_bounding_box_center (out double x, out double y);
		[Version (since = "3.14")]
		public unowned Gdk.Device? get_device ();
		[Version (since = "3.14")]
		public GLib.List<weak Gtk.Gesture> get_group ();
		public unowned Gdk.Event? get_last_event (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public unowned Gdk.EventSequence? get_last_updated_sequence ();
		[Version (since = "3.14")]
		public bool get_point (Gdk.EventSequence? sequence, out double? x = null, out double? y = null);
		[Version (since = "3.14")]
		public Gtk.EventSequenceState get_sequence_state (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public GLib.List<weak Gdk.EventSequence> get_sequences ();
		[Version (since = "3.14")]
		public unowned Gdk.Window? get_window ();
		[Version (since = "3.14")]
		public void group (Gtk.Gesture gesture);
		[Version (since = "3.14")]
		public bool handles_sequence (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public bool is_active ();
		[Version (since = "3.14")]
		public bool is_grouped_with (Gtk.Gesture other);
		[Version (since = "3.14")]
		public bool is_recognized ();
		[Version (since = "3.14")]
		public bool set_sequence_state (Gdk.EventSequence sequence, Gtk.EventSequenceState state);
		[Version (since = "3.14")]
		public bool set_state (Gtk.EventSequenceState state);
		[Version (since = "3.14")]
		public void set_window (Gdk.Window? window);
		[Version (since = "3.14")]
		public void ungroup ();
		[NoAccessorMethod]
		[Version (since = "3.14")]
		public uint n_points { get; construct; }
		[Version (since = "3.14")]
		public Gdk.Window window { get; set; }
		[Version (since = "3.14")]
		public signal void begin (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public signal void cancel (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public signal void end (Gdk.EventSequence sequence);
		[Version (since = "3.14")]
		public signal void sequence_state_changed (Gdk.EventSequence sequence, Gtk.EventSequenceState state);
		[Version (since = "3.14")]
		public signal void update (Gdk.EventSequence sequence);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_drag_get_type ()")]
	public class GestureDrag : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureDrag (Gtk.Widget widget);
		[Version (since = "3.14")]
		public bool get_offset (out double? x, out double? y);
		[Version (since = "3.14")]
		public bool get_start_point (out double? x, out double? y);
		[Version (since = "3.14")]
		public signal void drag_begin (double start_x, double start_y);
		[Version (since = "3.14")]
		public signal void drag_end (double offset_x, double offset_y);
		[Version (since = "3.14")]
		public signal void drag_update (double offset_x, double offset_y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_long_press_get_type ()")]
	public class GestureLongPress : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureLongPress (Gtk.Widget widget);
		[NoAccessorMethod]
		public double delay_factor { get; set; }
		[Version (since = "3.14")]
		public signal void cancelled ();
		[Version (since = "3.14")]
		public signal void pressed (double x, double y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_multi_press_get_type ()")]
	public class GestureMultiPress : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureMultiPress (Gtk.Widget widget);
		[Version (since = "3.14")]
		public bool get_area (out Gdk.Rectangle rect);
		[Version (since = "3.14")]
		public void set_area (Gdk.Rectangle? rect);
		[Version (since = "3.14")]
		public signal void pressed (int n_press, double x, double y);
		[Version (since = "3.14")]
		public signal void released (int n_press, double x, double y);
		[Version (since = "3.14")]
		public signal void stopped ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_pan_get_type ()")]
	public class GesturePan : Gtk.GestureDrag {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GesturePan (Gtk.Widget widget, Gtk.Orientation orientation);
		[Version (since = "3.14")]
		public Gtk.Orientation get_orientation ();
		[Version (since = "3.14")]
		public void set_orientation (Gtk.Orientation orientation);
		[Version (since = "3.14")]
		public Gtk.Orientation orientation { get; set; }
		[Version (since = "3.14")]
		public signal void pan (Gtk.PanDirection direction, double offset);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_rotate_get_type ()")]
	public class GestureRotate : Gtk.Gesture {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureRotate (Gtk.Widget widget);
		[Version (since = "3.14")]
		public double get_angle_delta ();
		[Version (since = "3.14")]
		public signal void angle_changed (double angle, double angle_delta);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_single_get_type ()")]
	public class GestureSingle : Gtk.Gesture {
		[CCode (has_construct_function = false)]
		protected GestureSingle ();
		[Version (since = "3.14")]
		public uint get_button ();
		[Version (since = "3.14")]
		public uint get_current_button ();
		[Version (since = "3.14")]
		public Gdk.EventSequence? get_current_sequence ();
		[Version (since = "3.14")]
		public bool get_exclusive ();
		[Version (since = "3.14")]
		public bool get_touch_only ();
		[Version (since = "3.14")]
		public void set_button (uint button);
		[Version (since = "3.14")]
		public void set_exclusive (bool exclusive);
		[Version (since = "3.14")]
		public void set_touch_only (bool touch_only);
		[Version (since = "3.14")]
		public uint button { get; set; }
		[Version (since = "3.14")]
		public bool exclusive { get; set; }
		[Version (since = "3.14")]
		public bool touch_only { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_swipe_get_type ()")]
	public class GestureSwipe : Gtk.GestureSingle {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureSwipe (Gtk.Widget widget);
		[Version (since = "3.14")]
		public bool get_velocity (out double velocity_x, out double velocity_y);
		[Version (since = "3.14")]
		public signal void swipe (double velocity_x, double velocity_y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_gesture_zoom_get_type ()")]
	public class GestureZoom : Gtk.Gesture {
		[CCode (has_construct_function = false, type = "GtkGesture*")]
		[Version (since = "3.14")]
		public GestureZoom (Gtk.Widget widget);
		[Version (since = "3.14")]
		public double get_scale_delta ();
		[Version (since = "3.14")]
		public signal void scale_changed (double scale);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_grid_get_type ()")]
	public class Grid : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Grid ();
		public void attach (Gtk.Widget child, int left, int top, int width = 1, int height = 1);
		public void attach_next_to (Gtk.Widget child, Gtk.Widget? sibling, Gtk.PositionType side, int width = 1, int height = 1);
		[Version (since = "3.10")]
		public int get_baseline_row ();
		[Version (since = "3.2")]
		public unowned Gtk.Widget? get_child_at (int left, int top);
		public bool get_column_homogeneous ();
		public uint get_column_spacing ();
		[Version (since = "3.10")]
		public Gtk.BaselinePosition get_row_baseline_position (int row);
		public bool get_row_homogeneous ();
		public uint get_row_spacing ();
		[Version (since = "3.2")]
		public void insert_column (int position);
		[Version (since = "3.2")]
		public void insert_next_to (Gtk.Widget sibling, Gtk.PositionType side);
		[Version (since = "3.2")]
		public void insert_row (int position);
		[Version (since = "3.10")]
		public void remove_column (int position);
		[Version (since = "3.10")]
		public void remove_row (int position);
		[Version (since = "3.10")]
		public void set_baseline_row (int row);
		public void set_column_homogeneous (bool homogeneous);
		public void set_column_spacing (uint spacing);
		[Version (since = "3.10")]
		public void set_row_baseline_position (int row, Gtk.BaselinePosition pos);
		public void set_row_homogeneous (bool homogeneous);
		public void set_row_spacing (uint spacing);
		public int baseline_row { get; set; }
		public bool column_homogeneous { get; set; }
		public int column_spacing { get; set; }
		public bool row_homogeneous { get; set; }
		public int row_spacing { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_header_bar_get_type ()")]
	public class HeaderBar : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public HeaderBar ();
		[Version (since = "3.10")]
		public unowned Gtk.Widget? get_custom_title ();
		[Version (since = "3.12")]
		public unowned string get_decoration_layout ();
		[Version (since = "3.12")]
		public bool get_has_subtitle ();
		[Version (since = "3.10")]
		public bool get_show_close_button ();
		[Version (since = "3.10")]
		public unowned string? get_subtitle ();
		[Version (since = "3.10")]
		public unowned string? get_title ();
		[Version (since = "3.10")]
		public void pack_end (Gtk.Widget child);
		[Version (since = "3.10")]
		public void pack_start (Gtk.Widget child);
		[Version (since = "3.10")]
		public void set_custom_title (Gtk.Widget? title_widget);
		[Version (since = "3.12")]
		public void set_decoration_layout (string? layout);
		[Version (since = "3.12")]
		public void set_has_subtitle (bool setting);
		[Version (since = "3.10")]
		public void set_show_close_button (bool setting);
		[Version (since = "3.10")]
		public void set_subtitle (string? subtitle);
		[Version (since = "3.10")]
		public void set_title (string? title);
		public Gtk.Widget custom_title { get; set; }
		[Version (since = "3.12")]
		public string decoration_layout { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public bool decoration_layout_set { get; set; }
		[Version (since = "3.12")]
		public bool has_subtitle { get; set; }
		public bool show_close_button { get; set; }
		[NoAccessorMethod]
		public int spacing { get; set; }
		public string subtitle { get; set; }
		public string title { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtkimmodule.h", type_id = "gtk_im_context_get_type ()")]
	public abstract class IMContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected IMContext ();
		public virtual bool filter_keypress (Gdk.EventKey event);
		public virtual void focus_in ();
		public virtual void focus_out ();
		public virtual void get_preedit_string (out string str, out Pango.AttrList attrs, out int cursor_pos);
		public virtual bool get_surrounding (out string text, out int cursor_index);
		public virtual void reset ();
		public virtual void set_client_window (Gdk.Window? window);
		public virtual void set_cursor_location (Gdk.Rectangle area);
		public virtual void set_surrounding (string text, int len, int cursor_index);
		public virtual void set_use_preedit (bool use_preedit);
		[NoAccessorMethod]
		public Gtk.InputHints input_hints { get; set; }
		[NoAccessorMethod]
		public Gtk.InputPurpose input_purpose { get; set; }
		public virtual signal void commit (string str);
		[HasEmitter]
		public virtual signal bool delete_surrounding (int offset, int n_chars);
		public virtual signal void preedit_changed ();
		public virtual signal void preedit_end ();
		public virtual signal void preedit_start ();
		public virtual signal bool retrieve_surrounding ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_im_context_simple_get_type ()")]
	public class IMContextSimple : Gtk.IMContext {
		[CCode (has_construct_function = false, type = "GtkIMContext*")]
		public IMContextSimple ();
		public void add_compose_file (string compose_file);
		public void add_table ([CCode (array_length = false)] uint16[] data, int max_seq_len, int n_seqs);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_im_multicontext_get_type ()")]
	public class IMMulticontext : Gtk.IMContext {
		[CCode (has_construct_function = false, type = "GtkIMContext*")]
		public IMMulticontext ();
		[Version (since = "2.16")]
		public unowned string get_context_id ();
		[Version (since = "2.16")]
		public void set_context_id (string context_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_info_get_type ()")]
	public class IconInfo : GLib.Object {
		[CCode (has_construct_function = false)]
		protected IconInfo ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.14")]
		public IconInfo.for_pixbuf (Gtk.IconTheme icon_theme, Gdk.Pixbuf pixbuf);
		[Version (since = "3.10")]
		public int get_base_scale ();
		[Version (since = "2.4")]
		public int get_base_size ();
		[Version (since = "2.4")]
		public unowned string? get_filename ();
		[Version (since = "3.12")]
		public bool is_symbolic ();
		[Version (since = "2.4")]
		public Gdk.Pixbuf load_icon () throws GLib.Error;
		[Version (since = "3.8")]
		public async Gdk.Pixbuf load_icon_async (GLib.Cancellable? cancellable = null) throws GLib.Error;
		[Version (since = "3.10")]
		public Cairo.Surface load_surface (Gdk.Window? for_window) throws GLib.Error;
		[Version (since = "3.0")]
		public Gdk.Pixbuf load_symbolic (Gdk.RGBA fg, Gdk.RGBA? success_color = null, Gdk.RGBA? warning_color = null, Gdk.RGBA? error_color = null, out bool was_symbolic = null) throws GLib.Error;
		[Version (since = "3.8")]
		public async Gdk.Pixbuf load_symbolic_async (Gdk.RGBA fg, Gdk.RGBA? success_color = null, Gdk.RGBA? warning_color = null, Gdk.RGBA? error_color = null, GLib.Cancellable? cancellable = null, out bool was_symbolic = null) throws GLib.Error;
		[Version (since = "3.0")]
		public Gdk.Pixbuf load_symbolic_for_context (Gtk.StyleContext context, out bool was_symbolic = null) throws GLib.Error;
		[Version (since = "3.8")]
		public async Gdk.Pixbuf load_symbolic_for_context_async (Gtk.StyleContext context, GLib.Cancellable? cancellable = null, out bool was_symbolic = null) throws GLib.Error;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_theme_get_type ()")]
	public class IconTheme : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.4")]
		public IconTheme ();
		[Version (since = "3.14")]
		public void add_resource_path (string path);
		[Version (since = "2.4")]
		public void append_search_path (string path);
		[Version (since = "2.12")]
		public Gtk.IconInfo? choose_icon ([CCode (array_length = false, array_null_terminated = true)] string[] icon_names, int size, Gtk.IconLookupFlags flags);
		[Version (since = "3.10")]
		public Gtk.IconInfo? choose_icon_for_scale ([CCode (array_length = false, array_null_terminated = true)] string[] icon_names, int size, int scale, Gtk.IconLookupFlags flags);
		[Version (since = "2.4")]
		public static unowned Gtk.IconTheme get_default ();
		[Version (since = "2.4")]
		public string? get_example_icon_name ();
		[Version (since = "2.4")]
		public static unowned Gtk.IconTheme get_for_screen (Gdk.Screen screen);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public int[] get_icon_sizes (string icon_name);
		[Version (since = "2.4")]
		public void get_search_path ([CCode (array_length_cname = "n_elements", array_length_pos = 1.1)] out string[] path);
		[Version (since = "2.4")]
		public bool has_icon (string icon_name);
		[Version (since = "2.12")]
		public GLib.List<string> list_contexts ();
		[Version (since = "2.4")]
		public GLib.List<string> list_icons (string? context);
		[Version (since = "2.4")]
		public Gdk.Pixbuf? load_icon (string icon_name, int size, Gtk.IconLookupFlags flags) throws GLib.Error;
		[Version (since = "3.10")]
		public Gdk.Pixbuf? load_icon_for_scale (string icon_name, int size, int scale, Gtk.IconLookupFlags flags) throws GLib.Error;
		[Version (since = "3.10")]
		public Cairo.Surface? load_surface (string icon_name, int size, int scale, Gdk.Window? for_window, Gtk.IconLookupFlags flags) throws GLib.Error;
		[Version (since = "2.14")]
		public Gtk.IconInfo? lookup_by_gicon (GLib.Icon icon, int size, Gtk.IconLookupFlags flags);
		[Version (since = "3.10")]
		public Gtk.IconInfo? lookup_by_gicon_for_scale (GLib.Icon icon, int size, int scale, Gtk.IconLookupFlags flags);
		[Version (since = "2.4")]
		public Gtk.IconInfo? lookup_icon (string icon_name, int size, Gtk.IconLookupFlags flags);
		[Version (since = "3.10")]
		public Gtk.IconInfo? lookup_icon_for_scale (string icon_name, int size, int scale, Gtk.IconLookupFlags flags);
		[Version (since = "2.4")]
		public void prepend_search_path (string path);
		[Version (since = "2.4")]
		public bool rescan_if_needed ();
		[Version (since = "2.4")]
		public void set_custom_theme (string? theme_name);
		[Version (since = "2.4")]
		public void set_screen (Gdk.Screen screen);
		[Version (since = "2.4")]
		public void set_search_path ([CCode (array_length_cname = "n_elements", array_length_pos = 1.1)] string[] path);
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_icon_view_get_type ()")]
	public class IconView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.CellLayout, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public IconView ();
		[Version (since = "2.12")]
		public void convert_widget_to_bin_window_coords (int wx, int wy, out int bx, out int by);
		[Version (since = "2.8")]
		public Cairo.Surface create_drag_icon (Gtk.TreePath path);
		[Version (since = "2.8")]
		public void enable_model_drag_dest ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5)] Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		[Version (since = "2.8")]
		public void enable_model_drag_source (Gdk.ModifierType start_button_mask, [CCode (array_length_cname = "n_targets", array_length_pos = 2.5)] Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		[Version (since = "3.8")]
		public bool get_activate_on_single_click ();
		[Version (since = "3.6")]
		public bool get_cell_rect (Gtk.TreePath path, Gtk.CellRenderer? cell, out Gdk.Rectangle rect);
		[Version (since = "2.6")]
		public int get_column_spacing ();
		[Version (since = "2.6")]
		public int get_columns ();
		[Version (since = "2.8")]
		public bool get_cursor (out Gtk.TreePath path, out unowned Gtk.CellRenderer cell);
		[Version (since = "2.8")]
		public bool get_dest_item_at_pos (int drag_x, int drag_y, out Gtk.TreePath path, out Gtk.IconViewDropPosition pos);
		[Version (since = "2.8")]
		public void get_drag_dest_item (out Gtk.TreePath path, out Gtk.IconViewDropPosition pos);
		[Version (since = "2.8")]
		public bool get_item_at_pos (int x, int y, out Gtk.TreePath path, out Gtk.CellRenderer cell);
		[Version (since = "2.22")]
		public int get_item_column (Gtk.TreePath path);
		[Version (since = "2.6")]
		public Gtk.Orientation get_item_orientation ();
		[Version (since = "2.18")]
		public int get_item_padding ();
		[Version (since = "2.22")]
		public int get_item_row (Gtk.TreePath path);
		[Version (since = "2.6")]
		public int get_item_width ();
		[Version (since = "2.6")]
		public int get_margin ();
		[Version (since = "2.6")]
		public int get_markup_column ();
		[Version (since = "2.6")]
		public unowned Gtk.TreeModel? get_model ();
		[Version (since = "2.6")]
		public Gtk.TreePath? get_path_at_pos (int x, int y);
		[Version (since = "2.6")]
		public int get_pixbuf_column ();
		[Version (since = "2.8")]
		public bool get_reorderable ();
		[Version (since = "2.6")]
		public int get_row_spacing ();
		[Version (since = "2.6")]
		public GLib.List<Gtk.TreePath> get_selected_items ();
		[Version (since = "2.6")]
		public Gtk.SelectionMode get_selection_mode ();
		[Version (since = "2.6")]
		public int get_spacing ();
		[Version (since = "2.6")]
		public int get_text_column ();
		[Version (since = "2.12")]
		public int get_tooltip_column ();
		[Version (since = "2.12")]
		public bool get_tooltip_context (ref int x, ref int y, bool keyboard_tip, out unowned Gtk.TreeModel model, out Gtk.TreePath path, out Gtk.TreeIter iter);
		[Version (since = "2.8")]
		public bool get_visible_range (out Gtk.TreePath start_path, out Gtk.TreePath end_path);
		[Version (since = "2.6")]
		public bool path_is_selected (Gtk.TreePath path);
		[Version (since = "2.8")]
		public void scroll_to_path (Gtk.TreePath path, bool use_align, float row_align, float col_align);
		[Version (since = "2.6")]
		public void select_path (Gtk.TreePath path);
		[Version (since = "2.6")]
		public void selected_foreach (Gtk.IconViewForeachFunc func);
		[Version (since = "3.8")]
		public void set_activate_on_single_click (bool single);
		[Version (since = "2.6")]
		public void set_column_spacing (int column_spacing);
		[Version (since = "2.6")]
		public void set_columns (int columns);
		[Version (since = "2.8")]
		public void set_cursor (Gtk.TreePath path, Gtk.CellRenderer? cell, bool start_editing);
		[Version (since = "2.8")]
		public void set_drag_dest_item (Gtk.TreePath? path, Gtk.IconViewDropPosition pos);
		[Version (since = "2.6")]
		public void set_item_orientation (Gtk.Orientation orientation);
		[Version (since = "2.18")]
		public void set_item_padding (int item_padding);
		[Version (since = "2.6")]
		public void set_item_width (int item_width);
		[Version (since = "2.6")]
		public void set_margin (int margin);
		[Version (since = "2.6")]
		public void set_markup_column (int column);
		[Version (since = "2.6")]
		public void set_model (Gtk.TreeModel? model);
		[Version (since = "2.6")]
		public void set_pixbuf_column (int column);
		[Version (since = "2.8")]
		public void set_reorderable (bool reorderable);
		[Version (since = "2.6")]
		public void set_row_spacing (int row_spacing);
		[Version (since = "2.6")]
		public void set_selection_mode (Gtk.SelectionMode mode);
		[Version (since = "2.6")]
		public void set_spacing (int spacing);
		[Version (since = "2.6")]
		public void set_text_column (int column);
		[Version (since = "2.12")]
		public void set_tooltip_cell (Gtk.Tooltip tooltip, Gtk.TreePath path, Gtk.CellRenderer? cell);
		[Version (since = "2.12")]
		public void set_tooltip_column (int column);
		[Version (since = "2.12")]
		public void set_tooltip_item (Gtk.Tooltip tooltip, Gtk.TreePath path);
		[Version (since = "2.6")]
		public void unselect_path (Gtk.TreePath path);
		[Version (since = "2.8")]
		public void unset_model_drag_dest ();
		[Version (since = "2.8")]
		public void unset_model_drag_source ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public IconView.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public IconView.with_model (Gtk.TreeModel model);
		[Version (since = "3.8")]
		public bool activate_on_single_click { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gtk.CellArea cell_area { owned get; construct; }
		[Version (since = "2.6")]
		public int column_spacing { get; set; }
		[Version (since = "2.6")]
		public int columns { get; set; }
		[Version (since = "2.6")]
		public Gtk.Orientation item_orientation { get; set; }
		[Version (since = "2.18")]
		public int item_padding { get; set; }
		[Version (since = "2.6")]
		public int item_width { get; set; }
		[Version (since = "2.6")]
		public int margin { get; set; }
		[Version (since = "2.6")]
		public int markup_column { get; set; }
		public Gtk.TreeModel model { get; set; }
		[Version (since = "2.6")]
		public int pixbuf_column { get; set; }
		[Version (since = "2.8")]
		public bool reorderable { get; set; }
		[Version (since = "2.6")]
		public int row_spacing { get; set; }
		[Version (since = "2.6")]
		public Gtk.SelectionMode selection_mode { get; set; }
		[Version (since = "2.6")]
		public int spacing { get; set; }
		[Version (since = "2.6")]
		public int text_column { get; set; }
		public int tooltip_column { get; set; }
		public virtual signal bool activate_cursor_item ();
		[HasEmitter]
		public virtual signal void item_activated (Gtk.TreePath path);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		[HasEmitter]
		public virtual signal void select_all ();
		public virtual signal void select_cursor_item ();
		public virtual signal void selection_changed ();
		public virtual signal void toggle_cursor_item ();
		[HasEmitter]
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_icon_view_accessible_get_type ()")]
	public class IconViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected IconViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_image_get_type ()")]
	public class Image : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image ();
		[Version (since = "2.8")]
		public void clear ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_animation (Gdk.PixbufAnimation animation);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_file (string filename);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.14")]
		public Image.from_gicon (GLib.Icon icon, [CCode (type = "GtkIconSize")] Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.6")]
		public Image.from_icon_name (string icon_name, [CCode (type = "GtkIconSize")] Gtk.IconSize size);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Image.from_pixbuf (Gdk.Pixbuf? pixbuf);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public Image.from_resource (string resource_path);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public Image.from_surface (Cairo.Surface? surface);
		public unowned Gdk.PixbufAnimation? get_animation ();
		[Version (since = "2.14")]
		public void get_gicon (out unowned GLib.Icon gicon, [CCode (type = "GtkIconSize*")] out Gtk.IconSize size);
		[Version (since = "2.6")]
		public void get_icon_name (out unowned string icon_name, [CCode (type = "GtkIconSize*")] out Gtk.IconSize size);
		public unowned Gdk.Pixbuf? get_pixbuf ();
		[Version (since = "2.6")]
		public int get_pixel_size ();
		public Gtk.ImageType get_storage_type ();
		public void set_from_animation (Gdk.PixbufAnimation animation);
		public void set_from_file (string? filename);
		[Version (since = "2.14")]
		public void set_from_gicon (GLib.Icon icon, [CCode (type = "GtkIconSize")] Gtk.IconSize size);
		[Version (since = "2.6")]
		public void set_from_icon_name (string icon_name, [CCode (type = "GtkIconSize")] Gtk.IconSize size);
		public void set_from_pixbuf (Gdk.Pixbuf? pixbuf);
		public void set_from_resource (string? resource_path);
		[Version (since = "3.10")]
		public void set_from_surface (Cairo.Surface surface);
		[Version (since = "2.6")]
		public void set_pixel_size (int pixel_size);
		[NoAccessorMethod]
		public string file { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public GLib.Icon gicon { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.6")]
		public string icon_name { owned get; set; }
		[NoAccessorMethod]
		public int icon_size { get; set; }
		[NoAccessorMethod]
		public Gdk.Pixbuf pixbuf { owned get; set; }
		[NoAccessorMethod]
		public Gdk.PixbufAnimation pixbuf_animation { owned get; set; }
		[Version (since = "2.6")]
		public int pixel_size { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.8")]
		public string resource { owned get; set; }
		public Gtk.ImageType storage_type { get; }
		[NoAccessorMethod]
		public Cairo.Surface surface { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public bool use_fallback { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_image_accessible_get_type ()")]
	public class ImageAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ImageAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_image_cell_accessible_get_type ()")]
	public class ImageCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ImageCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_info_bar_get_type ()")]
	public class InfoBar : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.18")]
		public InfoBar ();
		[Version (since = "2.18")]
		public void add_action_widget (Gtk.Widget child, int response_id);
		[Version (since = "2.18")]
		public unowned Gtk.Button add_button (string button_text, int response_id);
		[Version (since = "2.18")]
		public void add_buttons (...);
		[Version (since = "2.18")]
		public unowned Gtk.Widget get_action_area ();
		[Version (since = "2.18")]
		public unowned Gtk.Container get_content_area ();
		[Version (since = "2.18")]
		public Gtk.MessageType get_message_type ();
		[Version (since = "3.10")]
		public bool get_show_close_button ();
		[Version (since = "2.18")]
		public void set_default_response (int response_id);
		[Version (since = "2.18")]
		public void set_message_type (Gtk.MessageType message_type);
		[Version (since = "2.18")]
		public void set_response_sensitive (int response_id, bool setting);
		[Version (since = "3.10")]
		public void set_show_close_button (bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public InfoBar.with_buttons (...);
		[Version (since = "2.18")]
		public Gtk.MessageType message_type { get; set construct; }
		[Version (since = "3.10")]
		public bool show_close_button { get; set construct; }
		[Version (since = "2.18")]
		public virtual signal void close ();
		[HasEmitter]
		[Version (since = "2.18")]
		public virtual signal void response (int response_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_invisible_get_type ()")]
	public class Invisible : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Invisible ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.2")]
		public Invisible.for_screen (Gdk.Screen screen);
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_screen ();
		[Version (since = "2.2")]
		public void set_screen (Gdk.Screen screen);
		public Gdk.Screen screen { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_label_get_type ()")]
	public class Label : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Label (string? str);
		[Version (since = "2.6")]
		public double get_angle ();
		public unowned Pango.AttrList? get_attributes ();
		[Version (since = "2.18")]
		public unowned string get_current_uri ();
		[Version (since = "2.6")]
		public Pango.EllipsizeMode get_ellipsize ();
		public Gtk.Justification get_justify ();
		public unowned string get_label ();
		public unowned Pango.Layout get_layout ();
		public void get_layout_offsets (out int x, out int y);
		public bool get_line_wrap ();
		[Version (since = "2.10")]
		public Pango.WrapMode get_line_wrap_mode ();
		[Version (since = "3.10")]
		public int get_lines ();
		[Version (since = "2.6")]
		public int get_max_width_chars ();
		public uint get_mnemonic_keyval ();
		public unowned Gtk.Widget? get_mnemonic_widget ();
		public bool get_selectable ();
		public bool get_selection_bounds (out int start, out int end);
		[Version (since = "2.6")]
		public bool get_single_line_mode ();
		public unowned string get_text ();
		[Version (since = "2.18")]
		public bool get_track_visited_links ();
		public bool get_use_markup ();
		public bool get_use_underline ();
		[Version (since = "2.6")]
		public int get_width_chars ();
		[Version (since = "3.16")]
		public float get_xalign ();
		[Version (since = "3.16")]
		public float get_yalign ();
		public void select_region (int start_offset, int end_offset);
		[Version (since = "2.6")]
		public void set_angle (double angle);
		public void set_attributes (Pango.AttrList? attrs);
		[Version (since = "2.6")]
		public void set_ellipsize (Pango.EllipsizeMode mode);
		public void set_justify (Gtk.Justification jtype);
		public void set_label (string str);
		public void set_line_wrap (bool wrap);
		[Version (since = "2.10")]
		public void set_line_wrap_mode (Pango.WrapMode wrap_mode);
		[Version (since = "3.10")]
		public void set_lines (int lines);
		public void set_markup (string str);
		public void set_markup_with_mnemonic (string str);
		[Version (since = "2.6")]
		public void set_max_width_chars (int n_chars);
		public void set_mnemonic_widget (Gtk.Widget? widget);
		public void set_pattern (string pattern);
		public void set_selectable (bool setting);
		[Version (since = "2.6")]
		public void set_single_line_mode (bool single_line_mode);
		public void set_text (string str);
		public void set_text_with_mnemonic (string str);
		[Version (since = "2.18")]
		public void set_track_visited_links (bool track_links);
		public void set_use_markup (bool setting);
		public void set_use_underline (bool setting);
		[Version (since = "2.6")]
		public void set_width_chars (int n_chars);
		[Version (since = "3.16")]
		public void set_xalign (float xalign);
		[Version (since = "3.16")]
		public void set_yalign (float yalign);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Label.with_mnemonic (string? str);
		[Version (since = "2.6")]
		public double angle { get; set; }
		public Pango.AttrList attributes { get; set; }
		[NoAccessorMethod]
		public int cursor_position { get; }
		[Version (since = "2.6")]
		public Pango.EllipsizeMode ellipsize { get; set; }
		public Gtk.Justification justify { get; set; }
		public string label { get; set; }
		[Version (since = "3.10")]
		public int lines { get; set; }
		[Version (since = "2.6")]
		public int max_width_chars { get; set; }
		public uint mnemonic_keyval { get; }
		public Gtk.Widget mnemonic_widget { get; set; }
		public string pattern { set; }
		public bool selectable { get; set; }
		[NoAccessorMethod]
		public int selection_bound { get; }
		[Version (since = "2.6")]
		public bool single_line_mode { get; set; }
		[Version (since = "2.18")]
		public bool track_visited_links { get; set; }
		public bool use_markup { get; set; }
		public bool use_underline { get; set; }
		[Version (since = "2.6")]
		public int width_chars { get; set; }
		[NoAccessorMethod]
		public bool wrap { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Pango.WrapMode wrap_mode { get; set; }
		[Version (since = "3.16")]
		public float xalign { get; set; }
		[Version (since = "3.16")]
		public float yalign { get; set; }
		[Version (since = "2.18")]
		public signal void activate_current_link ();
		[Version (since = "2.18")]
		public virtual signal bool activate_link (string uri);
		public virtual signal void copy_clipboard ();
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public virtual signal void populate_popup (Gtk.Menu menu);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_label_accessible_get_type ()")]
	public class LabelAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Hypertext, Atk.Text {
		[CCode (has_construct_function = false)]
		protected LabelAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class LabelSelectionInfo {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_layout_get_type ()")]
	public class Layout : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Layout (Gtk.Adjustment? hadjustment = null, Gtk.Adjustment? vadjustment = null);
		[Version (since = "2.14")]
		public unowned Gdk.Window get_bin_window ();
		public void get_size (out uint width, out uint height);
		public void move (Gtk.Widget child_widget, int x, int y);
		public void put (Gtk.Widget child_widget, int x, int y);
		public void set_size (uint width, uint height);
		[NoAccessorMethod]
		public uint height { get; set; }
		[NoAccessorMethod]
		public uint width { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_level_bar_get_type ()")]
	public class LevelBar : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.6")]
		public LevelBar ();
		[Version (since = "3.6")]
		public void add_offset_value (string name, double value);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.6")]
		public LevelBar.for_interval (double min_value, double max_value);
		[Version (since = "3.8")]
		public bool get_inverted ();
		[Version (since = "3.6")]
		public double get_max_value ();
		[Version (since = "3.6")]
		public double get_min_value ();
		[Version (since = "3.6")]
		public Gtk.LevelBarMode get_mode ();
		[Version (since = "3.6")]
		public bool get_offset_value (string? name, out double value);
		[Version (since = "3.6")]
		public double get_value ();
		[Version (since = "3.6")]
		public void remove_offset_value (string? name);
		[Version (since = "3.8")]
		public void set_inverted (bool inverted);
		[Version (since = "3.6")]
		public void set_max_value (double value);
		[Version (since = "3.6")]
		public void set_min_value (double value);
		[Version (since = "3.6")]
		public void set_mode (Gtk.LevelBarMode mode);
		[Version (since = "3.6")]
		public void set_value (double value);
		[Version (since = "3.8")]
		public bool inverted { get; set; }
		[Version (since = "3.6")]
		public double max_value { get; set; }
		[Version (since = "3.6")]
		public double min_value { get; set; }
		[Version (since = "3.6")]
		public Gtk.LevelBarMode mode { get; set; }
		[Version (since = "3.6")]
		public double value { get; set; }
		[Version (since = "3.6")]
		public virtual signal void offset_changed (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_level_bar_accessible_get_type ()")]
	public class LevelBarAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected LevelBarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_link_button_get_type ()")]
	public class LinkButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public LinkButton (string uri);
		[Version (since = "2.10")]
		public unowned string get_uri ();
		[Version (since = "2.14")]
		public bool get_visited ();
		[Version (since = "2.10")]
		public void set_uri (string uri);
		[Version (since = "2.14")]
		public void set_visited (bool visited);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public LinkButton.with_label (string uri, string? label);
		[Version (since = "2.10")]
		public string uri { get; set; }
		[Version (since = "2.14")]
		public bool visited { get; set; }
		public virtual signal bool activate_link ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_link_button_accessible_get_type ()")]
	public class LinkButtonAccessible : Gtk.ButtonAccessible, Atk.Action, Atk.Component, Atk.HyperlinkImpl, Atk.Image {
		[CCode (has_construct_function = false)]
		protected LinkButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_box_get_type ()")]
	public class ListBox : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public ListBox ();
		[Version (since = "3.16")]
		public void bind_model (GLib.ListModel? model, owned Gtk.ListBoxCreateWidgetFunc? create_widget_func);
		[Version (since = "3.10")]
		public void drag_highlight_row (Gtk.ListBoxRow row);
		[Version (since = "3.10")]
		public void drag_unhighlight_row ();
		[Version (since = "3.10")]
		public bool get_activate_on_single_click ();
		[Version (since = "3.10")]
		public unowned Gtk.Adjustment get_adjustment ();
		[Version (since = "3.10")]
		public unowned Gtk.ListBoxRow? get_row_at_index (int index_);
		[Version (since = "3.10")]
		public unowned Gtk.ListBoxRow? get_row_at_y (int y);
		[Version (since = "3.10")]
		public unowned Gtk.ListBoxRow get_selected_row ();
		[Version (since = "3.14")]
		public GLib.List<weak Gtk.ListBoxRow> get_selected_rows ();
		[Version (since = "3.10")]
		public Gtk.SelectionMode get_selection_mode ();
		[Version (since = "3.10")]
		public void insert (Gtk.Widget child, int position);
		[Version (since = "3.10")]
		public void invalidate_filter ();
		[Version (since = "3.10")]
		public void invalidate_headers ();
		[Version (since = "3.10")]
		public void invalidate_sort ();
		[Version (since = "3.10")]
		public void prepend (Gtk.Widget child);
		[Version (since = "3.10")]
		public void select_row (Gtk.ListBoxRow? row);
		[Version (since = "3.14")]
		public void selected_foreach (Gtk.ListBoxForeachFunc func);
		[Version (since = "3.10")]
		public void set_activate_on_single_click (bool single);
		[Version (since = "3.10")]
		public void set_adjustment (Gtk.Adjustment? adjustment);
		[Version (since = "3.10")]
		public void set_filter_func (owned Gtk.ListBoxFilterFunc? filter_func);
		[Version (since = "3.10")]
		public void set_header_func (owned Gtk.ListBoxUpdateHeaderFunc? update_header);
		[Version (since = "3.10")]
		public void set_placeholder (Gtk.Widget? placeholder);
		[Version (since = "3.10")]
		public void set_selection_mode (Gtk.SelectionMode mode);
		[Version (since = "3.10")]
		public void set_sort_func (owned Gtk.ListBoxSortFunc? sort_func);
		[Version (since = "3.14")]
		public void unselect_row (Gtk.ListBoxRow row);
		public bool activate_on_single_click { get; set; }
		public Gtk.SelectionMode selection_mode { get; set; }
		public virtual signal void activate_cursor_row ();
		public virtual signal void move_cursor (Gtk.MovementStep step, int count);
		[Version (since = "3.10")]
		public virtual signal void row_activated (Gtk.ListBoxRow row);
		[Version (since = "3.10")]
		public virtual signal void row_selected (Gtk.ListBoxRow? row);
		[HasEmitter]
		[Version (since = "3.14")]
		public virtual signal void select_all ();
		[Version (since = "3.14")]
		public virtual signal void selected_rows_changed ();
		public virtual signal void toggle_cursor_row ();
		[HasEmitter]
		[Version (since = "3.14")]
		public virtual signal void unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_list_box_accessible_get_type ()")]
	public class ListBoxAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected ListBoxAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_box_row_get_type ()")]
	public class ListBoxRow : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public ListBoxRow ();
		[Version (since = "3.10")]
		public void changed ();
		[Version (since = "3.14")]
		public bool get_activatable ();
		[Version (since = "3.10")]
		public unowned Gtk.Widget? get_header ();
		[Version (since = "3.10")]
		public int get_index ();
		[Version (since = "3.14")]
		public bool get_selectable ();
		[Version (since = "3.14")]
		public bool is_selected ();
		[Version (since = "3.14")]
		public void set_activatable (bool activatable);
		[Version (since = "3.10")]
		public void set_header (Gtk.Widget? header);
		[Version (since = "3.14")]
		public void set_selectable (bool selectable);
		[Version (since = "3.14")]
		public bool activatable { get; set; }
		[Version (since = "3.14")]
		public bool selectable { get; set; }
		public virtual signal void activate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_list_box_row_accessible_get_type ()")]
	public class ListBoxRowAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ListBoxRowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_list_store_get_type ()")]
	public class ListStore : GLib.Object, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false, sentinel = "-1")]
		public ListStore (int n_columns, ...);
		public void append (out Gtk.TreeIter iter);
		public void clear ();
		public void insert (out Gtk.TreeIter iter, int position);
		public void insert_after (out Gtk.TreeIter iter, Gtk.TreeIter? sibling);
		public void insert_before (out Gtk.TreeIter iter, Gtk.TreeIter? sibling);
		[CCode (sentinel = "-1")]
		[Version (since = "2.6")]
		public void insert_with_values (out Gtk.TreeIter iter, int position, ...);
		[Version (since = "2.6")]
		public void insert_with_valuesv (out Gtk.TreeIter iter, int position, [CCode (array_length_cname = "n_values", array_length_pos = 4.1)] int[] columns, [CCode (array_length_cname = "n_values", array_length_pos = 4.1)] GLib.Value[] values);
		[Version (since = "2.2")]
		public bool iter_is_valid (Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public void move_after (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[Version (since = "2.2")]
		public void move_before (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[CCode (cname = "gtk_list_store_newv", has_construct_function = false)]
		public ListStore.newv ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5)] GLib.Type[] types);
		public void prepend (out Gtk.TreeIter iter);
		public bool remove (Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public void reorder ([CCode (array_length = false, array_null_terminated = true)] int[] new_order);
		[CCode (sentinel = "-1")]
		public void @set (Gtk.TreeIter iter, ...);
		public void set_column_types ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5)] GLib.Type[] types);
		public void set_valist (Gtk.TreeIter iter, [CCode (type = "va_list")] va_list var_args);
		public void set_value (Gtk.TreeIter iter, int column, GLib.Value value);
		[Version (since = "2.12")]
		public void set_valuesv (Gtk.TreeIter iter, [CCode (array_length_cname = "n_values", array_length_pos = 3.1)] int[] columns, [CCode (array_length_cname = "n_values", array_length_pos = 3.1)] GLib.Value[] values);
		[Version (since = "2.2")]
		public void swap (Gtk.TreeIter a, Gtk.TreeIter b);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_lock_button_get_type ()")]
	public class LockButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.2")]
		public LockButton (GLib.Permission? permission);
		[Version (since = "3.2")]
		public unowned GLib.Permission get_permission ();
		[Version (since = "3.2")]
		public void set_permission (GLib.Permission? permission);
		public GLib.Permission permission { get; set; }
		[NoAccessorMethod]
		public string text_lock { owned get; set construct; }
		[NoAccessorMethod]
		public string text_unlock { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_lock { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_not_authorized { owned get; set construct; }
		[NoAccessorMethod]
		public string tooltip_unlock { owned get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_lock_button_accessible_get_type ()")]
	public class LockButtonAccessible : Gtk.ButtonAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected LockButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_get_type ()")]
	public class Menu : Gtk.MenuShell, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Menu ();
		[Version (since = "2.4")]
		public void attach (Gtk.Widget child, uint left_attach, uint right_attach, uint top_attach, uint bottom_attach);
		public void attach_to_widget (Gtk.Widget attach_widget, [CCode (scope = "async")] Gtk.MenuDetachFunc? detacher);
		public void detach ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public Menu.from_model (GLib.MenuModel model);
		public unowned Gtk.AccelGroup get_accel_group ();
		[Version (since = "2.14")]
		public unowned string get_accel_path ();
		public unowned Gtk.Widget get_active ();
		public unowned Gtk.Widget get_attach_widget ();
		[Version (since = "2.6")]
		public static unowned GLib.List<Gtk.Menu> get_for_attach_widget (Gtk.Widget widget);
		[Version (since = "2.14")]
		public int get_monitor ();
		[Version (since = "2.18")]
		public bool get_reserve_toggle_size ();
		[Version (since = "3.22")]
		public void place_on_monitor (Gdk.Monitor monitor);
		public void popdown ();
		public void popup (Gtk.Widget? parent_menu_shell, Gtk.Widget? parent_menu_item, [CCode (delegate_target_pos = 3.5, scope = "async")] Gtk.MenuPositionFunc? func, uint button, uint32 activate_time);
		[Version (since = "3.22")]
		public void popup_at_pointer (Gdk.Event? trigger_event = null);
		[Version (since = "3.22")]
		public void popup_at_rect (Gdk.Window rect_window, Gdk.Rectangle rect, Gdk.Gravity rect_anchor, Gdk.Gravity menu_anchor, Gdk.Event? trigger_event = null);
		[Version (since = "3.22")]
		public void popup_at_widget (Gtk.Widget widget, Gdk.Gravity widget_anchor, Gdk.Gravity menu_anchor, Gdk.Event? trigger_event = null);
		[Version (since = "3.0")]
		public void popup_for_device (Gdk.Device? device, Gtk.Widget? parent_menu_shell, Gtk.Widget? parent_menu_item, [CCode (delegate_target_pos = 4.33333, destroy_notify_pos = 4.66667)] owned Gtk.MenuPositionFunc? func, uint button, uint32 activate_time);
		public void reorder_child (Gtk.Widget child, int position);
		public void reposition ();
		public void set_accel_group (Gtk.AccelGroup? accel_group);
		public void set_accel_path (string? accel_path);
		public void set_active (uint index);
		[Version (since = "2.4")]
		public void set_monitor (int monitor_num);
		[Version (since = "2.18")]
		public void set_reserve_toggle_size (bool reserve_toggle_size);
		[Version (since = "2.2")]
		public void set_screen (Gdk.Screen? screen);
		[Version (since = "2.14")]
		public Gtk.AccelGroup accel_group { get; set; }
		[Version (since = "2.14")]
		public string accel_path { get; set; }
		[Version (since = "2.14")]
		public int active { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.22")]
		public Gdk.AnchorHints anchor_hints { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public Gtk.Widget attach_widget { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.22")]
		public Gdk.WindowTypeHint menu_type_hint { get; set construct; }
		[Version (since = "2.14")]
		public int monitor { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.22")]
		public int rect_anchor_dx { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "3.22")]
		public int rect_anchor_dy { get; set construct; }
		[Version (since = "2.18")]
		public bool reserve_toggle_size { get; set; }
		public signal void move_scroll (Gtk.ScrollType scroll_type);
		[Version (since = "3.22")]
		public signal void popped_up ([CCode (type = "gpointer")] Gdk.Rectangle flipped_rect, [CCode (type = "gpointer")] Gdk.Rectangle final_rect, bool flipped_x, bool flipped_y);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_accessible_get_type ()")]
	public class MenuAccessible : Gtk.MenuShellAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_bar_get_type ()")]
	public class MenuBar : Gtk.MenuShell, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuBar ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.4")]
		public MenuBar.from_model (GLib.MenuModel model);
		[Version (since = "2.8")]
		public Gtk.PackDirection get_child_pack_direction ();
		[Version (since = "2.8")]
		public Gtk.PackDirection get_pack_direction ();
		[Version (since = "2.8")]
		public void set_child_pack_direction (Gtk.PackDirection child_pack_dir);
		[Version (since = "2.8")]
		public void set_pack_direction (Gtk.PackDirection pack_dir);
		[Version (since = "2.8")]
		public Gtk.PackDirection child_pack_direction { get; set; }
		[Version (since = "2.8")]
		public Gtk.PackDirection pack_direction { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_button_get_type ()")]
	public class MenuButton : Gtk.ToggleButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.6")]
		public MenuButton ();
		[Version (since = "3.6")]
		public unowned Gtk.Widget? get_align_widget ();
		[Version (since = "3.6")]
		public Gtk.ArrowType get_direction ();
		[Version (since = "3.6")]
		public unowned GLib.MenuModel? get_menu_model ();
		[Version (since = "3.12")]
		public unowned Gtk.Popover? get_popover ();
		[Version (since = "3.6")]
		public unowned Gtk.Menu? get_popup ();
		[Version (since = "3.12")]
		public bool get_use_popover ();
		[Version (since = "3.6")]
		public void set_align_widget (Gtk.Widget? align_widget);
		[Version (since = "3.6")]
		public void set_direction (Gtk.ArrowType direction);
		[Version (since = "3.6")]
		public void set_menu_model (GLib.MenuModel? menu_model);
		[Version (since = "3.12")]
		public void set_popover (Gtk.Widget? popover);
		[Version (since = "3.6")]
		public void set_popup (Gtk.Widget? menu);
		[Version (since = "3.12")]
		public void set_use_popover (bool use_popover);
		[Version (since = "3.6")]
		public Gtk.Container align_widget { get; set; }
		[Version (since = "3.6")]
		public Gtk.ArrowType direction { get; set; }
		[Version (since = "3.6")]
		public GLib.MenuModel menu_model { get; set; }
		[Version (since = "3.12")]
		public Gtk.Popover popover { get; set; }
		[Version (since = "3.6")]
		public Gtk.Menu popup { get; set; }
		[Version (since = "3.12")]
		public bool use_popover { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_button_accessible_get_type ()")]
	public class MenuButtonAccessible : Gtk.ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected MenuButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_item_get_type ()")]
	public class MenuItem : Gtk.Bin, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem ();
		[Version (since = "2.14")]
		public unowned string? get_accel_path ();
		[Version (since = "2.16")]
		public virtual unowned string get_label ();
		[Version (since = "3.0")]
		public bool get_reserve_indicator ();
		public unowned Gtk.Widget? get_submenu ();
		[Version (since = "2.16")]
		public bool get_use_underline ();
		public void set_accel_path (string? accel_path);
		[Version (since = "2.16")]
		public virtual void set_label (string label);
		[Version (since = "3.0")]
		public void set_reserve_indicator (bool reserve);
		public void set_submenu (Gtk.Menu? submenu);
		[Version (since = "2.16")]
		public void set_use_underline (bool setting);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MenuItem.with_mnemonic (string label);
		[Version (since = "2.14")]
		public string accel_path { get; set; }
		[Version (since = "2.16")]
		public string label { get; set; }
		[Version (since = "2.12")]
		public Gtk.Menu submenu { get; set; }
		[Version (since = "2.16")]
		public bool use_underline { get; set; }
		[HasEmitter]
		public virtual signal void activate ();
		public virtual signal void activate_item ();
		[HasEmitter]
		public virtual signal void deselect ();
		[HasEmitter]
		public virtual signal void select ();
		[HasEmitter]
		public virtual signal void toggle_size_allocate (int allocation);
		[HasEmitter]
		public virtual signal void toggle_size_request (void* requisition);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_item_accessible_get_type ()")]
	public class MenuItemAccessible : Gtk.ContainerAccessible, Atk.Action, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_shell_get_type ()")]
	public abstract class MenuShell : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected MenuShell ();
		public void activate_item (Gtk.Widget menu_item, bool force_deactivate);
		public void append (Gtk.MenuItem child);
		[Version (since = "3.6")]
		public void bind_model (GLib.MenuModel? model, string? action_namespace, bool with_separators);
		public void deselect ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_parent_shell ();
		[NoWrapper]
		public virtual int get_popup_delay ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_selected_item ();
		[Version (since = "2.8")]
		public bool get_take_focus ();
		public void prepend (Gtk.Widget child);
		[Version (since = "2.2")]
		public void select_first (bool search_sensitive);
		public virtual void select_item (Gtk.Widget menu_item);
		[Version (since = "2.8")]
		public void set_take_focus (bool take_focus);
		[Version (since = "2.8")]
		public bool take_focus { get; set; }
		public virtual signal void activate_current (bool force_hide);
		[HasEmitter]
		public virtual signal void cancel ();
		public signal void cycle_focus (Gtk.DirectionType direction);
		[HasEmitter]
		public virtual signal void deactivate ();
		[HasEmitter]
		[Version (since = "3.2")]
		public virtual signal void insert (Gtk.Widget child, int position);
		public virtual signal void move_current (Gtk.MenuDirectionType direction);
		[Version (since = "2.12")]
		public virtual signal bool move_selected (int distance);
		public virtual signal void selection_done ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_menu_shell_accessible_get_type ()")]
	public class MenuShellAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected MenuShellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_menu_tool_button_get_type ()")]
	public class MenuToolButton : Gtk.ToolButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.6")]
		public MenuToolButton (Gtk.Widget? icon_widget, string? label);
		[Version (since = "2.6")]
		public unowned Gtk.Widget get_menu ();
		[Version (since = "2.12")]
		public void set_arrow_tooltip_markup (string markup);
		[Version (since = "2.12")]
		public void set_arrow_tooltip_text (string text);
		[Version (since = "2.6")]
		public void set_menu (Gtk.Widget menu);
		public Gtk.Menu menu { get; set; }
		public virtual signal void show_menu ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_message_dialog_get_type ()")]
	public class MessageDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[PrintfFormat]
		public MessageDialog (Gtk.Window? parent, Gtk.DialogFlags flags, Gtk.MessageType type, Gtk.ButtonsType buttons, string? message_format, ...);
		[PrintfFormat]
		[Version (since = "2.6")]
		public void format_secondary_markup (string message_format, ...);
		[PrintfFormat]
		[Version (since = "2.6")]
		public void format_secondary_text (string? message_format, ...);
		[Version (since = "2.22")]
		public unowned Gtk.Widget get_message_area ();
		[Version (since = "2.4")]
		public void set_markup (string str);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[PrintfFormat]
		[Version (since = "2.4")]
		public MessageDialog.with_markup (Gtk.Window? parent, Gtk.DialogFlags flags, Gtk.MessageType type, Gtk.ButtonsType buttons, string? message_format, ...);
		public Gtk.ButtonsType buttons { construct; }
		[Version (since = "2.22")]
		public Gtk.Widget message_area { get; }
		[NoAccessorMethod]
		public Gtk.MessageType message_type { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string secondary_text { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool secondary_use_markup { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string text { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool use_markup { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_model_button_get_type ()")]
	public class ModelButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.16")]
		public ModelButton ();
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool active { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool centered { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public GLib.Icon icon { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool iconic { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool inverted { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public string menu_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public Gtk.ButtonRole role { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public string text { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_mount_operation_get_type ()")]
	public class MountOperation : GLib.MountOperation {
		[CCode (has_construct_function = false, type = "GMountOperation*")]
		[Version (since = "2.14")]
		public MountOperation (Gtk.Window? parent);
		[Version (since = "2.14")]
		public unowned Gtk.Window get_parent ();
		[Version (since = "2.14")]
		public unowned Gdk.Screen get_screen ();
		[Version (since = "2.14")]
		public void set_parent (Gtk.Window? parent);
		[Version (since = "2.14")]
		public void set_screen (Gdk.Screen screen);
		[NoAccessorMethod]
		public bool is_showing { get; }
		public Gtk.Window parent { get; set; }
		public Gdk.Screen screen { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_native_dialog_get_type ()")]
	public abstract class NativeDialog : GLib.Object {
		[CCode (has_construct_function = false)]
		protected NativeDialog ();
		[Version (since = "3.20")]
		public void destroy ();
		[Version (since = "3.20")]
		public bool get_modal ();
		[Version (since = "3.20")]
		public unowned string? get_title ();
		[Version (since = "3.20")]
		public unowned Gtk.Window? get_transient_for ();
		[Version (since = "3.20")]
		public bool get_visible ();
		[Version (since = "3.20")]
		public virtual void hide ();
		[Version (since = "3.20")]
		public int run ();
		[Version (since = "3.20")]
		public void set_modal (bool modal);
		[Version (since = "3.20")]
		public void set_title (string title);
		[Version (since = "3.20")]
		public void set_transient_for (Gtk.Window? parent);
		[Version (since = "3.20")]
		public virtual void show ();
		[Version (since = "3.20")]
		public bool modal { get; set; }
		[Version (since = "3.20")]
		public string title { get; set; }
		[Version (since = "3.20")]
		public Gtk.Window transient_for { get; set construct; }
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public bool visible { get; set; }
		[Version (since = "3.20")]
		public virtual signal void response (int response_id);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_notebook_get_type ()")]
	public class Notebook : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Notebook ();
		public int append_page (Gtk.Widget child, Gtk.Widget? tab_label = null);
		public int append_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label);
		[Version (since = "3.16")]
		public void detach_tab (Gtk.Widget child);
		[Version (since = "2.20")]
		public unowned Gtk.Widget? get_action_widget (Gtk.PackType pack_type);
		public int get_current_page ();
		[Version (since = "2.24")]
		public unowned string? get_group_name ();
		public unowned Gtk.Widget? get_menu_label (Gtk.Widget child);
		public unowned string? get_menu_label_text (Gtk.Widget child);
		[Version (since = "2.2")]
		public int get_n_pages ();
		public unowned Gtk.Widget? get_nth_page (int page_num);
		public bool get_scrollable ();
		public bool get_show_border ();
		public bool get_show_tabs ();
		[Version (since = "2.10")]
		public bool get_tab_detachable (Gtk.Widget child);
		public unowned Gtk.Widget get_tab_label (Gtk.Widget child);
		public unowned string? get_tab_label_text (Gtk.Widget child);
		public Gtk.PositionType get_tab_pos ();
		[Version (since = "2.10")]
		public bool get_tab_reorderable (Gtk.Widget child);
		public int insert_page (Gtk.Widget child, Gtk.Widget? tab_label, int position);
		[CCode (vfunc_name = "insert_page")]
		[NoWrapper]
		public virtual int insert_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label, int position);
		public void next_page ();
		public int page_num (Gtk.Widget child);
		public void popup_disable ();
		public void popup_enable ();
		public int prepend_page (Gtk.Widget child, Gtk.Widget? tab_label = null);
		public int prepend_page_menu (Gtk.Widget child, Gtk.Widget? tab_label, Gtk.Widget? menu_label);
		public void prev_page ();
		public void remove_page (int page_num);
		public void reorder_child (Gtk.Widget child, int position);
		[Version (since = "2.20")]
		public void set_action_widget (Gtk.Widget widget, Gtk.PackType pack_type);
		public void set_current_page (int page_num);
		[Version (since = "2.24")]
		public void set_group_name (string? group_name);
		public void set_menu_label (Gtk.Widget child, Gtk.Widget? menu_label);
		public void set_menu_label_text (Gtk.Widget child, string menu_text);
		public void set_scrollable (bool scrollable);
		public void set_show_border (bool show_border);
		public void set_show_tabs (bool show_tabs);
		[Version (since = "2.10")]
		public void set_tab_detachable (Gtk.Widget child, bool detachable);
		public void set_tab_label (Gtk.Widget child, Gtk.Widget? tab_label);
		public void set_tab_label_text (Gtk.Widget child, string tab_text);
		public void set_tab_pos (Gtk.PositionType pos);
		[Version (since = "2.10")]
		public void set_tab_reorderable (Gtk.Widget child, bool reorderable);
		[NoAccessorMethod]
		public bool enable_popup { get; set; }
		[Version (since = "2.24")]
		public string group_name { get; set; }
		[NoAccessorMethod]
		public int page { get; set; }
		public bool scrollable { get; set; }
		public bool show_border { get; set; }
		public bool show_tabs { get; set; }
		public Gtk.PositionType tab_pos { get; set; }
		public virtual signal bool change_current_page (int offset);
		[Version (since = "2.12")]
		public virtual signal unowned Gtk.Notebook create_window (Gtk.Widget page, int x, int y);
		public virtual signal bool focus_tab (Gtk.NotebookTab type);
		public virtual signal void move_focus_out (Gtk.DirectionType direction);
		[Version (since = "2.10")]
		public virtual signal void page_added (Gtk.Widget child, uint page_num);
		[Version (since = "2.10")]
		public virtual signal void page_removed (Gtk.Widget child, uint page_num);
		[Version (since = "2.10")]
		public virtual signal void page_reordered (Gtk.Widget child, uint page_num);
		public virtual signal bool reorder_tab (Gtk.DirectionType direction, bool move_to_last);
		public virtual signal bool select_page (bool move_focus);
		public virtual signal void switch_page (Gtk.Widget page, uint page_num);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_notebook_accessible_get_type ()")]
	public class NotebookAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected NotebookAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_notebook_page_accessible_get_type ()")]
	public class NotebookPageAccessible : Atk.Object, Atk.Component {
		[CCode (has_construct_function = false, type = "AtkObject*")]
		public NotebookPageAccessible (Gtk.NotebookAccessible notebook, Gtk.Widget child);
		public void invalidate ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_overlay_get_type ()")]
	public class Overlay : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.2")]
		public Overlay ();
		[Version (since = "3.2")]
		public void add_overlay (Gtk.Widget widget);
		[Version (since = "3.18")]
		public bool get_overlay_pass_through (Gtk.Widget widget);
		[Version (since = "3.18")]
		public void reorder_overlay (Gtk.Widget child, int position);
		[Version (since = "3.18")]
		public void set_overlay_pass_through (Gtk.Widget widget, bool pass_through);
		public virtual signal bool get_child_position (Gtk.Widget widget, out Gdk.Rectangle allocation);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_pad_controller_get_type ()")]
	public class PadController : Gtk.EventController {
		[CCode (has_construct_function = false)]
		[Version (since = "3.22")]
		public PadController (Gtk.Window window, GLib.ActionGroup group, Gdk.Device? pad);
		[Version (since = "3.22")]
		public void set_action (Gtk.PadActionType type, int index, int mode, string label, string action_name);
		[Version (since = "3.22")]
		public void set_action_entries ([CCode (array_length_cname = "n_entries", array_length_pos = 1.1)] Gtk.PadActionEntry[] entries);
		[NoAccessorMethod]
		public GLib.ActionGroup action_group { owned get; construct; }
		[NoAccessorMethod]
		public Gdk.Device pad { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_page_setup_get_type ()")]
	public class PageSetup : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PageSetup ();
		[Version (since = "2.10")]
		public Gtk.PageSetup copy ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public PageSetup.from_file (string file_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "3.22")]
		public PageSetup.from_gvariant (GLib.Variant variant);
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public PageSetup.from_key_file (GLib.KeyFile key_file, string? group_name) throws GLib.Error;
		[Version (since = "2.10")]
		public double get_bottom_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_left_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public Gtk.PageOrientation get_orientation ();
		[Version (since = "2.10")]
		public double get_page_height (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_page_width (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_paper_height (Gtk.Unit unit);
		[Version (since = "2.10")]
		public unowned Gtk.PaperSize get_paper_size ();
		[Version (since = "2.10")]
		public double get_paper_width (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_right_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_top_margin (Gtk.Unit unit);
		[Version (since = "2.14")]
		public bool load_file (string file_name) throws GLib.Error;
		[Version (since = "2.14")]
		public bool load_key_file (GLib.KeyFile key_file, string? group_name) throws GLib.Error;
		[Version (since = "2.10")]
		public void set_bottom_margin (double margin, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_left_margin (double margin, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_orientation (Gtk.PageOrientation orientation);
		[Version (since = "2.10")]
		public void set_paper_size (Gtk.PaperSize size);
		[Version (since = "2.10")]
		public void set_paper_size_and_default_margins (Gtk.PaperSize size);
		[Version (since = "2.10")]
		public void set_right_margin (double margin, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_top_margin (double margin, Gtk.Unit unit);
		[Version (since = "2.12")]
		public bool to_file (string file_name) throws GLib.Error;
		[CCode (returns_floating_reference = true)]
		[Version (since = "3.22")]
		public GLib.Variant to_gvariant ();
		[Version (since = "2.12")]
		public void to_key_file (GLib.KeyFile key_file, string group_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_paned_get_type ()")]
	public class Paned : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Paned (Gtk.Orientation orientation);
		public void add1 (Gtk.Widget child);
		public void add2 (Gtk.Widget child);
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_child1 ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_child2 ();
		[Version (since = "2.20")]
		public unowned Gdk.Window get_handle_window ();
		public int get_position ();
		[Version (since = "3.16")]
		public bool get_wide_handle ();
		public void pack1 (Gtk.Widget child, bool resize, bool shrink);
		public void pack2 (Gtk.Widget child, bool resize, bool shrink);
		public void set_position (int position);
		[Version (since = "3.16")]
		public void set_wide_handle (bool wide);
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public int max_position { get; }
		[NoAccessorMethod]
		[Version (since = "2.4")]
		public int min_position { get; }
		public int position { get; set; }
		[NoAccessorMethod]
		public bool position_set { get; set; }
		[Version (since = "3.16")]
		public bool wide_handle { get; set; }
		[Version (since = "2.0")]
		public virtual signal bool accept_position ();
		[Version (since = "2.0")]
		public virtual signal bool cancel_position ();
		[Version (since = "2.0")]
		public virtual signal bool cycle_child_focus (bool reverse);
		[Version (since = "2.0")]
		public virtual signal bool cycle_handle_focus (bool reverse);
		[Version (since = "2.0")]
		public virtual signal bool move_handle (Gtk.ScrollType scroll);
		[Version (since = "2.0")]
		public virtual signal bool toggle_handle_focus ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_paned_accessible_get_type ()")]
	public class PanedAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected PanedAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gtk_paper_size_get_type ()")]
	[Compact]
	public class PaperSize {
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PaperSize (string? name);
		[Version (since = "2.10")]
		public Gtk.PaperSize copy ();
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PaperSize.custom (string name, string display_name, double width, double height, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void free ();
		[CCode (has_construct_function = false)]
		[Version (since = "3.22")]
		public PaperSize.from_gvariant (GLib.Variant variant);
		[CCode (has_construct_function = false)]
		[Version (since = "3.16")]
		public PaperSize.from_ipp (string ipp_name, double width, double height);
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public PaperSize.from_key_file (GLib.KeyFile key_file, string group_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PaperSize.from_ppd (string ppd_name, string ppd_display_name, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "2.10")]
		public static unowned string get_default ();
		[Version (since = "2.10")]
		public double get_default_bottom_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_default_left_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_default_right_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public double get_default_top_margin (Gtk.Unit unit);
		[Version (since = "2.10")]
		public unowned string get_display_name ();
		[Version (since = "2.10")]
		public double get_height (Gtk.Unit unit);
		[Version (since = "2.10")]
		public unowned string get_name ();
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "2.12")]
		public static GLib.List<Gtk.PaperSize> get_paper_sizes (bool include_custom);
		[Version (since = "2.10")]
		public unowned string get_ppd_name ();
		[Version (since = "2.10")]
		public double get_width (Gtk.Unit unit);
		public bool is_custom ();
		[Version (since = "2.10")]
		public bool is_equal (Gtk.PaperSize size2);
		public bool is_ipp ();
		[Version (since = "2.10")]
		public void set_size (double width, double height, Gtk.Unit unit);
		[CCode (returns_floating_reference = true)]
		[Version (since = "3.22")]
		public GLib.Variant to_gvariant ();
		[Version (since = "2.12")]
		public void to_key_file (GLib.KeyFile key_file, string group_name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_places_sidebar_get_type ()")]
	public class PlacesSidebar : Gtk.ScrolledWindow, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public PlacesSidebar ();
		[Version (since = "3.10")]
		public void add_shortcut (GLib.File location);
		[Version (since = "3.12")]
		public bool get_local_only ();
		[Version (since = "3.10")]
		public GLib.File? get_location ();
		[Version (since = "3.10")]
		public GLib.File? get_nth_bookmark (int n);
		[Version (since = "3.10")]
		public Gtk.PlacesOpenFlags get_open_flags ();
		[Version (since = "3.10")]
		public bool get_show_desktop ();
		[Version (since = "3.14")]
		public bool get_show_enter_location ();
		[Version (since = "3.18")]
		public bool get_show_other_locations ();
		[Version (since = "3.18")]
		public bool get_show_recent ();
		[Version (since = "3.18")]
		public bool get_show_trash ();
		[Version (since = "3.10")]
		public GLib.SList<GLib.File> list_shortcuts ();
		[Version (since = "3.10")]
		public void remove_shortcut (GLib.File location);
		[Version (since = "3.18")]
		public void set_drop_targets_visible (bool visible, Gdk.DragContext context);
		[Version (since = "3.12")]
		public void set_local_only (bool local_only);
		[Version (since = "3.10")]
		public void set_location (GLib.File? location);
		[Version (since = "3.10")]
		public void set_open_flags (Gtk.PlacesOpenFlags flags);
		[Version (since = "3.10")]
		public void set_show_desktop (bool show_desktop);
		[Version (since = "3.14")]
		public void set_show_enter_location (bool show_enter_location);
		[Version (since = "3.18")]
		public void set_show_other_locations (bool show_other_locations);
		[Version (since = "3.18")]
		public void set_show_recent (bool show_recent);
		[Version (since = "3.18")]
		public void set_show_trash (bool show_trash);
		public bool local_only { get; set; }
		public GLib.File location { owned get; set; }
		public Gtk.PlacesOpenFlags open_flags { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.18")]
		public bool populate_all { get; set; }
		public bool show_desktop { get; set; }
		public bool show_enter_location { get; set; }
		public bool show_other_locations { get; set; }
		public bool show_recent { get; set; }
		public bool show_trash { get; set; }
		[Version (since = "3.10")]
		public signal int drag_action_ask (int actions);
		[Version (since = "3.10")]
		public signal int drag_action_requested (Gdk.DragContext context, GLib.File dest_file, GLib.List<GLib.File> source_file_list);
		[Version (since = "3.10")]
		public signal void drag_perform_drop (GLib.File dest_file, GLib.List<GLib.File> source_file_list, int action);
		[Version (since = "3.20")]
		public signal void mount (GLib.MountOperation mount_operation);
		[Version (since = "3.10")]
		public signal void open_location (GLib.File location, Gtk.PlacesOpenFlags open_flags);
		[Version (since = "3.10")]
		public signal void populate_popup (Gtk.Widget container, GLib.File? selected_item, GLib.Volume? selected_volume);
		[Version (since = "3.10")]
		public signal void show_error_message (string primary, string secondary);
		[Version (since = "3.20")]
		public signal void show_other_locations_with_flags (Gtk.PlacesOpenFlags open_flags);
		[Version (since = "3.20")]
		public signal void unmount (GLib.MountOperation mount_operation);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_popover_get_type ()")]
	public class Popover : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.12")]
		public Popover (Gtk.Widget? relative_to);
		[Version (since = "3.12")]
		public void bind_model (GLib.MenuModel? model, string? action_namespace);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.12")]
		public Popover.from_model (Gtk.Widget? relative_to, GLib.MenuModel model);
		[Version (since = "3.20")]
		public Gtk.PopoverConstraint get_constrain_to ();
		[Version (since = "3.18")]
		public unowned Gtk.Widget? get_default_widget ();
		[Version (since = "3.12")]
		public bool get_modal ();
		public bool get_pointing_to (out Gdk.Rectangle rect);
		public Gtk.PositionType get_position ();
		[Version (since = "3.12")]
		public unowned Gtk.Widget get_relative_to ();
		[Version (since = "3.22")]
		public void popdown ();
		[Version (since = "3.22")]
		public void popup ();
		[Version (since = "3.20")]
		public void set_constrain_to (Gtk.PopoverConstraint constraint);
		[Version (since = "3.18")]
		public void set_default_widget (Gtk.Widget? widget);
		[Version (since = "3.12")]
		public void set_modal (bool modal);
		[Version (since = "3.12")]
		public void set_pointing_to (Gdk.Rectangle rect);
		[Version (since = "3.12")]
		public void set_position (Gtk.PositionType position);
		[Version (since = "3.12")]
		public void set_relative_to (Gtk.Widget? relative_to);
		[Version (since = "3.20")]
		public Gtk.PopoverConstraint constrain_to { get; set; }
		[Version (since = "3.12")]
		public bool modal { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public Gdk.Rectangle pointing_to { get; set; }
		[Version (since = "3.12")]
		public Gtk.PositionType position { get; set; }
		[Version (since = "3.12")]
		public Gtk.Widget relative_to { get; set; }
		public virtual signal void closed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_popover_accessible_get_type ()")]
	public class PopoverAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected PopoverAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_popover_menu_get_type ()")]
	public class PopoverMenu : Gtk.Popover, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.16")]
		public PopoverMenu ();
		[Version (since = "3.16")]
		public void open_submenu (string name);
		[NoAccessorMethod]
		public string visible_submenu { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_context_get_type ()")]
	public class PrintContext : GLib.Object {
		[CCode (has_construct_function = false)]
		protected PrintContext ();
		[Version (since = "2.10")]
		public Pango.Context create_pango_context ();
		[Version (since = "2.10")]
		public Pango.Layout create_pango_layout ();
		[Version (since = "2.10")]
		public unowned Cairo.Context get_cairo_context ();
		[Version (since = "2.10")]
		public double get_dpi_x ();
		[Version (since = "2.10")]
		public double get_dpi_y ();
		[Version (since = "2.20")]
		public bool get_hard_margins (out double top, out double bottom, out double left, out double right);
		[Version (since = "2.10")]
		public double get_height ();
		[Version (since = "2.10")]
		public unowned Gtk.PageSetup get_page_setup ();
		[Version (since = "2.10")]
		public unowned Pango.FontMap get_pango_fontmap ();
		[Version (since = "2.10")]
		public double get_width ();
		[Version (since = "2.10")]
		public void set_cairo_context (Cairo.Context cr, double dpi_x, double dpi_y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_operation_get_type ()")]
	public class PrintOperation : GLib.Object, Gtk.PrintOperationPreview {
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PrintOperation ();
		[Version (since = "2.10")]
		public void cancel ();
		[Version (since = "2.16")]
		public void draw_page_finish ();
		[Version (since = "2.10")]
		public unowned Gtk.PageSetup get_default_page_setup ();
		[Version (since = "2.18")]
		public bool get_embed_page_setup ();
		[Version (since = "2.10")]
		public void get_error () throws GLib.Error;
		[Version (since = "2.18")]
		public bool get_has_selection ();
		[Version (since = "2.18")]
		public int get_n_pages_to_print ();
		[Version (since = "2.10")]
		public unowned Gtk.PrintSettings get_print_settings ();
		[Version (since = "2.10")]
		public Gtk.PrintStatus get_status ();
		[Version (since = "2.10")]
		public unowned string get_status_string ();
		[Version (since = "2.18")]
		public bool get_support_selection ();
		[Version (since = "2.10")]
		public bool is_finished ();
		[Version (since = "2.10")]
		public Gtk.PrintOperationResult run (Gtk.PrintOperationAction action, Gtk.Window? parent) throws GLib.Error;
		[Version (since = "2.10")]
		public void set_allow_async (bool allow_async);
		[Version (since = "2.10")]
		public void set_current_page (int current_page);
		[Version (since = "2.10")]
		public void set_custom_tab_label (string? label);
		[Version (since = "2.10")]
		public void set_default_page_setup (Gtk.PageSetup? default_page_setup);
		[Version (since = "2.16")]
		public void set_defer_drawing ();
		[Version (since = "2.18")]
		public void set_embed_page_setup (bool embed);
		[Version (since = "2.10")]
		public void set_export_filename (string filename);
		[Version (since = "2.18")]
		public void set_has_selection (bool has_selection);
		[Version (since = "2.10")]
		public void set_job_name (string job_name);
		[Version (since = "2.10")]
		public void set_n_pages (int n_pages);
		[Version (since = "2.10")]
		public void set_print_settings (Gtk.PrintSettings? print_settings);
		[Version (since = "2.10")]
		public void set_show_progress (bool show_progress);
		[Version (since = "2.18")]
		public void set_support_selection (bool support_selection);
		[Version (since = "2.10")]
		public void set_track_print_status (bool track_status);
		[Version (since = "2.10")]
		public void set_unit (Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_use_full_page (bool full_page);
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool allow_async { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public int current_page { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string custom_tab_label { owned get; set; }
		[Version (since = "2.10")]
		public Gtk.PageSetup default_page_setup { get; set; }
		[Version (since = "2.18")]
		public bool embed_page_setup { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string export_filename { owned get; set; }
		[Version (since = "2.18")]
		public bool has_selection { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string job_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public int n_pages { get; set; }
		[Version (since = "2.18")]
		public int n_pages_to_print { get; }
		[Version (since = "2.10")]
		public Gtk.PrintSettings print_settings { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool show_progress { get; set; }
		[Version (since = "2.10")]
		public Gtk.PrintStatus status { get; }
		[Version (since = "2.10")]
		public string status_string { get; }
		[Version (since = "2.18")]
		public bool support_selection { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool track_print_status { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public Gtk.Unit unit { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool use_full_page { get; set; }
		[Version (since = "2.10")]
		public virtual signal void begin_print (Gtk.PrintContext context);
		[Version (since = "2.10")]
		public virtual signal unowned GLib.Object create_custom_widget ();
		[Version (since = "2.10")]
		public virtual signal void custom_widget_apply (Gtk.Widget widget);
		[Version (since = "2.10")]
		public virtual signal void done (Gtk.PrintOperationResult result);
		[Version (since = "2.10")]
		public virtual signal void draw_page (Gtk.PrintContext context, int page_nr);
		[Version (since = "2.10")]
		public virtual signal void end_print (Gtk.PrintContext context);
		[Version (since = "2.10")]
		public virtual signal bool paginate (Gtk.PrintContext context);
		[Version (since = "2.10")]
		public virtual signal bool preview (Gtk.PrintOperationPreview preview, Gtk.PrintContext context, Gtk.Window? parent);
		[Version (since = "2.10")]
		public virtual signal void request_page_setup (Gtk.PrintContext context, int page_nr, Gtk.PageSetup setup);
		[Version (since = "2.10")]
		public virtual signal void status_changed ();
		[Version (since = "2.18")]
		public virtual signal void update_custom_widget (Gtk.Widget widget, Gtk.PageSetup setup, Gtk.PrintSettings settings);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_settings_get_type ()")]
	public class PrintSettings : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public PrintSettings ();
		[Version (since = "2.10")]
		public Gtk.PrintSettings copy ();
		[Version (since = "2.10")]
		public void @foreach (Gtk.PrintSettingsFunc func);
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public PrintSettings.from_file (string file_name) throws GLib.Error;
		[CCode (has_construct_function = false)]
		[Version (since = "3.22")]
		public PrintSettings.from_gvariant (GLib.Variant variant);
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public PrintSettings.from_key_file (GLib.KeyFile key_file, string? group_name) throws GLib.Error;
		[Version (since = "2.10")]
		public unowned string @get (string key);
		[Version (since = "2.10")]
		public bool get_bool (string key);
		[Version (since = "2.10")]
		public bool get_collate ();
		[Version (since = "2.10")]
		public unowned string get_default_source ();
		[Version (since = "2.10")]
		public unowned string get_dither ();
		[Version (since = "2.10")]
		public double get_double (string key);
		[Version (since = "2.10")]
		public double get_double_with_default (string key, double def);
		[Version (since = "2.10")]
		public Gtk.PrintDuplex get_duplex ();
		[Version (since = "2.10")]
		public unowned string get_finishings ();
		[Version (since = "2.10")]
		public int get_int (string key);
		[Version (since = "2.10")]
		public int get_int_with_default (string key, int def);
		[Version (since = "2.10")]
		public double get_length (string key, Gtk.Unit unit);
		[Version (since = "2.10")]
		public unowned string get_media_type ();
		[Version (since = "2.10")]
		public int get_n_copies ();
		[Version (since = "2.10")]
		public int get_number_up ();
		[Version (since = "2.14")]
		public Gtk.NumberUpLayout get_number_up_layout ();
		[Version (since = "2.10")]
		public Gtk.PageOrientation get_orientation ();
		[Version (since = "2.10")]
		public unowned string get_output_bin ();
		[CCode (array_length_pos = 0.1)]
		[Version (since = "2.10")]
		public Gtk.PageRange[] get_page_ranges ();
		[Version (since = "2.10")]
		public Gtk.PageSet get_page_set ();
		[Version (since = "2.10")]
		public double get_paper_height (Gtk.Unit unit);
		[Version (since = "2.10")]
		public Gtk.PaperSize get_paper_size ();
		[Version (since = "2.10")]
		public double get_paper_width (Gtk.Unit unit);
		[Version (since = "2.10")]
		public Gtk.PrintPages get_print_pages ();
		[Version (since = "2.10")]
		public unowned string get_printer ();
		[Version (since = "2.16")]
		public double get_printer_lpi ();
		[Version (since = "2.10")]
		public Gtk.PrintQuality get_quality ();
		[Version (since = "2.10")]
		public int get_resolution ();
		[Version (since = "2.16")]
		public int get_resolution_x ();
		[Version (since = "2.16")]
		public int get_resolution_y ();
		[Version (since = "2.10")]
		public bool get_reverse ();
		[Version (since = "2.10")]
		public double get_scale ();
		[Version (since = "2.10")]
		public bool get_use_color ();
		[Version (since = "2.10")]
		public bool has_key (string key);
		[Version (since = "2.14")]
		public bool load_file (string file_name) throws GLib.Error;
		[Version (since = "2.14")]
		public bool load_key_file (GLib.KeyFile key_file, string? group_name) throws GLib.Error;
		[Version (since = "2.10")]
		public void @set (string key, string? value);
		[Version (since = "2.10")]
		public void set_bool (string key, bool value);
		[Version (since = "2.10")]
		public void set_collate (bool collate);
		[Version (since = "2.10")]
		public void set_default_source (string default_source);
		[Version (since = "2.10")]
		public void set_dither (string dither);
		[Version (since = "2.10")]
		public void set_double (string key, double value);
		[Version (since = "2.10")]
		public void set_duplex (Gtk.PrintDuplex duplex);
		[Version (since = "2.10")]
		public void set_finishings (string finishings);
		[Version (since = "2.10")]
		public void set_int (string key, int value);
		[Version (since = "2.10")]
		public void set_length (string key, double value, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_media_type (string media_type);
		[Version (since = "2.10")]
		public void set_n_copies (int num_copies);
		[Version (since = "2.10")]
		public void set_number_up (int number_up);
		[Version (since = "2.14")]
		public void set_number_up_layout (Gtk.NumberUpLayout number_up_layout);
		[Version (since = "2.10")]
		public void set_orientation (Gtk.PageOrientation orientation);
		[Version (since = "2.10")]
		public void set_output_bin (string output_bin);
		[Version (since = "2.10")]
		public void set_page_ranges ([CCode (array_length_cname = "num_ranges", array_length_pos = 1.1)] Gtk.PageRange[] page_ranges);
		[Version (since = "2.10")]
		public void set_page_set (Gtk.PageSet page_set);
		[Version (since = "2.10")]
		public void set_paper_height (double height, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_paper_size (Gtk.PaperSize paper_size);
		[Version (since = "2.10")]
		public void set_paper_width (double width, Gtk.Unit unit);
		[Version (since = "2.10")]
		public void set_print_pages (Gtk.PrintPages pages);
		[Version (since = "2.10")]
		public void set_printer (string printer);
		[Version (since = "2.16")]
		public void set_printer_lpi (double lpi);
		[Version (since = "2.10")]
		public void set_quality (Gtk.PrintQuality quality);
		[Version (since = "2.10")]
		public void set_resolution (int resolution);
		[Version (since = "2.16")]
		public void set_resolution_xy (int resolution_x, int resolution_y);
		[Version (since = "2.10")]
		public void set_reverse (bool reverse);
		[Version (since = "2.10")]
		public void set_scale (double scale);
		[Version (since = "2.10")]
		public void set_use_color (bool use_color);
		[Version (since = "2.12")]
		public bool to_file (string file_name) throws GLib.Error;
		[CCode (returns_floating_reference = true)]
		[Version (since = "3.22")]
		public GLib.Variant to_gvariant ();
		[Version (since = "2.12")]
		public void to_key_file (GLib.KeyFile key_file, string group_name);
		[Version (since = "2.10")]
		public void unset (string key);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_progress_bar_get_type ()")]
	public class ProgressBar : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ProgressBar ();
		[Version (since = "2.6")]
		public Pango.EllipsizeMode get_ellipsize ();
		public double get_fraction ();
		public bool get_inverted ();
		public double get_pulse_step ();
		[Version (since = "3.0")]
		public bool get_show_text ();
		public unowned string? get_text ();
		public void pulse ();
		[Version (since = "2.6")]
		public void set_ellipsize (Pango.EllipsizeMode mode);
		public void set_fraction (double fraction);
		public void set_inverted (bool inverted);
		public void set_pulse_step (double fraction);
		[Version (since = "3.0")]
		public void set_show_text (bool show_text);
		public void set_text (string? text);
		[Version (since = "2.6")]
		public Pango.EllipsizeMode ellipsize { get; set; }
		public double fraction { get; set; }
		public bool inverted { get; set; }
		public double pulse_step { get; set; }
		[Version (since = "3.0")]
		public bool show_text { get; set; }
		public string text { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_progress_bar_accessible_get_type ()")]
	public class ProgressBarAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ProgressBarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_button_get_type ()")]
	public class RadioButton : Gtk.CheckButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton (GLib.SList<Gtk.RadioButton>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.from_widget (Gtk.RadioButton? radio_group_member);
		public unowned GLib.SList<Gtk.RadioButton> get_group ();
		[Version (since = "3.0")]
		public void join_group (Gtk.RadioButton? group_source);
		public void set_group (GLib.SList<Gtk.RadioButton>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_label (GLib.SList<Gtk.RadioButton>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_label_from_widget (Gtk.RadioButton? radio_group_member, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_mnemonic (GLib.SList<Gtk.RadioButton>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioButton.with_mnemonic_from_widget (Gtk.RadioButton? radio_group_member, string label);
		public Gtk.RadioButton group { set; }
		[Version (since = "2.4")]
		public virtual signal void group_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_radio_button_accessible_get_type ()")]
	public class RadioButtonAccessible : Gtk.ToggleButtonAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected RadioButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_menu_item_get_type ()")]
	public class RadioMenuItem : Gtk.CheckMenuItem, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem (GLib.SList<Gtk.RadioMenuItem>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public RadioMenuItem.from_widget (Gtk.RadioMenuItem? group);
		public unowned GLib.SList<Gtk.RadioMenuItem> get_group ();
		[Version (since = "3.18")]
		public void join_group (Gtk.RadioMenuItem? group_source);
		public void set_group (GLib.SList<Gtk.RadioMenuItem>? group);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_label (GLib.SList<Gtk.RadioMenuItem>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public RadioMenuItem.with_label_from_widget (Gtk.RadioMenuItem? group, string? label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public RadioMenuItem.with_mnemonic (GLib.SList<Gtk.RadioMenuItem>? group, string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.4")]
		public RadioMenuItem.with_mnemonic_from_widget (Gtk.RadioMenuItem? group, string? label);
		[Version (since = "2.8")]
		public Gtk.RadioMenuItem group { set; }
		public virtual signal void group_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_radio_menu_item_accessible_get_type ()")]
	public class RadioMenuItemAccessible : Gtk.CheckMenuItemAccessible, Atk.Action, Atk.Component, Atk.Selection {
		[CCode (has_construct_function = false)]
		protected RadioMenuItemAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_radio_tool_button_get_type ()")]
	public class RadioToolButton : Gtk.ToggleToolButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.4")]
		public RadioToolButton (GLib.SList<Gtk.RadioButton>? group);
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.4")]
		public RadioToolButton.from_widget (Gtk.RadioToolButton? group);
		[Version (since = "2.4")]
		public unowned GLib.SList<Gtk.RadioButton> get_group ();
		[Version (since = "2.4")]
		public void set_group (GLib.SList<Gtk.RadioButton>? group);
		[Version (since = "2.4")]
		public Gtk.RadioToolButton group { set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_range_get_type ()")]
	public abstract class Range : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected Range ();
		public unowned Gtk.Adjustment get_adjustment ();
		[Version (since = "2.12")]
		public double get_fill_level ();
		[Version (since = "2.18")]
		public bool get_flippable ();
		public bool get_inverted ();
		[Version (since = "2.10")]
		public Gtk.SensitivityType get_lower_stepper_sensitivity ();
		[NoWrapper]
		public virtual Gtk.Border get_range_border ();
		[Version (since = "2.20")]
		public Gdk.Rectangle get_range_rect ();
		[NoWrapper]
		public virtual void get_range_size_request (Gtk.Orientation orientation, out int minimum, out int natural);
		[Version (since = "2.12")]
		public bool get_restrict_to_fill_level ();
		[Version (since = "2.24")]
		public int get_round_digits ();
		[Version (since = "2.12")]
		public bool get_show_fill_level ();
		[Version (since = "2.20")]
		public void get_slider_range (out int slider_start, out int slider_end);
		[Version (since = "2.20")]
		public bool get_slider_size_fixed ();
		[Version (since = "2.10")]
		public Gtk.SensitivityType get_upper_stepper_sensitivity ();
		public double get_value ();
		public void set_adjustment (Gtk.Adjustment adjustment);
		[Version (since = "2.12")]
		public void set_fill_level (double fill_level);
		[Version (since = "2.18")]
		public void set_flippable (bool flippable);
		public void set_increments (double step, double page);
		public void set_inverted (bool setting);
		[Version (since = "2.10")]
		public void set_lower_stepper_sensitivity (Gtk.SensitivityType sensitivity);
		public void set_range (double min, double max);
		[Version (since = "2.12")]
		public void set_restrict_to_fill_level (bool restrict_to_fill_level);
		[Version (since = "2.24")]
		public void set_round_digits (int round_digits);
		[Version (since = "2.12")]
		public void set_show_fill_level (bool show_fill_level);
		[Version (since = "2.20")]
		public void set_slider_size_fixed (bool size_fixed);
		[Version (since = "2.10")]
		public void set_upper_stepper_sensitivity (Gtk.SensitivityType sensitivity);
		public void set_value (double value);
		public Gtk.Adjustment adjustment { get; set construct; }
		[Version (since = "2.12")]
		public double fill_level { get; set; }
		public bool inverted { get; set; }
		public Gtk.SensitivityType lower_stepper_sensitivity { get; set; }
		[Version (since = "2.12")]
		public bool restrict_to_fill_level { get; set; }
		[Version (since = "2.24")]
		public int round_digits { get; set; }
		[Version (since = "2.12")]
		public bool show_fill_level { get; set; }
		public Gtk.SensitivityType upper_stepper_sensitivity { get; set; }
		public virtual signal void adjust_bounds (double new_value);
		[Version (since = "2.6")]
		public virtual signal bool change_value (Gtk.ScrollType scroll, double new_value);
		public virtual signal void move_slider (Gtk.ScrollType scroll);
		public virtual signal void value_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_range_accessible_get_type ()")]
	public class RangeAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected RangeAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_dialog_get_type ()")]
	public class RecentChooserDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserDialog (string? title, Gtk.Window? parent, ...);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserDialog.for_manager (string? title, Gtk.Window? parent, Gtk.RecentManager manager, ...);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_menu_get_type ()")]
	public class RecentChooserMenu : Gtk.Menu, Atk.Implementor, Gtk.Buildable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserMenu ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserMenu.for_manager (Gtk.RecentManager manager);
		[Version (since = "2.10")]
		public bool get_show_numbers ();
		[Version (since = "2.10")]
		public void set_show_numbers (bool show_numbers);
		[Version (since = "2.10")]
		public bool show_numbers { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_widget_get_type ()")]
	public class RecentChooserWidget : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.RecentChooser {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserWidget ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.10")]
		public RecentChooserWidget.for_manager (Gtk.RecentManager manager);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_filter_get_type ()")]
	public class RecentFilter : GLib.InitiallyUnowned, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "2.10")]
		public RecentFilter ();
		[Version (since = "2.10")]
		public void add_age (int days);
		[Version (since = "2.10")]
		public void add_application (string application);
		[Version (since = "2.10")]
		public void add_custom (Gtk.RecentFilterFlags needed, owned Gtk.RecentFilterFunc func);
		[Version (since = "2.10")]
		public void add_group (string group);
		[Version (since = "2.10")]
		public void add_mime_type (string mime_type);
		[Version (since = "2.10")]
		public void add_pattern (string pattern);
		[Version (since = "2.10")]
		public void add_pixbuf_formats ();
		[Version (since = "2.10")]
		public bool filter (Gtk.RecentFilterInfo filter_info);
		[CCode (cname = "gtk_recent_filter_get_name")]
		[Version (since = "2.10")]
		public unowned string? get_filter_name ();
		[Version (since = "2.10")]
		public Gtk.RecentFilterFlags get_needed ();
		[CCode (cname = "gtk_recent_filter_set_name")]
		[Version (since = "2.10")]
		public void set_filter_name (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_recent_info_ref", type_id = "gtk_recent_info_get_type ()", unref_function = "gtk_recent_info_unref")]
	[Compact]
	[Version (since = "2.10")]
	public class RecentInfo {
		public GLib.AppInfo? create_app_info (string? app_name) throws GLib.Error;
		public bool exists ();
		public time_t get_added ();
		public int get_age ();
		public bool get_application_info (string app_name, out unowned string app_exec, out uint count, [CCode (type = "time_t*")] out time_t time_);
		[CCode (array_length_pos = 0.1, array_length_type = "gsize", array_null_terminated = true)]
		public string[] get_applications ();
		public unowned string get_description ();
		public unowned string get_display_name ();
		[Version (since = "2.22")]
		public GLib.Icon? get_gicon ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize", array_null_terminated = true)]
		public string[] get_groups ();
		public Gdk.Pixbuf? get_icon (int size);
		public unowned string get_mime_type ();
		public time_t get_modified ();
		public bool get_private_hint ();
		public string get_short_name ();
		public unowned string get_uri ();
		public string? get_uri_display ();
		public time_t get_visited ();
		public bool has_application (string app_name);
		public bool has_group (string group_name);
		public bool is_local ();
		public string last_application ();
		public bool match (Gtk.RecentInfo info_b);
		public Gtk.RecentInfo @ref ();
		public void unref ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_manager_get_type ()")]
	[Version (since = "2.10")]
	public class RecentManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public RecentManager ();
		public bool add_full (string uri, Gtk.RecentData recent_data);
		public bool add_item (string uri);
		public static unowned Gtk.RecentManager get_default ();
		public GLib.List<Gtk.RecentInfo> get_items ();
		public bool has_item (string uri);
		public Gtk.RecentInfo? lookup_item (string uri) throws GLib.Error;
		public bool move_item (string uri, string? new_uri) throws GLib.Error;
		public int purge_items () throws GLib.Error;
		public bool remove_item (string uri) throws GLib.Error;
		[NoAccessorMethod]
		public string filename { owned get; construct; }
		[NoAccessorMethod]
		public int size { get; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_renderer_cell_accessible_get_type ()")]
	public class RendererCellAccessible : Gtk.CellAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false, type = "AtkObject*")]
		public RendererCellAccessible (Gtk.CellRenderer renderer);
		[NoAccessorMethod]
		public Gtk.CellRenderer renderer { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_revealer_get_type ()")]
	public class Revealer : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public Revealer ();
		[Version (since = "3.10")]
		public bool get_child_revealed ();
		[Version (since = "3.10")]
		public bool get_reveal_child ();
		[Version (since = "3.10")]
		public uint get_transition_duration ();
		[Version (since = "3.10")]
		public Gtk.RevealerTransitionType get_transition_type ();
		[Version (since = "3.10")]
		public void set_reveal_child (bool reveal_child);
		[Version (since = "3.10")]
		public void set_transition_duration (uint duration);
		[Version (since = "3.10")]
		public void set_transition_type (Gtk.RevealerTransitionType transition);
		public bool child_revealed { get; }
		public bool reveal_child { get; set construct; }
		public uint transition_duration { get; set construct; }
		public Gtk.RevealerTransitionType transition_type { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scale_get_type ()")]
	public class Scale : Gtk.Range, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Scale (Gtk.Orientation orientation, Gtk.Adjustment? adjustment);
		[Version (since = "2.16")]
		public void add_mark (double value, Gtk.PositionType position, string? markup);
		[Version (since = "2.16")]
		public void clear_marks ();
		public int get_digits ();
		public bool get_draw_value ();
		[Version (since = "3.4")]
		public bool get_has_origin ();
		[Version (since = "2.4")]
		public unowned Pango.Layout? get_layout ();
		[Version (since = "2.4")]
		public virtual void get_layout_offsets (out int x, out int y);
		public Gtk.PositionType get_value_pos ();
		public void set_digits (int digits);
		public void set_draw_value (bool draw_value);
		[Version (since = "3.4")]
		public void set_has_origin (bool has_origin);
		public void set_value_pos (Gtk.PositionType pos);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Scale.with_range (Gtk.Orientation orientation, double min, double max, double step);
		public int digits { get; set; }
		public virtual bool draw_value { get; set; }
		public bool has_origin { get; set; }
		public Gtk.PositionType value_pos { get; set; }
		public virtual signal string format_value (double value);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scale_accessible_get_type ()")]
	public class ScaleAccessible : Gtk.RangeAccessible, Atk.Component, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ScaleAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scale_button_get_type ()")]
	public class ScaleButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.12")]
		public ScaleButton ([CCode (type = "GtkIconSize")] Gtk.IconSize size, double min = 0.0, double max = 100.0, double step = 2.0, [CCode (array_length = false, array_null_terminated = true)] string[]? icons = null);
		[Version (since = "2.12")]
		public unowned Gtk.Adjustment get_adjustment ();
		[Version (since = "2.14")]
		public unowned Gtk.Button get_minus_button ();
		[Version (since = "2.14")]
		public unowned Gtk.Button get_plus_button ();
		[Version (since = "2.14")]
		public unowned Gtk.Widget get_popup ();
		[Version (since = "2.12")]
		public double get_value ();
		[Version (since = "2.12")]
		public void set_adjustment (Gtk.Adjustment adjustment);
		[Version (since = "2.12")]
		public void set_icons ([CCode (array_length = false, array_null_terminated = true)] string[] icons);
		[Version (since = "2.12")]
		public void set_value (double value);
		public Gtk.Adjustment adjustment { get; set; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public string[] icons { owned get; set; }
		[NoAccessorMethod]
		public Gtk.IconSize size { get; set; }
		public double value { get; set; }
		[Version (since = "2.12")]
		public signal void popdown ();
		[Version (since = "2.12")]
		public signal void popup ();
		[Version (since = "2.12")]
		public virtual signal void value_changed (double value);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scale_button_accessible_get_type ()")]
	public class ScaleButtonAccessible : Gtk.ButtonAccessible, Atk.Action, Atk.Component, Atk.Image, Atk.Value {
		[CCode (has_construct_function = false)]
		protected ScaleButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scrollbar_get_type ()")]
	public class Scrollbar : Gtk.Range, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Scrollbar (Gtk.Orientation orientation, Gtk.Adjustment? adjustment);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_scrolled_window_get_type ()")]
	public class ScrolledWindow : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ScrolledWindow (Gtk.Adjustment? hadjustment, Gtk.Adjustment? vadjustment);
		[Version (since = "3.4")]
		public bool get_capture_button_press ();
		public unowned Gtk.Adjustment get_hadjustment ();
		[Version (since = "2.8")]
		public unowned Gtk.Widget get_hscrollbar ();
		[Version (since = "3.4")]
		public bool get_kinetic_scrolling ();
		[Version (since = "3.22")]
		public int get_max_content_height ();
		[Version (since = "3.22")]
		public int get_max_content_width ();
		[Version (since = "3.0")]
		public int get_min_content_height ();
		[Version (since = "3.0")]
		public int get_min_content_width ();
		[Version (since = "3.16")]
		public bool get_overlay_scrolling ();
		public Gtk.CornerType get_placement ();
		public void get_policy (out Gtk.PolicyType hscrollbar_policy, out Gtk.PolicyType vscrollbar_policy);
		[Version (since = "3.22")]
		public bool get_propagate_natural_height ();
		[Version (since = "3.22")]
		public bool get_propagate_natural_width ();
		public Gtk.ShadowType get_shadow_type ();
		public unowned Gtk.Adjustment get_vadjustment ();
		[Version (since = "2.8")]
		public unowned Gtk.Widget get_vscrollbar ();
		[Version (since = "3.4")]
		public void set_capture_button_press (bool capture_button_press);
		public void set_hadjustment (Gtk.Adjustment hadjustment);
		[Version (since = "3.4")]
		public void set_kinetic_scrolling (bool kinetic_scrolling);
		[Version (since = "3.22")]
		public void set_max_content_height (int height);
		[Version (since = "3.22")]
		public void set_max_content_width (int width);
		[Version (since = "3.0")]
		public void set_min_content_height (int height);
		[Version (since = "3.0")]
		public void set_min_content_width (int width);
		[Version (since = "3.16")]
		public void set_overlay_scrolling (bool overlay_scrolling);
		public void set_placement (Gtk.CornerType window_placement);
		public void set_policy (Gtk.PolicyType hscrollbar_policy, Gtk.PolicyType vscrollbar_policy);
		[Version (since = "3.22")]
		public void set_propagate_natural_height (bool propagate);
		[Version (since = "3.22")]
		public void set_propagate_natural_width (bool propagate);
		public void set_shadow_type (Gtk.ShadowType type);
		public void set_vadjustment (Gtk.Adjustment vadjustment);
		[Version (since = "2.10")]
		public void unset_placement ();
		public Gtk.Adjustment hadjustment { get; set construct; }
		[NoAccessorMethod]
		public Gtk.PolicyType hscrollbar_policy { get; set; }
		[Version (since = "3.4")]
		public bool kinetic_scrolling { get; set; }
		[Version (since = "3.22")]
		public int max_content_height { get; set; }
		[Version (since = "3.22")]
		public int max_content_width { get; set; }
		[Version (since = "3.0")]
		public int min_content_height { get; set; }
		[Version (since = "3.0")]
		public int min_content_width { get; set; }
		[Version (since = "3.16")]
		public bool overlay_scrolling { get; set; }
		[Version (since = "3.22")]
		public bool propagate_natural_height { get; set; }
		[Version (since = "3.22")]
		public bool propagate_natural_width { get; set; }
		public Gtk.ShadowType shadow_type { get; set; }
		public Gtk.Adjustment vadjustment { get; set construct; }
		[NoAccessorMethod]
		public Gtk.PolicyType vscrollbar_policy { get; set; }
		[NoAccessorMethod]
		public Gtk.CornerType window_placement { get; set; }
		[Version (since = "3.16")]
		public signal void edge_overshot (Gtk.PositionType pos);
		[Version (since = "3.16")]
		public signal void edge_reached (Gtk.PositionType pos);
		public virtual signal void move_focus_out (Gtk.DirectionType direction);
		public virtual signal bool scroll_child (Gtk.ScrollType scroll, bool horizontal);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_scrolled_window_accessible_get_type ()")]
	public class ScrolledWindowAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected ScrolledWindowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_search_bar_get_type ()")]
	public class SearchBar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public SearchBar ();
		[Version (since = "3.10")]
		public void connect_entry (Gtk.Entry entry);
		[Version (since = "3.10")]
		public bool get_search_mode ();
		[Version (since = "3.10")]
		public bool get_show_close_button ();
		[Version (since = "3.10")]
		public bool handle_event (Gdk.Event event);
		[Version (since = "3.10")]
		public void set_search_mode (bool search_mode);
		[Version (since = "3.10")]
		public void set_show_close_button (bool visible);
		[NoAccessorMethod]
		public bool search_mode_enabled { get; set; }
		public bool show_close_button { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_search_entry_get_type ()")]
	public class SearchEntry : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.6")]
		public SearchEntry ();
		[Version (since = "3.16")]
		public bool handle_event (Gdk.Event event);
		[Version (since = "3.16")]
		public virtual signal void next_match ();
		[Version (since = "3.16")]
		public virtual signal void previous_match ();
		[Version (since = "3.10")]
		public virtual signal void search_changed ();
		[Version (since = "3.16")]
		public virtual signal void stop_search ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gtk_selection_data_get_type ()")]
	[Compact]
	public class SelectionData {
		public Gtk.SelectionData copy ();
		public void free ();
		[CCode (array_length = false)]
		[Version (since = "2.14")]
		public unowned uint8[] get_data ();
		[Version (since = "2.14")]
		public Gdk.Atom get_data_type ();
		[CCode (array_length_pos = 0.1)]
		[Version (since = "3.0")]
		public unowned uint8[] get_data_with_length ();
		[Version (since = "2.14")]
		public unowned Gdk.Display get_display ();
		[Version (since = "2.14")]
		public int get_format ();
		[Version (since = "2.14")]
		public int get_length ();
		[Version (since = "2.6")]
		public Gdk.Pixbuf? get_pixbuf ();
		[Version (since = "2.16")]
		public Gdk.Atom get_selection ();
		[Version (since = "2.14")]
		public Gdk.Atom get_target ();
		public bool get_targets ([CCode (array_length_cname = "n_atoms", array_length_pos = 1.1)] out Gdk.Atom[] targets);
		public string? get_text ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "2.6")]
		public string[] get_uris ();
		public void @set (Gdk.Atom type, int format, [CCode (array_length_cname = "length", array_length_pos = 3.1)] uint8[] data);
		[Version (since = "2.6")]
		public bool set_pixbuf (Gdk.Pixbuf pixbuf);
		public bool set_text (string str, int len);
		[Version (since = "2.6")]
		public bool set_uris ([CCode (array_length = false, array_null_terminated = true)] string[] uris);
		[Version (since = "2.6")]
		public bool targets_include_image (bool writable);
		[Version (since = "2.10")]
		public bool targets_include_rich_text (Gtk.TextBuffer buffer);
		public bool targets_include_text ();
		[Version (since = "2.10")]
		public bool targets_include_uri ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_get_type ()")]
	public class Separator : Gtk.Widget, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Separator (Gtk.Orientation orientation);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_menu_item_get_type ()")]
	public class SeparatorMenuItem : Gtk.MenuItem, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SeparatorMenuItem ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_separator_tool_item_get_type ()")]
	public class SeparatorToolItem : Gtk.ToolItem, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.4")]
		public SeparatorToolItem ();
		[Version (since = "2.4")]
		public bool get_draw ();
		[Version (since = "2.4")]
		public void set_draw (bool draw);
		public bool draw { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_settings_get_type ()")]
	public class Settings : GLib.Object, Gtk.StyleProvider {
		[CCode (has_construct_function = false)]
		protected Settings ();
		public static unowned Gtk.Settings? get_default ();
		[Version (since = "2.2")]
		public static unowned Gtk.Settings get_for_screen (Gdk.Screen screen);
		[Version (since = "3.20")]
		public void reset_property (string name);
		[NoAccessorMethod]
		public bool gtk_alternative_button_order { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public bool gtk_alternative_sort_arrows { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public bool gtk_application_prefer_dark_theme { get; set; }
		[NoAccessorMethod]
		public bool gtk_cursor_blink { get; set; }
		[NoAccessorMethod]
		public int gtk_cursor_blink_time { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public int gtk_cursor_blink_timeout { get; set; }
		[NoAccessorMethod]
		public string gtk_cursor_theme_name { owned get; set; }
		[NoAccessorMethod]
		public int gtk_cursor_theme_size { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public string gtk_decoration_layout { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.12")]
		public bool gtk_dialogs_use_header { get; set; }
		[NoAccessorMethod]
		public int gtk_dnd_drag_threshold { get; set; }
		[NoAccessorMethod]
		public int gtk_double_click_distance { get; set; }
		[NoAccessorMethod]
		public int gtk_double_click_time { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public bool gtk_enable_accels { get; set; }
		[NoAccessorMethod]
		public bool gtk_enable_animations { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public bool gtk_enable_event_sounds { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public bool gtk_enable_input_feedback_sounds { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.4")]
		public bool gtk_enable_primary_paste { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public uint gtk_entry_password_hint_timeout { get; set; }
		[NoAccessorMethod]
		public bool gtk_entry_select_on_focus { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public bool gtk_error_bell { get; set; }
		[NoAccessorMethod]
		public string gtk_font_name { owned get; set; }
		[NoAccessorMethod]
		public uint gtk_fontconfig_timestamp { get; set; }
		[NoAccessorMethod]
		public string gtk_icon_theme_name { owned get; set; }
		[NoAccessorMethod]
		public string gtk_im_module { owned get; set; }
		[NoAccessorMethod]
		public string gtk_key_theme_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public bool gtk_keynav_use_caret { get; set; }
		[NoAccessorMethod]
		public bool gtk_label_select_on_focus { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.14")]
		public uint gtk_long_press_time { get; set; }
		[NoAccessorMethod]
		public string gtk_modules { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.6")]
		public bool gtk_primary_button_warps_slider { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string gtk_print_backends { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public string gtk_print_preview_command { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.8")]
		public bool gtk_recent_files_enabled { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public int gtk_recent_files_max_age { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_app_menu { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_desktop { get; set; }
		[NoAccessorMethod]
		public bool gtk_shell_shows_menubar { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.14")]
		public string gtk_sound_theme_name { owned get; set; }
		[NoAccessorMethod]
		public bool gtk_split_cursor { get; set; }
		[NoAccessorMethod]
		public string gtk_theme_name { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.14")]
		public string gtk_titlebar_double_click { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.14")]
		public string gtk_titlebar_middle_click { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.14")]
		public string gtk_titlebar_right_click { owned get; set; }
		[NoAccessorMethod]
		public int gtk_xft_antialias { get; set; }
		[NoAccessorMethod]
		public int gtk_xft_dpi { get; set; }
		[NoAccessorMethod]
		public int gtk_xft_hinting { get; set; }
		[NoAccessorMethod]
		public string gtk_xft_hintstyle { owned get; set; }
		[NoAccessorMethod]
		public string gtk_xft_rgba { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_shortcut_label_get_type ()")]
	public class ShortcutLabel : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.22")]
		public ShortcutLabel (string accelerator);
		[Version (since = "3.22")]
		public unowned string? get_accelerator ();
		[Version (since = "3.22")]
		public unowned string? get_disabled_text ();
		[Version (since = "3.22")]
		public void set_accelerator (string accelerator);
		[Version (since = "3.22")]
		public void set_disabled_text (string disabled_text);
		[Version (since = "3.22")]
		public string accelerator { get; set; }
		[Version (since = "3.22")]
		public string disabled_text { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_shortcuts_group_get_type ()")]
	public class ShortcutsGroup : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ShortcutsGroup ();
		[NoAccessorMethod]
		public Gtk.SizeGroup accel_size_group { set; }
		[NoAccessorMethod]
		public uint height { get; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		[NoAccessorMethod]
		public Gtk.SizeGroup title_size_group { set; }
		[NoAccessorMethod]
		public string view { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_shortcuts_section_get_type ()")]
	public class ShortcutsSection : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ShortcutsSection ();
		[NoAccessorMethod]
		public uint max_height { get; set; }
		[NoAccessorMethod]
		public string section_name { owned get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		[NoAccessorMethod]
		public string view_name { owned get; set; }
		public signal bool change_current_page (int object);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_shortcuts_shortcut_get_type ()")]
	public class ShortcutsShortcut : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected ShortcutsShortcut ();
		[NoAccessorMethod]
		public Gtk.SizeGroup accel_size_group { set; }
		[NoAccessorMethod]
		public string accelerator { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.22")]
		public string action_name { owned get; set; }
		[NoAccessorMethod]
		public Gtk.TextDirection direction { get; set; }
		[NoAccessorMethod]
		public GLib.Icon icon { owned get; set; }
		[NoAccessorMethod]
		public bool icon_set { get; set; }
		[NoAccessorMethod]
		public Gtk.ShortcutType shortcut_type { get; set; }
		[NoAccessorMethod]
		public string subtitle { owned get; set; }
		[NoAccessorMethod]
		public bool subtitle_set { get; set; }
		[NoAccessorMethod]
		public string title { owned get; set; }
		[NoAccessorMethod]
		public Gtk.SizeGroup title_size_group { set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_shortcuts_window_get_type ()")]
	public class ShortcutsWindow : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		protected ShortcutsWindow ();
		[NoAccessorMethod]
		public string section_name { owned get; set; }
		[NoAccessorMethod]
		public string view_name { owned get; set; }
		public virtual signal void close ();
		public virtual signal void search ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_size_group_get_type ()")]
	public class SizeGroup : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public SizeGroup (Gtk.SizeGroupMode mode);
		public void add_widget (Gtk.Widget widget);
		public Gtk.SizeGroupMode get_mode ();
		[Version (since = "2.10")]
		public unowned GLib.SList<Gtk.Widget> get_widgets ();
		public void remove_widget (Gtk.Widget widget);
		public void set_mode (Gtk.SizeGroupMode mode);
		public Gtk.SizeGroupMode mode { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class Snapshot {
		[Version (since = "3.90")]
		public Cairo.Context append_cairo_node (Graphene.Rect bounds, string name, ...);
		public void append_color_node (Gdk.RGBA color, Graphene.Rect bounds, string name, ...);
		public void append_node (Gsk.RenderNode node);
		public void append_texture_node (Gsk.Texture texture, Graphene.Rect bounds, string name, ...);
		[Version (since = "3.90")]
		public bool clips_rect (Graphene.Rect bounds);
		public void get_offset (out double x, out double y);
		[Version (since = "3.90")]
		public Gsk.RenderNode? pop ();
		[Version (since = "3.90")]
		public void pop_and_append ();
		[Version (since = "3.90")]
		public void push (bool keep_coordinates, string name, ...);
		public void push_clip (Graphene.Rect bounds, string name, ...);
		public void push_color_matrix (Graphene.Matrix color_matrix, Graphene.Vec4 color_offset, string name, ...);
		public void push_opacity (double opacity, string name, ...);
		public void push_repeat (Graphene.Rect bounds, Graphene.Rect child_bounds, string name, ...);
		public void push_rounded_clip (Gsk.RoundedRect bounds, string name, ...);
		public void push_shadow (Gsk.Shadow shadow, size_t n_shadows, string name, ...);
		public void push_transform (Graphene.Matrix transform, string name, ...);
		[Version (since = "3.90")]
		public void render_background (Gtk.StyleContext context, double x, double y, double width, double height);
		[Version (since = "3.90")]
		public void render_focus (Gtk.StyleContext context, double x, double y, double width, double height);
		[Version (since = "3.90")]
		public void render_frame (Gtk.StyleContext context, double x, double y, double width, double height);
		[Version (since = "3.90")]
		public void render_icon (Gtk.StyleContext context, Gdk.Pixbuf pixbuf, double x, double y);
		[Version (since = "3.90")]
		public void render_insertion_cursor (Gtk.StyleContext context, double x, double y, Pango.Layout layout, int index, Pango.Direction direction);
		[Version (since = "3.90")]
		public void render_layout (Gtk.StyleContext context, double x, double y, Pango.Layout layout);
		[Version (since = "3.90")]
		public void translate_2d (int x, int y);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_spin_button_get_type ()")]
	public class SpinButton : Gtk.Entry, Atk.Implementor, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinButton (Gtk.Adjustment? adjustment, double climb_rate, uint digits);
		public void configure (Gtk.Adjustment? adjustment, double climb_rate, uint digits);
		public unowned Gtk.Adjustment get_adjustment ();
		public uint get_digits ();
		public void get_increments (out double step, out double page);
		public bool get_numeric ();
		public void get_range (out double min, out double max);
		public bool get_snap_to_ticks ();
		public Gtk.SpinButtonUpdatePolicy get_update_policy ();
		public double get_value ();
		public int get_value_as_int ();
		public bool get_wrap ();
		public void set_adjustment (Gtk.Adjustment adjustment);
		public void set_digits (uint digits);
		public void set_increments (double step, double page);
		public void set_numeric (bool numeric);
		public void set_range (double min, double max);
		public void set_snap_to_ticks (bool snap_to_ticks);
		public void set_update_policy (Gtk.SpinButtonUpdatePolicy policy);
		public void set_value (double value);
		public void set_wrap (bool wrap);
		public void spin (Gtk.SpinType direction, double increment);
		public void update ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public SpinButton.with_range (double min, double max, double step);
		public Gtk.Adjustment adjustment { get; set; }
		[NoAccessorMethod]
		public double climb_rate { get; set; }
		public uint digits { get; set; }
		public bool numeric { get; set; }
		public bool snap_to_ticks { get; set; }
		public Gtk.SpinButtonUpdatePolicy update_policy { get; set; }
		public double value { get; set; }
		public bool wrap { get; set; }
		public virtual signal void change_value (Gtk.ScrollType scroll);
		public virtual signal int input (out double new_value);
		public virtual signal bool output ();
		public virtual signal void value_changed ();
		[Version (since = "2.10")]
		public virtual signal void wrapped ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_spin_button_accessible_get_type ()")]
	public class SpinButtonAccessible : Gtk.EntryAccessible, Atk.Action, Atk.Component, Atk.EditableText, Atk.Text, Atk.Value {
		[CCode (has_construct_function = false)]
		protected SpinButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_spinner_get_type ()")]
	public class Spinner : Gtk.Widget, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.20")]
		public Spinner ();
		[Version (since = "2.20")]
		public void start ();
		[Version (since = "2.20")]
		public void stop ();
		[NoAccessorMethod]
		public bool active { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_spinner_accessible_get_type ()")]
	public class SpinnerAccessible : Gtk.WidgetAccessible, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected SpinnerAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_stack_get_type ()")]
	public class Stack : Gtk.Container, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public Stack ();
		[Version (since = "3.10")]
		public void add_named (Gtk.Widget child, string name);
		[Version (since = "3.10")]
		public void add_titled (Gtk.Widget child, string name, string title);
		[Version (since = "3.12")]
		public unowned Gtk.Widget? get_child_by_name (string name);
		[Version (since = "3.16")]
		public bool get_hhomogeneous ();
		[Version (since = "3.10")]
		public bool get_homogeneous ();
		[Version (since = "3.18")]
		public bool get_interpolate_size ();
		[Version (since = "3.10")]
		public uint get_transition_duration ();
		[Version (since = "3.12")]
		public bool get_transition_running ();
		[Version (since = "3.10")]
		public Gtk.StackTransitionType get_transition_type ();
		[Version (since = "3.16")]
		public bool get_vhomogeneous ();
		[Version (since = "3.10")]
		public unowned Gtk.Widget? get_visible_child ();
		[Version (since = "3.10")]
		public unowned string? get_visible_child_name ();
		[Version (since = "3.16")]
		public void set_hhomogeneous (bool hhomogeneous);
		[Version (since = "3.10")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "3.18")]
		public void set_interpolate_size (bool interpolate_size);
		[Version (since = "3.10")]
		public void set_transition_duration (uint duration);
		[Version (since = "3.10")]
		public void set_transition_type (Gtk.StackTransitionType transition);
		[Version (since = "3.16")]
		public void set_vhomogeneous (bool vhomogeneous);
		[Version (since = "3.10")]
		public void set_visible_child (Gtk.Widget child);
		[Version (since = "3.10")]
		public void set_visible_child_full (string name, Gtk.StackTransitionType transition);
		[Version (since = "3.10")]
		public void set_visible_child_name (string name);
		[Version (since = "3.16")]
		public bool hhomogeneous { get; set; }
		public bool homogeneous { get; set; }
		public bool interpolate_size { get; set; }
		public uint transition_duration { get; set; }
		public bool transition_running { get; }
		public Gtk.StackTransitionType transition_type { get; set; }
		[Version (since = "3.16")]
		public bool vhomogeneous { get; set; }
		public Gtk.Widget visible_child { get; set; }
		public string visible_child_name { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_stack_accessible_get_type ()")]
	public class StackAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected StackAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_stack_sidebar_get_type ()")]
	public class StackSidebar : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.16")]
		public StackSidebar ();
		[Version (since = "3.16")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "3.16")]
		public void set_stack (Gtk.Stack stack);
		public Gtk.Stack stack { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_stack_switcher_get_type ()")]
	public class StackSwitcher : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.10")]
		public StackSwitcher ();
		[Version (since = "3.10")]
		public unowned Gtk.Stack? get_stack ();
		[Version (since = "3.10")]
		public void set_stack (Gtk.Stack? stack);
		[NoAccessorMethod]
		[Version (since = "3.20")]
		public int icon_size { get; set; }
		public Gtk.Stack stack { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_statusbar_get_type ()")]
	public class Statusbar : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Statusbar ();
		public uint get_context_id (string context_description);
		[Version (since = "2.20")]
		public unowned Gtk.Box get_message_area ();
		public void pop (uint context_id);
		public uint push (uint context_id, string text);
		public void remove (uint context_id, uint message_id);
		[Version (since = "2.22")]
		public void remove_all (uint context_id);
		public virtual signal void text_popped (uint context_id, string text);
		public virtual signal void text_pushed (uint context_id, string text);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_statusbar_accessible_get_type ()")]
	public class StatusbarAccessible : Gtk.ContainerAccessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected StatusbarAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_style_context_get_type ()")]
	public class StyleContext : GLib.Object {
		[CCode (has_construct_function = false)]
		public StyleContext ();
		[Version (since = "3.0")]
		public void add_class (string class_name);
		[Version (since = "3.0")]
		public void add_provider (Gtk.StyleProvider provider, uint priority);
		[Version (since = "3.0")]
		public static void add_provider_for_screen (Gdk.Screen screen, Gtk.StyleProvider provider, uint priority);
		[Version (since = "3.0")]
		public void @get (...);
		[Version (deprecated = true, deprecated_since = "3.16", since = "3.0")]
		public Gdk.RGBA get_background_color ();
		[Version (since = "3.0")]
		public Gtk.Border get_border ();
		[Version (deprecated = true, deprecated_since = "3.16", since = "3.0")]
		public Gdk.RGBA get_border_color ();
		[Version (since = "3.0")]
		public Gdk.RGBA get_color ();
		[Version (since = "3.8")]
		public unowned Gdk.FrameClock? get_frame_clock ();
		[Version (since = "3.0")]
		public Gtk.Border get_margin ();
		[Version (since = "3.0")]
		public Gtk.Border get_padding ();
		[Version (since = "3.4")]
		public unowned Gtk.StyleContext? get_parent ();
		[Version (since = "3.0")]
		public unowned Gtk.WidgetPath get_path ();
		[Version (since = "3.0")]
		public GLib.Value get_property (string property);
		[Version (since = "3.10")]
		public int get_scale ();
		public unowned Gdk.Screen get_screen ();
		public unowned Gtk.CssSection? get_section (string property);
		[Version (since = "3.0")]
		public Gtk.StateFlags get_state ();
		[Version (since = "3.0")]
		public void get_style (...);
		public void get_style_property (string property_name, GLib.Value value);
		[Version (since = "3.0")]
		public void get_style_valist ([CCode (type = "va_list")] va_list args);
		[Version (since = "3.0")]
		public void get_valist ([CCode (type = "va_list")] va_list args);
		[Version (since = "3.0")]
		public bool has_class (string class_name);
		[Version (since = "3.0")]
		public GLib.List<weak string> list_classes ();
		public bool lookup_color (string color_name, out Gdk.RGBA color);
		[Version (since = "3.0")]
		public void remove_class (string class_name);
		[Version (since = "3.0")]
		public void remove_provider (Gtk.StyleProvider provider);
		[Version (since = "3.0")]
		public static void remove_provider_for_screen (Gdk.Screen screen, Gtk.StyleProvider provider);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_activity")]
		[Version (since = "3.0")]
		public void render_activity (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_arrow")]
		[Version (since = "3.0")]
		public void render_arrow (Cairo.Context cr, double angle, double x, double y, double size);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_background")]
		[Version (since = "3.0.")]
		public void render_background (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_background_get_clip")]
		[Version (since = "3.20")]
		public Gdk.Rectangle render_background_get_clip (double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_check")]
		[Version (since = "3.0")]
		public void render_check (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_expander")]
		[Version (since = "3.0")]
		public void render_expander (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_focus")]
		[Version (since = "3.0")]
		public void render_focus (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_frame")]
		[Version (since = "3.0")]
		public void render_frame (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_frame_gap")]
		[Version (since = "3.0")]
		public void render_frame_gap (Cairo.Context cr, double x, double y, double width, double height, Gtk.PositionType gap_side, double xy0_gap, double xy1_gap);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_handle")]
		[Version (since = "3.0")]
		public void render_handle (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_icon")]
		[Version (since = "3.2")]
		public void render_icon (Cairo.Context cr, Gdk.Pixbuf pixbuf, double x, double y);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_icon_surface")]
		[Version (since = "3.10")]
		public void render_icon_surface (Cairo.Context cr, Cairo.Surface surface, double x, double y);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_insertion_cursor")]
		[Version (since = "3.4")]
		public void render_insertion_cursor (Cairo.Context cr, double x, double y, Pango.Layout layout, int index, Pango.Direction direction);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_layout")]
		[Version (since = "3.0")]
		public void render_layout (Cairo.Context cr, double x, double y, Pango.Layout layout);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_line")]
		[Version (since = "3.0")]
		public void render_line (Cairo.Context cr, double x0, double y0, double x1, double y1);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_option")]
		[Version (since = "3.0")]
		public void render_option (Cairo.Context cr, double x, double y, double width, double height);
		[CCode (cheader_filename = "gtk/gtk.h", cname = "gtk_render_slider")]
		[Version (since = "3.0")]
		public void render_slider (Cairo.Context cr, double x, double y, double width, double height, Gtk.Orientation orientation);
		[Version (since = "3.0")]
		public static void reset_widgets (Gdk.Screen screen);
		[Version (since = "3.0")]
		public void restore ();
		[Version (since = "3.0")]
		public void save ();
		[Version (since = "3.8")]
		public void set_frame_clock (Gdk.FrameClock frame_clock);
		[Version (since = "3.4")]
		public void set_parent (Gtk.StyleContext? parent);
		[Version (since = "3.0")]
		public void set_path (Gtk.WidgetPath path);
		[Version (since = "3.10")]
		public void set_scale (int scale);
		[Version (since = "3.0")]
		public void set_screen (Gdk.Screen screen);
		[Version (since = "3.0")]
		public void set_state (Gtk.StateFlags flags);
		[Version (since = "3.20")]
		public string to_string (Gtk.StyleContextPrintFlags flags);
		[NoAccessorMethod]
		public Gdk.FrameClock paint_clock { owned get; set; }
		[Version (since = "3.4")]
		public Gtk.StyleContext parent { get; set; }
		public Gdk.Screen screen { get; set; }
		[Version (since = "3.0")]
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_switch_get_type ()")]
	public class Switch : Gtk.Widget, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "3.0")]
		public Switch ();
		[Version (since = "3.0")]
		public bool get_active ();
		[Version (since = "3.14")]
		public bool get_state ();
		[Version (since = "3.0")]
		public void set_active (bool is_active);
		[Version (since = "3.14")]
		public void set_state (bool state);
		public bool active { get; set; }
		[Version (since = "3.14")]
		public bool state { get; set; }
		public virtual signal void activate ();
		[Version (since = "3.14")]
		public virtual signal bool state_set (bool state);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_switch_accessible_get_type ()")]
	public class SwitchAccessible : Gtk.WidgetAccessible, Atk.Action, Atk.Component {
		[CCode (has_construct_function = false)]
		protected SwitchAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_target_list_ref", type_id = "gtk_target_list_get_type ()", unref_function = "gtk_target_list_unref")]
	[Compact]
	public class TargetList {
		[CCode (has_construct_function = false)]
		public TargetList ([CCode (array_length_cname = "ntargets", array_length_pos = 1.1, array_length_type = "guint")] Gtk.TargetEntry[]? targets);
		public void add (Gdk.Atom target, uint flags, uint info);
		[Version (since = "2.6")]
		public void add_image_targets (uint info, bool writable);
		[Version (since = "2.10")]
		public void add_rich_text_targets (uint info, bool deserializable, Gtk.TextBuffer buffer);
		public void add_table ([CCode (array_length_cname = "ntargets", array_length_pos = 1.1, array_length_type = "guint")] Gtk.TargetEntry[] targets);
		[Version (since = "2.6")]
		public void add_text_targets (uint info);
		[Version (since = "2.6")]
		public void add_uri_targets (uint info);
		public bool find (Gdk.Atom target, out uint info);
		public Gtk.TargetList @ref ();
		public void remove (Gdk.Atom target);
		public void unref ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class TextBTree {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_buffer_get_type ()")]
	public class TextBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextBuffer (Gtk.TextTagTable? table);
		[Version (since = "2.12")]
		public void add_mark (Gtk.TextMark mark, Gtk.TextIter where);
		public void add_selection_clipboard (Gtk.Clipboard clipboard);
		public void apply_tag_by_name (string name, Gtk.TextIter start, Gtk.TextIter end);
		[Version (since = "2.6")]
		public bool backspace (Gtk.TextIter iter, bool interactive, bool default_editable);
		public void copy_clipboard (Gtk.Clipboard clipboard);
		public unowned Gtk.TextChildAnchor create_child_anchor (Gtk.TextIter iter);
		public unowned Gtk.TextMark create_mark (string? mark_name, Gtk.TextIter where, bool left_gravity);
		public unowned Gtk.TextTag create_tag (string? tag_name, ...);
		public void cut_clipboard (Gtk.Clipboard clipboard, bool default_editable);
		public void @delete (ref Gtk.TextIter start, ref Gtk.TextIter end);
		public bool delete_interactive (ref Gtk.TextIter start_iter, ref Gtk.TextIter end_iter, bool default_editable);
		public void delete_mark (Gtk.TextMark mark);
		public void delete_mark_by_name (string name);
		public bool delete_selection (bool interactive, bool default_editable);
		[Version (since = "2.10")]
		public bool deserialize (Gtk.TextBuffer content_buffer, Gdk.Atom format, Gtk.TextIter iter, [CCode (array_length_cname = "length", array_length_pos = 4.1, array_length_type = "gsize")] uint8[] data) throws GLib.Error;
		[Version (since = "2.10")]
		public bool deserialize_get_can_create_tags (Gdk.Atom format);
		[Version (since = "2.10")]
		public void deserialize_set_can_create_tags (Gdk.Atom format, bool can_create_tags);
		public void get_bounds (out Gtk.TextIter start, out Gtk.TextIter end);
		public int get_char_count ();
		[Version (since = "2.10")]
		public unowned Gtk.TargetList get_copy_target_list ();
		[CCode (array_length_pos = 0.1)]
		[Version (since = "2.10")]
		public Gdk.Atom[] get_deserialize_formats ();
		public void get_end_iter (out Gtk.TextIter iter);
		[Version (since = "2.10")]
		public bool get_has_selection ();
		public unowned Gtk.TextMark get_insert ();
		public void get_iter_at_child_anchor (out Gtk.TextIter iter, Gtk.TextChildAnchor anchor);
		public void get_iter_at_line (out Gtk.TextIter iter, int line_number);
		public void get_iter_at_line_index (out Gtk.TextIter iter, int line_number, int byte_index);
		public void get_iter_at_line_offset (out Gtk.TextIter iter, int line_number, int char_offset);
		public void get_iter_at_mark (out Gtk.TextIter iter, Gtk.TextMark mark);
		public void get_iter_at_offset (out Gtk.TextIter iter, int char_offset);
		public int get_line_count ();
		public unowned Gtk.TextMark? get_mark (string name);
		public bool get_modified ();
		[Version (since = "2.10")]
		public unowned Gtk.TargetList get_paste_target_list ();
		public unowned Gtk.TextMark get_selection_bound ();
		public bool get_selection_bounds (out Gtk.TextIter start, out Gtk.TextIter end);
		[CCode (array_length_pos = 0.1)]
		[Version (since = "2.10")]
		public Gdk.Atom[] get_serialize_formats ();
		public string get_slice (Gtk.TextIter start, Gtk.TextIter end, bool include_hidden_chars);
		public void get_start_iter (out Gtk.TextIter iter);
		public unowned Gtk.TextTagTable get_tag_table ();
		public string get_text (Gtk.TextIter start, Gtk.TextIter end, bool include_hidden_chars);
		public void insert (ref Gtk.TextIter iter, string text, int len);
		public void insert_at_cursor (string text, int len);
		public bool insert_interactive (ref Gtk.TextIter iter, string text, int len, bool default_editable);
		public bool insert_interactive_at_cursor (string text, int len, bool default_editable);
		[Version (since = "3.16")]
		public void insert_markup (ref Gtk.TextIter iter, string markup, int len);
		public void insert_range (ref Gtk.TextIter iter, Gtk.TextIter start, Gtk.TextIter end);
		public bool insert_range_interactive (ref Gtk.TextIter iter, Gtk.TextIter start, Gtk.TextIter end, bool default_editable);
		public void insert_with_tags (ref Gtk.TextIter iter, string text, int len, ...);
		public void insert_with_tags_by_name (ref Gtk.TextIter iter, string text, int len, ...);
		public void move_mark (Gtk.TextMark mark, Gtk.TextIter where);
		public void move_mark_by_name (string name, Gtk.TextIter where);
		public void paste_clipboard (Gtk.Clipboard clipboard, Gtk.TextIter? override_location, bool default_editable);
		public void place_cursor (Gtk.TextIter where);
		[Version (since = "2.10")]
		public Gdk.Atom register_deserialize_format (string mime_type, owned Gtk.TextBufferDeserializeFunc function);
		[Version (since = "2.10")]
		public Gdk.Atom register_deserialize_tagset (string? tagset_name);
		[Version (since = "2.10")]
		public Gdk.Atom register_serialize_format (string mime_type, owned Gtk.TextBufferSerializeFunc function);
		[Version (since = "2.10")]
		public Gdk.Atom register_serialize_tagset (string? tagset_name);
		public void remove_all_tags (Gtk.TextIter start, Gtk.TextIter end);
		public void remove_selection_clipboard (Gtk.Clipboard clipboard);
		public void remove_tag_by_name (string name, Gtk.TextIter start, Gtk.TextIter end);
		[Version (since = "2.4")]
		public void select_range (Gtk.TextIter ins, Gtk.TextIter bound);
		[CCode (array_length_pos = 4.1, array_length_type = "gsize")]
		[Version (since = "2.10")]
		public uint8[] serialize (Gtk.TextBuffer content_buffer, Gdk.Atom format, Gtk.TextIter start, Gtk.TextIter end);
		public void set_modified (bool setting);
		public void set_text (string text, int len = -1);
		[Version (since = "2.10")]
		public void unregister_deserialize_format (Gdk.Atom format);
		[Version (since = "2.10")]
		public void unregister_serialize_format (Gdk.Atom format);
		[Version (since = "2.10")]
		public Gtk.TargetList copy_target_list { get; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public int cursor_position { get; }
		[Version (since = "2.10")]
		public bool has_selection { get; }
		[Version (since = "2.10")]
		public Gtk.TargetList paste_target_list { get; }
		public Gtk.TextTagTable tag_table { get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public string text { owned get; set; }
		[HasEmitter]
		public virtual signal void apply_tag (Gtk.TextTag tag, Gtk.TextIter start, Gtk.TextIter end);
		[HasEmitter]
		public virtual signal void begin_user_action ();
		public virtual signal void changed ();
		public virtual signal void delete_range (Gtk.TextIter start, Gtk.TextIter end);
		[HasEmitter]
		public virtual signal void end_user_action ();
		[HasEmitter]
		public virtual signal void insert_child_anchor (Gtk.TextIter iter, Gtk.TextChildAnchor anchor);
		[HasEmitter]
		public virtual signal void insert_pixbuf (Gtk.TextIter iter, Gdk.Pixbuf pixbuf);
		public virtual signal void insert_text (ref Gtk.TextIter pos, string new_text, int new_text_length);
		public virtual signal void mark_deleted (Gtk.TextMark mark);
		public virtual signal void mark_set (Gtk.TextIter location, Gtk.TextMark mark);
		public virtual signal void modified_changed ();
		[Version (since = "2.16")]
		public virtual signal void paste_done (Gtk.Clipboard clipboard);
		[HasEmitter]
		public virtual signal void remove_tag (Gtk.TextTag tag, Gtk.TextIter start, Gtk.TextIter end);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_text_cell_accessible_get_type ()")]
	public class TextCellAccessible : Gtk.RendererCellAccessible, Atk.Action, Atk.Component, Atk.Text {
		[CCode (has_construct_function = false)]
		protected TextCellAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_child_anchor_get_type ()")]
	public class TextChildAnchor : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextChildAnchor ();
		public bool get_deleted ();
		public GLib.List<weak Gtk.Widget> get_widgets ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_mark_get_type ()")]
	public class TextMark : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "2.12")]
		public TextMark (string? name, bool left_gravity = false);
		public unowned Gtk.TextBuffer get_buffer ();
		public bool get_deleted ();
		public bool get_left_gravity ();
		public unowned string get_name ();
		public bool get_visible ();
		public void set_visible (bool setting);
		public bool left_gravity { get; construct; }
		public string name { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_tag_get_type ()")]
	public class TextTag : GLib.Object {
		[CCode (has_construct_function = false)]
		public TextTag (string? name = null);
		[Version (since = "3.20")]
		public void changed (bool size_changed);
		public int get_priority ();
		public void set_priority (int priority);
		[NoAccessorMethod]
		[Version (since = "2.12")]
		public bool accumulative_margin { get; set; }
		[NoAccessorMethod]
		public string background { set; }
		[NoAccessorMethod]
		public bool background_full_height { get; set; }
		[NoAccessorMethod]
		public bool background_full_height_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.2")]
		public Gdk.RGBA background_rgba { get; set; }
		[NoAccessorMethod]
		public bool background_set { get; set; }
		[NoAccessorMethod]
		public Gtk.TextDirection direction { get; set; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool editable_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool fallback { get; set; }
		[NoAccessorMethod]
		public bool fallback_set { get; set; }
		[NoAccessorMethod]
		public string family { owned get; set; }
		[NoAccessorMethod]
		public bool family_set { get; set; }
		[NoAccessorMethod]
		public string font { owned get; set; }
		[NoAccessorMethod]
		public Pango.FontDescription font_desc { owned get; set; }
		[NoAccessorMethod]
		[Version (since = "3.18")]
		public string font_features { owned get; set; }
		[NoAccessorMethod]
		public bool font_features_set { get; set; }
		[NoAccessorMethod]
		public string foreground { set; }
		[NoAccessorMethod]
		[Version (since = "3.2")]
		public Gdk.RGBA foreground_rgba { get; set; }
		[NoAccessorMethod]
		public bool foreground_set { get; set; }
		[NoAccessorMethod]
		public int indent { get; set; }
		[NoAccessorMethod]
		public bool indent_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public bool invisible { get; set; }
		[NoAccessorMethod]
		public bool invisible_set { get; set; }
		[NoAccessorMethod]
		public Gtk.Justification justification { get; set; }
		[NoAccessorMethod]
		public bool justification_set { get; set; }
		[NoAccessorMethod]
		public string language { owned get; set; }
		[NoAccessorMethod]
		public bool language_set { get; set; }
		[NoAccessorMethod]
		public int left_margin { get; set; }
		[NoAccessorMethod]
		public bool left_margin_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public int letter_spacing { get; set; }
		[NoAccessorMethod]
		public bool letter_spacing_set { get; set; }
		[NoAccessorMethod]
		public string name { owned get; construct; }
		[NoAccessorMethod]
		[Version (since = "2.8")]
		public string paragraph_background { set; }
		[NoAccessorMethod]
		[Version (since = "3.2")]
		public Gdk.RGBA paragraph_background_rgba { get; set; }
		[NoAccessorMethod]
		public bool paragraph_background_set { get; set; }
		[NoAccessorMethod]
		public int pixels_above_lines { get; set; }
		[NoAccessorMethod]
		public bool pixels_above_lines_set { get; set; }
		[NoAccessorMethod]
		public int pixels_below_lines { get; set; }
		[NoAccessorMethod]
		public bool pixels_below_lines_set { get; set; }
		[NoAccessorMethod]
		public int pixels_inside_wrap { get; set; }
		[NoAccessorMethod]
		public bool pixels_inside_wrap_set { get; set; }
		[NoAccessorMethod]
		public int right_margin { get; set; }
		[NoAccessorMethod]
		public bool right_margin_set { get; set; }
		[NoAccessorMethod]
		public int rise { get; set; }
		[NoAccessorMethod]
		public bool rise_set { get; set; }
		[NoAccessorMethod]
		public double scale { get; set; }
		[NoAccessorMethod]
		public bool scale_set { get; set; }
		[NoAccessorMethod]
		public int size { get; set; }
		[NoAccessorMethod]
		public double size_points { get; set; }
		[NoAccessorMethod]
		public bool size_set { get; set; }
		[NoAccessorMethod]
		public Pango.Stretch stretch { get; set; }
		[NoAccessorMethod]
		public bool stretch_set { get; set; }
		[NoAccessorMethod]
		public bool strikethrough { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public Gdk.RGBA strikethrough_rgba { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool strikethrough_rgba_set { get; set; }
		[NoAccessorMethod]
		public bool strikethrough_set { get; set; }
		[NoAccessorMethod]
		public Pango.Style style { get; set; }
		[NoAccessorMethod]
		public bool style_set { get; set; }
		[NoAccessorMethod]
		public Pango.TabArray tabs { owned get; set; }
		[NoAccessorMethod]
		public bool tabs_set { get; set; }
		[NoAccessorMethod]
		public Pango.Underline underline { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public Gdk.RGBA underline_rgba { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.16")]
		public bool underline_rgba_set { get; set; }
		[NoAccessorMethod]
		public bool underline_set { get; set; }
		[NoAccessorMethod]
		public Pango.Variant variant { get; set; }
		[NoAccessorMethod]
		public bool variant_set { get; set; }
		[NoAccessorMethod]
		public int weight { get; set; }
		[NoAccessorMethod]
		public bool weight_set { get; set; }
		[NoAccessorMethod]
		public Gtk.WrapMode wrap_mode { get; set; }
		[NoAccessorMethod]
		public bool wrap_mode_set { get; set; }
		[HasEmitter]
		public virtual signal bool event (GLib.Object event_object, Gdk.Event event, Gtk.TextIter iter);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_tag_table_get_type ()")]
	public class TextTagTable : GLib.Object, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public TextTagTable ();
		public bool add (Gtk.TextTag tag);
		public void @foreach (Gtk.TextTagTableForeach func);
		public int get_size ();
		public unowned Gtk.TextTag? lookup (string name);
		public void remove (Gtk.TextTag tag);
		public virtual signal void tag_added (Gtk.TextTag tag);
		public virtual signal void tag_changed (Gtk.TextTag tag, bool size_changed);
		public virtual signal void tag_removed (Gtk.TextTag tag);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_view_get_type ()")]
	public class TextView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TextView ();
		public void add_child_at_anchor (Gtk.Widget child, Gtk.TextChildAnchor anchor);
		public void add_child_in_window (Gtk.Widget child, Gtk.TextWindowType which_window, int xpos, int ypos);
		public bool backward_display_line (Gtk.TextIter iter);
		public bool backward_display_line_start (Gtk.TextIter iter);
		public void buffer_to_window_coords (Gtk.TextWindowType win, int buffer_x, int buffer_y, out int window_x, out int window_y);
		[NoWrapper]
		public virtual Gtk.TextBuffer create_buffer ();
		[NoWrapper]
		public virtual void draw_layer (Gtk.TextViewLayer layer, Cairo.Context cr);
		public bool forward_display_line (Gtk.TextIter iter);
		public bool forward_display_line_end (Gtk.TextIter iter);
		[Version (since = "2.4")]
		public bool get_accepts_tab ();
		public int get_border_window_size (Gtk.TextWindowType type);
		[Version (since = "3.18")]
		public int get_bottom_margin ();
		public unowned Gtk.TextBuffer get_buffer ();
		[Version (since = "3.0")]
		public void get_cursor_locations (Gtk.TextIter? iter, out Gdk.Rectangle strong, out Gdk.Rectangle @weak);
		public bool get_cursor_visible ();
		public bool get_editable ();
		public int get_indent ();
		[Version (since = "3.6")]
		public Gtk.InputHints get_input_hints ();
		[Version (since = "3.6")]
		public Gtk.InputPurpose get_input_purpose ();
		public bool get_iter_at_location (out Gtk.TextIter iter, int x, int y);
		[Version (since = "2.6")]
		public bool get_iter_at_position (out Gtk.TextIter iter, out int trailing, int x, int y);
		public void get_iter_location (Gtk.TextIter iter, out Gdk.Rectangle location);
		public Gtk.Justification get_justification ();
		public int get_left_margin ();
		public void get_line_at_y (out Gtk.TextIter target_iter, int y, out int line_top);
		public void get_line_yrange (Gtk.TextIter iter, out int y, out int height);
		[Version (since = "3.16")]
		public bool get_monospace ();
		[Version (since = "2.4")]
		public bool get_overwrite ();
		public int get_pixels_above_lines ();
		public int get_pixels_below_lines ();
		public int get_pixels_inside_wrap ();
		public int get_right_margin ();
		public Pango.TabArray? get_tabs ();
		[Version (since = "3.18")]
		public int get_top_margin ();
		public void get_visible_rect (out Gdk.Rectangle visible_rect);
		public unowned Gdk.Window? get_window (Gtk.TextWindowType win);
		public Gtk.TextWindowType get_window_type (Gdk.Window window);
		public Gtk.WrapMode get_wrap_mode ();
		[Version (since = "2.22")]
		public bool im_context_filter_keypress (Gdk.EventKey event);
		public void move_child (Gtk.Widget child, int xpos, int ypos);
		public bool move_mark_onscreen (Gtk.TextMark mark);
		public bool move_visually (Gtk.TextIter iter, int count);
		public bool place_cursor_onscreen ();
		[Version (since = "3.20")]
		public void reset_cursor_blink ();
		[Version (since = "2.22")]
		public void reset_im_context ();
		public void scroll_mark_onscreen (Gtk.TextMark mark);
		public bool scroll_to_iter (Gtk.TextIter iter, double within_margin, bool use_align, double xalign, double yalign);
		public void scroll_to_mark (Gtk.TextMark mark, double within_margin, bool use_align, double xalign, double yalign);
		[Version (since = "2.4")]
		public void set_accepts_tab (bool accepts_tab);
		public void set_border_window_size (Gtk.TextWindowType type, int size);
		[Version (since = "3.18")]
		public void set_bottom_margin (int bottom_margin);
		public void set_buffer (Gtk.TextBuffer? buffer);
		public void set_cursor_visible (bool setting);
		public void set_editable (bool setting);
		public void set_indent (int indent);
		[Version (since = "3.6")]
		public void set_input_hints (Gtk.InputHints hints);
		[Version (since = "3.6")]
		public void set_input_purpose (Gtk.InputPurpose purpose);
		public void set_justification (Gtk.Justification justification);
		public void set_left_margin (int left_margin);
		[Version (since = "3.16")]
		public void set_monospace (bool monospace);
		[Version (since = "2.4")]
		public void set_overwrite (bool overwrite);
		public void set_pixels_above_lines (int pixels_above_lines);
		public void set_pixels_below_lines (int pixels_below_lines);
		public void set_pixels_inside_wrap (int pixels_inside_wrap);
		public void set_right_margin (int right_margin);
		public void set_tabs (Pango.TabArray tabs);
		[Version (since = "3.18")]
		public void set_top_margin (int top_margin);
		public void set_wrap_mode (Gtk.WrapMode wrap_mode);
		public bool starts_display_line (Gtk.TextIter iter);
		public void window_to_buffer_coords (Gtk.TextWindowType win, int window_x, int window_y, out int buffer_x, out int buffer_y);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TextView.with_buffer (Gtk.TextBuffer buffer);
		public bool accepts_tab { get; set; }
		[Version (since = "3.18")]
		public int bottom_margin { get; set; }
		public Gtk.TextBuffer buffer { get; set; }
		public bool cursor_visible { get; set; }
		public bool editable { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.16")]
		public string im_module { owned get; set; }
		public int indent { get; set; }
		[Version (since = "3.6")]
		public Gtk.InputHints input_hints { get; set; }
		[Version (since = "3.6")]
		public Gtk.InputPurpose input_purpose { get; set; }
		public Gtk.Justification justification { get; set; }
		public int left_margin { get; set; }
		public bool monospace { get; set; }
		public bool overwrite { get; set; }
		public int pixels_above_lines { get; set; }
		public int pixels_below_lines { get; set; }
		public int pixels_inside_wrap { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.8")]
		public bool populate_all { get; set; }
		public int right_margin { get; set; }
		public Pango.TabArray tabs { owned get; set; }
		[Version (since = "3.18")]
		public int top_margin { get; set; }
		public Gtk.WrapMode wrap_mode { get; set; }
		public virtual signal void backspace ();
		public virtual signal void copy_clipboard ();
		public virtual signal void cut_clipboard ();
		public virtual signal void delete_from_cursor (Gtk.DeleteType type, int count);
		[Version (since = "3.16")]
		public virtual signal bool extend_selection (Gtk.TextExtendSelection granularity, Gtk.TextIter location, Gtk.TextIter start, Gtk.TextIter end);
		public virtual signal void insert_at_cursor (string str);
		public virtual signal void move_cursor (Gtk.MovementStep step, int count, bool extend_selection);
		public signal void move_viewport (Gtk.ScrollStep step, int count);
		public virtual signal void paste_clipboard ();
		public virtual signal void populate_popup (Gtk.Widget popup);
		[Version (since = "2.20")]
		public signal void preedit_changed (string preedit);
		public signal void select_all (bool select);
		public virtual signal void set_anchor ();
		public signal void toggle_cursor_visible ();
		public virtual signal void toggle_overwrite ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_text_view_accessible_get_type ()")]
	public class TextViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.EditableText, Atk.StreamableContent, Atk.Text {
		[CCode (has_construct_function = false)]
		protected TextViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toggle_button_get_type ()")]
	public class ToggleButton : Gtk.Button, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton ();
		public bool get_active ();
		public bool get_inconsistent ();
		public bool get_mode ();
		public void set_active (bool is_active);
		public void set_inconsistent (bool setting);
		public void set_mode (bool draw_indicator);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton.with_label (string label);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ToggleButton.with_mnemonic (string label);
		public bool active { get; set; }
		[NoAccessorMethod]
		public bool draw_indicator { get; set; }
		public bool inconsistent { get; set; }
		[HasEmitter]
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_toggle_button_accessible_get_type ()")]
	public class ToggleButtonAccessible : Gtk.ButtonAccessible, Atk.Action, Atk.Component, Atk.Image {
		[CCode (has_construct_function = false)]
		protected ToggleButtonAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toggle_tool_button_get_type ()")]
	public class ToggleToolButton : Gtk.ToolButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.4")]
		public ToggleToolButton ();
		[Version (since = "2.4")]
		public bool get_active ();
		[Version (since = "2.4")]
		public void set_active (bool is_active);
		[Version (since = "2.8")]
		public bool active { get; set; }
		public virtual signal void toggled ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_button_get_type ()")]
	public class ToolButton : Gtk.ToolItem, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		[Version (since = "2.4")]
		public ToolButton (Gtk.Widget? icon_widget, string? label);
		[Version (since = "2.8")]
		public unowned string? get_icon_name ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_icon_widget ();
		[Version (since = "2.4")]
		public unowned string? get_label ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_label_widget ();
		[Version (since = "2.4")]
		public bool get_use_underline ();
		[Version (since = "2.8")]
		public void set_icon_name (string? icon_name);
		[Version (since = "2.4")]
		public void set_icon_widget (Gtk.Widget? icon_widget);
		[Version (since = "2.4")]
		public void set_label (string? label);
		[Version (since = "2.4")]
		public void set_label_widget (Gtk.Widget? label_widget);
		[Version (since = "2.4")]
		public void set_use_underline (bool use_underline);
		[Version (since = "2.8")]
		public string icon_name { get; set; }
		public Gtk.Widget icon_widget { get; set; }
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
		public bool use_underline { get; set; }
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_item_get_type ()")]
	public class ToolItem : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		[Version (since = "2.4")]
		public ToolItem ();
		[Version (since = "2.20")]
		public Pango.EllipsizeMode get_ellipsize_mode ();
		[Version (since = "2.4")]
		public bool get_expand ();
		[Version (since = "2.4")]
		public bool get_homogeneous ();
		[Version (since = "2.4")]
		public Gtk.IconSize get_icon_size ();
		[Version (since = "2.4")]
		public bool get_is_important ();
		[Version (since = "2.4")]
		public Gtk.Orientation get_orientation ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget get_proxy_menu_item (string menu_item_id);
		[Version (since = "2.20")]
		public float get_text_alignment ();
		[Version (since = "2.20")]
		public Gtk.Orientation get_text_orientation ();
		[Version (since = "2.20")]
		public unowned Gtk.SizeGroup get_text_size_group ();
		[Version (since = "2.4")]
		public Gtk.ToolbarStyle get_toolbar_style ();
		[Version (since = "2.4")]
		public bool get_use_drag_window ();
		[Version (since = "2.4")]
		public bool get_visible_horizontal ();
		[Version (since = "2.4")]
		public bool get_visible_vertical ();
		[Version (since = "2.6")]
		public void rebuild_menu ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget retrieve_proxy_menu_item ();
		[Version (since = "2.4")]
		public void set_expand (bool expand);
		[Version (since = "2.4")]
		public void set_homogeneous (bool homogeneous);
		[Version (since = "2.4")]
		public void set_is_important (bool is_important);
		[Version (since = "2.4")]
		public void set_proxy_menu_item (string menu_item_id, Gtk.Widget menu_item);
		[Version (since = "2.12")]
		public void set_tooltip_markup (string markup);
		[Version (since = "2.12")]
		public void set_tooltip_text (string text);
		[Version (since = "2.4")]
		public void set_use_drag_window (bool use_drag_window);
		[Version (since = "2.4")]
		public void set_visible_horizontal (bool visible_horizontal);
		[Version (since = "2.4")]
		public void set_visible_vertical (bool visible_vertical);
		public bool is_important { get; set; }
		public bool visible_horizontal { get; set; }
		public bool visible_vertical { get; set; }
		public virtual signal bool create_menu_proxy ();
		[HasEmitter]
		public virtual signal void toolbar_reconfigured ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_item_group_get_type ()")]
	public class ToolItemGroup : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.20")]
		public ToolItemGroup (string label);
		[Version (since = "2.20")]
		public bool get_collapsed ();
		[Version (since = "2.20")]
		public unowned Gtk.ToolItem get_drop_item (int x, int y);
		[Version (since = "2.20")]
		public Pango.EllipsizeMode get_ellipsize ();
		[Version (since = "2.20")]
		public Gtk.ReliefStyle get_header_relief ();
		[Version (since = "2.20")]
		public int get_item_position (Gtk.ToolItem item);
		[Version (since = "2.20")]
		public unowned string get_label ();
		[Version (since = "2.20")]
		public unowned Gtk.Widget get_label_widget ();
		[Version (since = "2.20")]
		public uint get_n_items ();
		[Version (since = "2.20")]
		public unowned Gtk.ToolItem get_nth_item (uint index);
		[Version (since = "2.20")]
		public void insert (Gtk.ToolItem item, int position);
		[Version (since = "2.20")]
		public void set_collapsed (bool collapsed);
		[Version (since = "2.20")]
		public void set_ellipsize (Pango.EllipsizeMode ellipsize);
		[Version (since = "2.20")]
		public void set_header_relief (Gtk.ReliefStyle style);
		[Version (since = "2.20")]
		public void set_item_position (Gtk.ToolItem item, int position);
		[Version (since = "2.20")]
		public void set_label (string label);
		[Version (since = "2.20")]
		public void set_label_widget (Gtk.Widget label_widget);
		public bool collapsed { get; set; }
		public Pango.EllipsizeMode ellipsize { get; set; }
		public Gtk.ReliefStyle header_relief { get; set; }
		public string label { get; set; }
		public Gtk.Widget label_widget { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_palette_get_type ()")]
	public class ToolPalette : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.20")]
		public ToolPalette ();
		[Version (since = "2.20")]
		public void add_drag_dest (Gtk.Widget widget, Gtk.DestDefaults flags, Gtk.ToolPaletteDragTargets targets, Gdk.DragAction actions);
		[Version (since = "2.20")]
		public unowned Gtk.Widget get_drag_item (Gtk.SelectionData selection);
		[Version (since = "2.20")]
		public static unowned Gtk.TargetEntry? get_drag_target_group ();
		[Version (since = "2.20")]
		public static unowned Gtk.TargetEntry? get_drag_target_item ();
		[Version (since = "2.20")]
		public unowned Gtk.ToolItemGroup? get_drop_group (int x, int y);
		[Version (since = "2.20")]
		public unowned Gtk.ToolItem? get_drop_item (int x, int y);
		[Version (since = "2.20")]
		public bool get_exclusive (Gtk.ToolItemGroup group);
		[Version (since = "2.20")]
		public bool get_expand (Gtk.ToolItemGroup group);
		[Version (since = "2.20")]
		public int get_group_position (Gtk.ToolItemGroup group);
		[Version (since = "2.20")]
		public Gtk.IconSize get_icon_size ();
		[Version (since = "2.20")]
		public Gtk.ToolbarStyle get_style ();
		[Version (since = "2.20")]
		public void set_drag_source (Gtk.ToolPaletteDragTargets targets);
		[Version (since = "2.20")]
		public void set_exclusive (Gtk.ToolItemGroup group, bool exclusive);
		[Version (since = "2.20")]
		public void set_expand (Gtk.ToolItemGroup group, bool expand);
		[Version (since = "2.20")]
		public void set_group_position (Gtk.ToolItemGroup group, int position);
		[Version (since = "2.20")]
		public void set_icon_size ([CCode (type = "GtkIconSize")] Gtk.IconSize icon_size);
		[Version (since = "2.20")]
		public void set_style (Gtk.ToolbarStyle style);
		[Version (since = "2.20")]
		public void unset_icon_size ();
		[Version (since = "2.20")]
		public void unset_style ();
		[Version (since = "2.20")]
		public Gtk.IconSize icon_size { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.20")]
		public bool icon_size_set { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.20")]
		public Gtk.ToolbarStyle toolbar_style { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_toolbar_get_type ()")]
	public class Toolbar : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Toolbar ();
		[Version (since = "2.4")]
		public int get_drop_index (int x, int y);
		[Version (since = "2.4")]
		public int get_item_index (Gtk.ToolItem item);
		[Version (since = "2.4")]
		public int get_n_items ();
		[Version (since = "2.4")]
		public unowned Gtk.ToolItem? get_nth_item (int n);
		[Version (since = "2.4")]
		public bool get_show_arrow ();
		[Version (since = "2.4")]
		public void insert (Gtk.ToolItem item, int pos);
		[Version (since = "2.4")]
		public void set_drop_highlight_item (Gtk.ToolItem? tool_item, int index_);
		public void set_icon_size (Gtk.IconSize icon_size);
		[Version (since = "2.4")]
		public void set_show_arrow (bool show_arrow);
		public void set_style (Gtk.ToolbarStyle style);
		public void unset_icon_size ();
		public void unset_style ();
		[Version (since = "2.10")]
		public Gtk.IconSize icon_size { get; set; }
		[NoAccessorMethod]
		[Version (since = "2.10")]
		public bool icon_size_set { get; set; }
		public bool show_arrow { get; set; }
		[NoAccessorMethod]
		public Gtk.ToolbarStyle toolbar_style { get; set; }
		public signal bool focus_home_or_end (bool focus_home);
		public virtual signal void orientation_changed (Gtk.Orientation orientation);
		public virtual signal bool popup_context_menu (int x, int y, int button_number);
		public virtual signal void style_changed (Gtk.ToolbarStyle style);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tooltip_get_type ()")]
	public class Tooltip : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Tooltip ();
		[Version (since = "2.12")]
		public void set_custom (Gtk.Widget? custom_widget);
		[Version (since = "2.12")]
		public void set_icon (Gdk.Pixbuf? pixbuf);
		[Version (since = "2.20")]
		public void set_icon_from_gicon (GLib.Icon? gicon, int size);
		[Version (since = "2.14")]
		public void set_icon_from_icon_name (string? icon_name, int size);
		[Version (since = "2.12")]
		public void set_markup (string? markup);
		[Version (since = "2.12")]
		public void set_text (string? text);
		[Version (since = "2.12")]
		public void set_tip_area (Gdk.Rectangle rect);
		[Version (since = "2.12")]
		public static void trigger_tooltip_query (Gdk.Display display);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_toplevel_accessible_get_type ()")]
	public class ToplevelAccessible : Atk.Object {
		[CCode (has_construct_function = false)]
		protected ToplevelAccessible ();
		public unowned GLib.List<Gtk.Window> get_children ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_model_filter_get_type ()")]
	public class TreeModelFilter : GLib.Object, Gtk.TreeDragSource, Gtk.TreeModel {
		[CCode (has_construct_function = false, type = "GtkTreeModel*")]
		[Version (since = "2.4")]
		public TreeModelFilter (Gtk.TreeModel child_model, Gtk.TreePath? root);
		[Version (since = "2.4")]
		public void clear_cache ();
		[Version (since = "2.4")]
		public bool convert_child_iter_to_iter (out Gtk.TreeIter filter_iter, Gtk.TreeIter child_iter);
		[Version (since = "2.4")]
		public Gtk.TreePath? convert_child_path_to_path (Gtk.TreePath child_path);
		[Version (since = "2.4")]
		public void convert_iter_to_child_iter (out Gtk.TreeIter child_iter, Gtk.TreeIter filter_iter);
		[Version (since = "2.4")]
		public Gtk.TreePath? convert_path_to_child_path (Gtk.TreePath filter_path);
		[Version (since = "2.4")]
		public unowned Gtk.TreeModel get_model ();
		[NoWrapper]
		public virtual void modify (Gtk.TreeModel child_model, Gtk.TreeIter iter, GLib.Value value, int column);
		[Version (since = "2.4")]
		public void refilter ();
		[Version (since = "2.4")]
		public void set_modify_func ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5)] GLib.Type[] types, owned Gtk.TreeModelFilterModifyFunc func);
		[Version (since = "2.4")]
		public void set_visible_column (int column);
		[Version (since = "2.4")]
		public void set_visible_func (owned Gtk.TreeModelFilterVisibleFunc func);
		[NoWrapper]
		public virtual bool visible (Gtk.TreeModel child_model, Gtk.TreeIter iter);
		[NoAccessorMethod]
		public Gtk.TreeModel child_model { owned get; construct; }
		[NoAccessorMethod]
		public Gtk.TreePath virtual_root { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_model_sort_get_type ()")]
	public class TreeModelSort : GLib.Object, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false)]
		protected TreeModelSort ();
		public void clear_cache ();
		public bool convert_child_iter_to_iter (out Gtk.TreeIter sort_iter, Gtk.TreeIter child_iter);
		public Gtk.TreePath? convert_child_path_to_path (Gtk.TreePath child_path);
		public void convert_iter_to_child_iter (out Gtk.TreeIter child_iter, Gtk.TreeIter sorted_iter);
		public Gtk.TreePath? convert_path_to_child_path (Gtk.TreePath sorted_path);
		public unowned Gtk.TreeModel get_model ();
		[Version (since = "2.2")]
		public bool iter_is_valid (Gtk.TreeIter iter);
		public void reset_default_sort_func ();
		[CCode (has_construct_function = false, type = "GtkTreeModel*")]
		public TreeModelSort.with_model (Gtk.TreeModel child_model);
		public Gtk.TreeModel model { get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gtk_tree_path_get_type ()")]
	[Compact]
	public class TreePath {
		[CCode (has_construct_function = false)]
		public TreePath ();
		public void append_index (int index_);
		public int compare (Gtk.TreePath b);
		public Gtk.TreePath copy ();
		public void down ();
		[CCode (has_construct_function = false)]
		public TreePath.first ();
		public void free ();
		[CCode (has_construct_function = false, sentinel = "-1")]
		[Version (since = "2.2")]
		public TreePath.from_indices (...);
		[CCode (has_construct_function = false)]
		[Version (since = "3.12")]
		public TreePath.from_indicesv ([CCode (array_length_cname = "length", array_length_pos = 1.1, array_length_type = "gsize")] int[] indices);
		[CCode (has_construct_function = false)]
		public TreePath.from_string (string path);
		public int get_depth ();
		[CCode (array_length_pos = 0.1, cname = "gtk_tree_path_get_indices_with_depth")]
		[Version (since = "3.0")]
		public unowned int[] get_indices ();
		public bool is_ancestor (Gtk.TreePath descendant);
		public bool is_descendant (Gtk.TreePath ancestor);
		public void next ();
		public void prepend_index (int index_);
		public bool prev ();
		public string to_string ();
		public bool up ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gtk_tree_row_reference_get_type ()")]
	[Compact]
	public class TreeRowReference {
		[CCode (has_construct_function = false)]
		public TreeRowReference (Gtk.TreeModel model, Gtk.TreePath path);
		[Version (since = "2.2")]
		public Gtk.TreeRowReference copy ();
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void deleted (GLib.Object proxy, Gtk.TreePath path);
		public void free ();
		[Version (since = "2.8")]
		public unowned Gtk.TreeModel get_model ();
		public Gtk.TreePath? get_path ();
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void inserted (GLib.Object proxy, Gtk.TreePath path);
		[CCode (has_construct_function = false)]
		public TreeRowReference.proxy (GLib.Object proxy, Gtk.TreeModel model, Gtk.TreePath path);
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static void reordered (GLib.Object proxy, Gtk.TreePath path, Gtk.TreeIter iter, [CCode (array_length = false)] int[] new_order);
		public bool valid ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_selection_get_type ()")]
	public class TreeSelection : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TreeSelection ();
		[Version (since = "2.2")]
		public int count_selected_rows ();
		public Gtk.SelectionMode get_mode ();
		[Version (since = "2.14")]
		public unowned Gtk.TreeSelectionFunc get_select_function ();
		public bool get_selected (out unowned Gtk.TreeModel model, out Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public GLib.List<Gtk.TreePath> get_selected_rows (out unowned Gtk.TreeModel model);
		public unowned Gtk.TreeView get_tree_view ();
		public void* get_user_data ();
		public bool iter_is_selected (Gtk.TreeIter iter);
		public bool path_is_selected (Gtk.TreePath path);
		public void select_all ();
		public void select_iter (Gtk.TreeIter iter);
		public void select_path (Gtk.TreePath path);
		public void select_range (Gtk.TreePath start_path, Gtk.TreePath end_path);
		public void selected_foreach (Gtk.TreeSelectionForeachFunc func);
		public void set_mode (Gtk.SelectionMode type);
		public void set_select_function (owned Gtk.TreeSelectionFunc func);
		public void unselect_all ();
		public void unselect_iter (Gtk.TreeIter iter);
		public void unselect_path (Gtk.TreePath path);
		[Version (since = "2.2")]
		public void unselect_range (Gtk.TreePath start_path, Gtk.TreePath end_path);
		[Version (since = "3.2")]
		public Gtk.SelectionMode mode { get; set; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_store_get_type ()")]
	public class TreeStore : GLib.Object, Gtk.Buildable, Gtk.TreeDragDest, Gtk.TreeDragSource, Gtk.TreeModel, Gtk.TreeSortable {
		[CCode (has_construct_function = false, sentinel = "")]
		public TreeStore (int n_columns, ...);
		public void append (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public void clear ();
		public void insert (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position);
		public void insert_after (out Gtk.TreeIter iter, Gtk.TreeIter? parent, Gtk.TreeIter? sibling);
		public void insert_before (out Gtk.TreeIter iter, Gtk.TreeIter? parent, Gtk.TreeIter? sibling);
		[CCode (sentinel = "-1")]
		[Version (since = "2.10")]
		public void insert_with_values (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position, ...);
		[Version (since = "2.10")]
		public void insert_with_valuesv (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int position, [CCode (array_length_cname = "n_values", array_length_pos = 5.1)] int[] columns, [CCode (array_length_cname = "n_values", array_length_pos = 5.1)] GLib.Value[] values);
		public bool is_ancestor (Gtk.TreeIter iter, Gtk.TreeIter descendant);
		public int iter_depth (Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public bool iter_is_valid (Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public void move_after (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[Version (since = "2.2")]
		public void move_before (ref Gtk.TreeIter iter, Gtk.TreeIter? position);
		[CCode (cname = "gtk_tree_store_newv", has_construct_function = false)]
		public TreeStore.newv ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5)] GLib.Type[] types);
		public void prepend (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public bool remove (ref Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public void reorder (Gtk.TreeIter? parent, [CCode (array_length = false)] int[] new_order);
		[CCode (sentinel = "-1")]
		public void @set (Gtk.TreeIter iter, ...);
		public void set_column_types ([CCode (array_length_cname = "n_columns", array_length_pos = 0.5)] GLib.Type[] types);
		public void set_valist (Gtk.TreeIter iter, [CCode (type = "va_list")] va_list var_args);
		public void set_value (Gtk.TreeIter iter, int column, GLib.Value value);
		[Version (since = "2.12")]
		public void set_valuesv (Gtk.TreeIter iter, [CCode (array_length_cname = "n_values", array_length_pos = 3.1)] int[] columns, [CCode (array_length_cname = "n_values", array_length_pos = 3.1)] GLib.Value[] values);
		[Version (since = "2.2")]
		public void swap (Gtk.TreeIter a, Gtk.TreeIter b);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_view_get_type ()")]
	public class TreeView : Gtk.Container, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TreeView ();
		public int append_column (Gtk.TreeViewColumn column);
		public void collapse_all ();
		public bool collapse_row (Gtk.TreePath path);
		public void columns_autosize ();
		[Version (since = "2.12")]
		public void convert_bin_window_to_tree_coords (int bx, int by, out int tx, out int ty);
		[Version (since = "2.12")]
		public void convert_bin_window_to_widget_coords (int bx, int by, out int wx, out int wy);
		[Version (since = "2.12")]
		public void convert_tree_to_bin_window_coords (int tx, int ty, out int bx, out int by);
		[Version (since = "2.12")]
		public void convert_tree_to_widget_coords (int tx, int ty, out int wx, out int wy);
		[Version (since = "2.12")]
		public void convert_widget_to_bin_window_coords (int wx, int wy, out int bx, out int by);
		[Version (since = "2.12")]
		public void convert_widget_to_tree_coords (int wx, int wy, out int tx, out int ty);
		public Cairo.Surface create_row_drag_icon (Gtk.TreePath path);
		public void enable_model_drag_dest ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5)] Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public void enable_model_drag_source (Gdk.ModifierType start_button_mask, [CCode (array_length_cname = "n_targets", array_length_pos = 2.5)] Gtk.TargetEntry[] targets, Gdk.DragAction actions);
		public void expand_all ();
		public bool expand_row (Gtk.TreePath path, bool open_all);
		[Version (since = "2.2")]
		public void expand_to_path (Gtk.TreePath path);
		[Version (since = "3.8")]
		public bool get_activate_on_single_click ();
		public void get_background_area (Gtk.TreePath? path, Gtk.TreeViewColumn? column, out Gdk.Rectangle rect);
		public void get_cell_area (Gtk.TreePath? path, Gtk.TreeViewColumn? column, out Gdk.Rectangle rect);
		public unowned Gtk.TreeViewColumn? get_column (int n);
		public GLib.List<weak Gtk.TreeViewColumn> get_columns ();
		public void get_cursor (out Gtk.TreePath? path, out unowned Gtk.TreeViewColumn? focus_column);
		public bool get_dest_row_at_pos (int drag_x, int drag_y, out Gtk.TreePath? path, out Gtk.TreeViewDropPosition pos);
		public void get_drag_dest_row (out Gtk.TreePath? path, out Gtk.TreeViewDropPosition pos);
		public bool get_enable_search ();
		[Version (since = "2.10")]
		public bool get_enable_tree_lines ();
		public unowned Gtk.TreeViewColumn get_expander_column ();
		[Version (since = "2.6")]
		public bool get_fixed_height_mode ();
		[Version (since = "2.10")]
		public Gtk.TreeViewGridLines get_grid_lines ();
		[Version (since = "2.10")]
		public bool get_headers_clickable ();
		public bool get_headers_visible ();
		[Version (since = "2.6")]
		public bool get_hover_expand ();
		[Version (since = "2.6")]
		public bool get_hover_selection ();
		[Version (since = "2.12")]
		public int get_level_indentation ();
		public unowned Gtk.TreeModel? get_model ();
		[Version (since = "3.4")]
		public uint get_n_columns ();
		public bool get_path_at_pos (int x, int y, out Gtk.TreePath? path, out unowned Gtk.TreeViewColumn? column, out int cell_x, out int cell_y);
		public bool get_reorderable ();
		[Version (since = "2.6")]
		public unowned Gtk.TreeViewRowSeparatorFunc get_row_separator_func ();
		[Version (since = "2.10")]
		public bool get_rubber_banding ();
		public int get_search_column ();
		[Version (since = "2.10")]
		public unowned Gtk.Entry get_search_entry ();
		public unowned Gtk.TreeViewSearchEqualFunc get_search_equal_func ();
		[Version (since = "2.10")]
		public unowned Gtk.TreeViewSearchPositionFunc get_search_position_func ();
		public unowned Gtk.TreeSelection get_selection ();
		[Version (since = "2.12")]
		public bool get_show_expanders ();
		[Version (since = "2.12")]
		public int get_tooltip_column ();
		[Version (since = "2.12")]
		public bool get_tooltip_context (ref int x, ref int y, bool keyboard_tip, out unowned Gtk.TreeModel? model, out Gtk.TreePath path, out Gtk.TreeIter iter);
		[Version (since = "2.8")]
		public bool get_visible_range (out Gtk.TreePath start_path, out Gtk.TreePath end_path);
		public void get_visible_rect (out Gdk.Rectangle visible_rect);
		public int insert_column (Gtk.TreeViewColumn column, int position);
		public int insert_column_with_attributes (int position, string title, Gtk.CellRenderer cell, ...);
		public int insert_column_with_data_func (int position, string title, Gtk.CellRenderer cell, owned Gtk.TreeCellDataFunc func);
		[Version (since = "3.0")]
		public bool is_blank_at_pos (int x, int y, out Gtk.TreePath path, out Gtk.TreeViewColumn column, out int cell_x, out int cell_y);
		[CCode (cname = "gtk_tree_view_row_expanded")]
		public bool is_row_expanded (Gtk.TreePath path);
		[Version (since = "2.12")]
		public bool is_rubber_banding_active ();
		public void map_expanded_rows (Gtk.TreeViewMappingFunc func);
		public void move_column_after (Gtk.TreeViewColumn column, Gtk.TreeViewColumn? base_column);
		public int remove_column (Gtk.TreeViewColumn column);
		public void scroll_to_cell (Gtk.TreePath? path, Gtk.TreeViewColumn? column, bool use_align, float row_align, float col_align);
		public void scroll_to_point (int tree_x, int tree_y);
		[Version (since = "3.8")]
		public void set_activate_on_single_click (bool single);
		public void set_column_drag_function (owned Gtk.TreeViewColumnDropFunc? func);
		public void set_cursor (Gtk.TreePath path, Gtk.TreeViewColumn? focus_column, bool start_editing);
		[Version (since = "2.2")]
		public void set_cursor_on_cell (Gtk.TreePath path, Gtk.TreeViewColumn? focus_column, Gtk.CellRenderer? focus_cell, bool start_editing);
		public void set_drag_dest_row (Gtk.TreePath? path, Gtk.TreeViewDropPosition pos);
		public void set_enable_search (bool enable_search);
		[Version (since = "2.10")]
		public void set_enable_tree_lines (bool enabled);
		public void set_expander_column (Gtk.TreeViewColumn column);
		[Version (since = "2.6")]
		public void set_fixed_height_mode (bool enable);
		[Version (since = "2.10")]
		public void set_grid_lines (Gtk.TreeViewGridLines grid_lines);
		public void set_headers_clickable (bool setting);
		public void set_headers_visible (bool headers_visible);
		[Version (since = "2.6")]
		public void set_hover_expand (bool expand);
		[Version (since = "2.6")]
		public void set_hover_selection (bool hover);
		[Version (since = "2.12")]
		public void set_level_indentation (int indentation);
		public void set_model (Gtk.TreeModel? model);
		public void set_reorderable (bool reorderable);
		[Version (since = "2.6")]
		public void set_row_separator_func (owned Gtk.TreeViewRowSeparatorFunc? func);
		[Version (since = "2.10")]
		public void set_rubber_banding (bool enable);
		public void set_search_column (int column);
		[Version (since = "2.10")]
		public void set_search_entry (Gtk.Entry? entry);
		public void set_search_equal_func (owned Gtk.TreeViewSearchEqualFunc search_equal_func);
		[Version (since = "2.10")]
		public void set_search_position_func (owned Gtk.TreeViewSearchPositionFunc? func);
		[Version (since = "2.12")]
		public void set_show_expanders (bool enabled);
		[Version (since = "2.12")]
		public void set_tooltip_cell (Gtk.Tooltip tooltip, Gtk.TreePath? path, Gtk.TreeViewColumn? column, Gtk.CellRenderer? cell);
		[Version (since = "2.12")]
		public void set_tooltip_column (int column);
		[Version (since = "2.12")]
		public void set_tooltip_row (Gtk.Tooltip tooltip, Gtk.TreePath path);
		public void unset_rows_drag_dest ();
		public void unset_rows_drag_source ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TreeView.with_model (Gtk.TreeModel model);
		[Version (since = "3.8")]
		public bool activate_on_single_click { get; set; }
		[NoAccessorMethod]
		public Gtk.TreeViewGridLines enable_grid_lines { get; set; }
		public bool enable_search { get; set; }
		public bool enable_tree_lines { get; set; }
		public Gtk.TreeViewColumn expander_column { get; set; }
		[Version (since = "2.4")]
		public bool fixed_height_mode { get; set; }
		public bool headers_clickable { get; set; }
		public bool headers_visible { get; set; }
		[Version (since = "2.6")]
		public bool hover_expand { get; set; }
		[Version (since = "2.6")]
		public bool hover_selection { get; set; }
		[Version (since = "2.12")]
		public int level_indentation { get; set; }
		public Gtk.TreeModel model { get; set; }
		public bool reorderable { get; set; }
		public bool rubber_banding { get; set; }
		public int search_column { get; set; }
		[Version (since = "2.12")]
		public bool show_expanders { get; set; }
		public int tooltip_column { get; set; }
		public virtual signal void columns_changed ();
		public virtual signal void cursor_changed ();
		public virtual signal bool expand_collapse_cursor_row (bool logical, bool expand, bool open_all);
		public virtual signal bool move_cursor (Gtk.MovementStep step, int count);
		[HasEmitter]
		public virtual signal void row_activated (Gtk.TreePath path, Gtk.TreeViewColumn column);
		public virtual signal void row_collapsed (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal void row_expanded (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool select_all ();
		public virtual signal bool select_cursor_parent ();
		public virtual signal bool select_cursor_row (bool start_editing);
		public virtual signal bool start_interactive_search ();
		public virtual signal bool test_collapse_row (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool test_expand_row (Gtk.TreeIter iter, Gtk.TreePath path);
		public virtual signal bool toggle_cursor_row ();
		public virtual signal bool unselect_all ();
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_tree_view_accessible_get_type ()")]
	public class TreeViewAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Selection, Atk.Table, Gtk.CellAccessibleParent {
		[CCode (has_construct_function = false)]
		protected TreeViewAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_view_column_get_type ()")]
	public class TreeViewColumn : GLib.InitiallyUnowned, Gtk.Buildable, Gtk.CellLayout {
		[CCode (has_construct_function = false)]
		public TreeViewColumn ();
		public bool cell_get_position (Gtk.CellRenderer cell_renderer, out int x_offset, out int width);
		public void cell_get_size (Gdk.Rectangle? cell_area, out int x_offset, out int y_offset, out int width, out int height);
		public bool cell_is_visible ();
		public void cell_set_cell_data (Gtk.TreeModel tree_model, Gtk.TreeIter iter, bool is_expander, bool is_expanded);
		[Version (since = "2.2")]
		public void focus_cell (Gtk.CellRenderer cell);
		public float get_alignment ();
		[Version (since = "3.0")]
		public unowned Gtk.Widget get_button ();
		public bool get_clickable ();
		[Version (since = "2.4")]
		public bool get_expand ();
		public int get_fixed_width ();
		public int get_max_width ();
		public int get_min_width ();
		public bool get_reorderable ();
		public bool get_resizable ();
		public Gtk.TreeViewColumnSizing get_sizing ();
		public int get_sort_column_id ();
		public bool get_sort_indicator ();
		public Gtk.SortType get_sort_order ();
		public int get_spacing ();
		public unowned string get_title ();
		[Version (since = "2.12")]
		public unowned Gtk.Widget? get_tree_view ();
		public bool get_visible ();
		public unowned Gtk.Widget? get_widget ();
		public int get_width ();
		[Version (since = "3.2")]
		public int get_x_offset ();
		[Version (since = "2.8")]
		public void queue_resize ();
		public void set_alignment (float xalign);
		public void set_attributes (Gtk.CellRenderer cell_renderer, ...);
		public void set_clickable (bool clickable);
		[Version (since = "2.4")]
		public void set_expand (bool expand);
		public void set_fixed_width (int fixed_width);
		public void set_max_width (int max_width);
		public void set_min_width (int min_width);
		public void set_reorderable (bool reorderable);
		public void set_resizable (bool resizable);
		public void set_sizing (Gtk.TreeViewColumnSizing type);
		public void set_sort_column_id (int sort_column_id);
		public void set_sort_indicator (bool setting);
		public void set_sort_order (Gtk.SortType order);
		public void set_spacing (int spacing);
		public void set_title (string title);
		public void set_visible (bool visible);
		public void set_widget (Gtk.Widget? widget);
		[CCode (has_construct_function = false)]
		[Version (since = "3.0")]
		public TreeViewColumn.with_area (Gtk.CellArea area);
		[CCode (has_construct_function = false)]
		public TreeViewColumn.with_attributes (string title, Gtk.CellRenderer cell, ...);
		public float alignment { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public Gtk.CellArea cell_area { owned get; construct; }
		public bool clickable { get; set; }
		public bool expand { get; set; }
		public int fixed_width { get; set; }
		public int max_width { get; set; }
		public int min_width { get; set; }
		public bool reorderable { get; set; }
		public bool resizable { get; set; }
		public Gtk.TreeViewColumnSizing sizing { get; set; }
		[Version (since = "2.18")]
		public int sort_column_id { get; set; }
		public bool sort_indicator { get; set; }
		public Gtk.SortType sort_order { get; set; }
		public int spacing { get; set; }
		public string title { get; set; }
		public bool visible { get; set; }
		public Gtk.Widget widget { get; set; }
		public int width { get; }
		public int x_offset { get; }
		[HasEmitter]
		public virtual signal void clicked ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_viewport_get_type ()")]
	public class Viewport : Gtk.Bin, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Viewport (Gtk.Adjustment? hadjustment, Gtk.Adjustment? vadjustment);
		public Gtk.ShadowType get_shadow_type ();
		public void set_shadow_type (Gtk.ShadowType type);
		public Gtk.ShadowType shadow_type { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_volume_button_get_type ()")]
	public class VolumeButton : Gtk.ScaleButton, Atk.Implementor, Gtk.Actionable, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		[Version (since = "2.12")]
		public VolumeButton ();
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public bool use_symbolic { get; set construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_widget_get_type ()")]
	public class Widget : GLib.InitiallyUnowned, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false)]
		public Widget (GLib.Type type, ...);
		public bool activate ();
		public void add_accelerator (string accel_signal, Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods, Gtk.AccelFlags accel_flags);
		[Version (since = "3.0")]
		public void add_device_events (Gdk.Device device, Gdk.EventMask events);
		public void add_events (int events);
		[Version (since = "2.4")]
		public void add_mnemonic_label (Gtk.Widget label);
		[Version (since = "3.8")]
		public uint add_tick_callback (owned Gtk.TickCallback callback);
		[CCode (cname = "gtk_widget_class_bind_template_callback_full")]
		[Version (since = "3.10")]
		public class void bind_template_callback_full (string callback_name, [CCode (scope = "async")] GLib.Callback callback_symbol);
		[CCode (cname = "gtk_widget_class_bind_template_child_full")]
		[Version (since = "3.10")]
		public class void bind_template_child_full (string name, bool internal_child, ssize_t struct_offset);
		public bool child_focus (Gtk.DirectionType direction);
		public bool compute_expand (Gtk.Orientation orientation);
		[CCode (vfunc_name = "compute_expand")]
		[NoWrapper]
		public virtual void compute_expand_internal (out bool hexpand_p, out bool vexpand_p);
		public Pango.Context create_pango_context ();
		public Pango.Layout create_pango_layout (string? text);
		public void destroyed (ref unowned Gtk.Widget widget_pointer);
		[Version (since = "3.0")]
		public bool device_is_shadowed (Gdk.Device device);
		[NoWrapper]
		public virtual void dispatch_child_properties_changed ([CCode (array_length_cname = "n_pspecs", array_length_pos = 0.5, array_length_type = "guint", type = "GParamSpec**")] GLib.ParamSpec[] pspecs);
		[CCode (cname = "gtk_widget_draw")]
		[Version (since = "3.0")]
		public void draw_to_cairo_context (Cairo.Context cr);
		[Version (since = "2.12")]
		public void error_bell ();
		[CCode (cname = "gtk_widget_class_find_style_property")]
		[Version (since = "2.2")]
		public class unowned GLib.ParamSpec find_style_property (string property_name);
		public void freeze_child_notify ();
		public virtual unowned Atk.Object get_accessible ();
		[Version (since = "3.16")]
		public unowned GLib.ActionGroup? get_action_group (string prefix);
		[Version (since = "3.10")]
		public int get_allocated_baseline ();
		public int get_allocated_height ();
		[Version (since = "3.20")]
		public void get_allocated_size (out Gtk.Allocation allocation, out int baseline);
		public int get_allocated_width ();
		[Version (since = "2.18")]
		public void get_allocation (out Gtk.Allocation allocation);
		public unowned Gtk.Widget? get_ancestor (GLib.Type widget_type);
		[Version (since = "2.18")]
		public bool get_can_default ();
		[Version (since = "2.18")]
		public bool get_can_focus ();
		public bool get_child_visible ();
		[Version (since = "3.14")]
		public void get_clip (out Gtk.Allocation clip);
		[Version (since = "2.2")]
		public unowned Gtk.Clipboard get_clipboard (Gdk.Atom selection);
		[CCode (cname = "gtk_widget_class_get_css_name")]
		[Version (since = "3.20")]
		public class unowned string get_css_name ();
		public static Gtk.TextDirection get_default_direction ();
		[Version (since = "3.0")]
		public bool get_device_enabled (Gdk.Device device);
		[Version (since = "3.0")]
		public Gdk.EventMask get_device_events (Gdk.Device device);
		public Gtk.TextDirection get_direction ();
		[Version (since = "2.2")]
		public unowned Gdk.Display get_display ();
		public int get_events ();
		[Version (since = "3.90")]
		public unowned Gtk.Widget? get_first_child ();
		[Version (since = "3.20")]
		public bool get_focus_on_click ();
		[Version (since = "3.18")]
		public unowned Pango.FontMap? get_font_map ();
		[Version (since = "3.18")]
		public unowned Cairo.FontOptions? get_font_options ();
		[Version (since = "3.8")]
		public unowned Gdk.FrameClock? get_frame_clock ();
		public Gtk.Align get_halign ();
		[Version (since = "2.12")]
		public bool get_has_tooltip ();
		[Version (since = "2.18")]
		public bool get_has_window ();
		public bool get_hexpand ();
		public bool get_hexpand_set ();
		[Version (since = "3.90")]
		public unowned Gtk.Widget? get_last_child ();
		[Version (since = "2.20")]
		public bool get_mapped ();
		[Version (since = "3.0")]
		public int get_margin_bottom ();
		[Version (since = "3.12")]
		public int get_margin_end ();
		[Version (since = "3.12")]
		public int get_margin_start ();
		[Version (since = "3.0")]
		public int get_margin_top ();
		[Version (since = "3.4")]
		public Gdk.ModifierType get_modifier_mask (Gdk.ModifierIntent intent);
		[Version (since = "3.90")]
		public unowned Gtk.Widget? get_next_sibling ();
		[Version (since = "2.4")]
		public bool get_no_show_all ();
		[Version (since = "3.8")]
		public double get_opacity ();
		public unowned Pango.Context get_pango_context ();
		public unowned Gtk.Widget? get_parent ();
		public unowned Gdk.Window get_parent_window ();
		public unowned Gtk.WidgetPath get_path ();
		[Version (since = "3.0")]
		public void get_preferred_height (out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public void get_preferred_height_for_width (int width, out int minimum_height, out int natural_height);
		[Version (since = "3.0")]
		public void get_preferred_size (out Gtk.Requisition minimum_size, out Gtk.Requisition natural_size);
		[Version (since = "3.0")]
		public void get_preferred_width (out int minimum_width, out int natural_width);
		[Version (since = "3.0")]
		public void get_preferred_width_for_height (int height, out int minimum_width, out int natural_width);
		[Version (since = "3.90")]
		public unowned Gtk.Widget? get_prev_sibling ();
		[Version (since = "2.20")]
		public bool get_realized ();
		[Version (since = "2.18")]
		public bool get_receives_default ();
		[Version (since = "3.0")]
		public virtual Gtk.SizeRequestMode get_request_mode ();
		[Version (since = "3.10")]
		public int get_scale_factor ();
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_screen ();
		[Version (since = "2.18")]
		public bool get_sensitive ();
		public unowned Gtk.Settings get_settings ();
		public void get_size_request (out int width, out int height);
		[Version (since = "3.0")]
		public Gtk.StateFlags get_state_flags ();
		public unowned Gtk.StyleContext get_style_context ();
		public bool get_support_multidevice ();
		public unowned GLib.Object get_template_child (GLib.Type widget_type, string name);
		[Version (since = "2.12")]
		public string? get_tooltip_markup ();
		[Version (since = "2.12")]
		public string? get_tooltip_text ();
		[Version (since = "2.12")]
		public unowned Gtk.Window get_tooltip_window ();
		public unowned Gtk.Widget get_toplevel ();
		public Gtk.Align get_valign ();
		[Version (since = "3.10")]
		public Gtk.Align get_valign_with_baseline ();
		public bool get_vexpand ();
		public bool get_vexpand_set ();
		[Version (since = "2.18")]
		public bool get_visible ();
		[Version (since = "2.14")]
		public unowned Gdk.Window? get_window ();
		public void grab_default ();
		[Version (since = "2.18")]
		public bool has_grab ();
		[Version (since = "2.2")]
		public bool has_screen ();
		[Version (since = "3.2")]
		public bool has_visible_focus ();
		public bool hide_on_delete ();
		public bool in_destruction ();
		[Version (since = "3.10")]
		public void init_template ();
		[Version (since = "3.0")]
		public void input_shape_combine_region (Cairo.Region? region);
		[Version (since = "3.6")]
		public void insert_action_group (string name, GLib.ActionGroup? group);
		[CCode (cname = "gtk_widget_class_install_style_property")]
		public class void install_style_property (GLib.ParamSpec pspec);
		public bool intersect (Gdk.Rectangle area, Gdk.Rectangle? intersection);
		public bool is_ancestor (Gtk.Widget ancestor);
		[Version (since = "2.18")]
		public bool is_drawable ();
		[Version (since = "2.18")]
		public bool is_sensitive ();
		[Version (since = "2.18")]
		public bool is_toplevel ();
		[Version (since = "3.8")]
		public bool is_visible ();
		public GLib.List<weak GLib.Closure> list_accel_closures ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "3.16")]
		public (unowned string)[] list_action_prefixes ();
		[Version (since = "2.4")]
		public GLib.List<weak Gtk.Widget> list_mnemonic_labels ();
		[CCode (array_length_pos = 0.1, array_length_type = "guint", cname = "gtk_widget_class_list_style_properties")]
		[Version (since = "2.2")]
		public class (unowned GLib.ParamSpec)[] list_style_properties ();
		[Version (since = "3.90")]
		public virtual void measure (Gtk.Orientation orientation, int for_size, out int minimum, out int natural, out int minimum_baseline, out int natural_baseline);
		[Version (since = "3.20")]
		public void queue_allocate ();
		public void queue_compute_expand ();
		public void queue_draw ();
		public void queue_draw_area (int x, int y, int width, int height);
		[NoWrapper]
		public virtual void queue_draw_child (Gtk.Widget child, Cairo.Region region);
		[Version (since = "3.0")]
		public virtual void queue_draw_region (Cairo.Region region);
		public void queue_resize ();
		[Version (since = "2.4")]
		public void queue_resize_no_redraw ();
		[Version (since = "3.8")]
		public void register_window (Gdk.Window window);
		public bool remove_accelerator (Gtk.AccelGroup accel_group, uint accel_key, Gdk.ModifierType accel_mods);
		[Version (since = "2.4")]
		public void remove_mnemonic_label (Gtk.Widget label);
		[Version (since = "3.8")]
		public void remove_tick_callback (uint id);
		[Version (since = "3.0")]
		public void reset_style ();
		[Version (since = "2.20")]
		public bool send_focus_change (Gdk.Event event);
		public void set_accel_path (string? accel_path, Gtk.AccelGroup? accel_group);
		[CCode (cname = "gtk_widget_class_set_accessible_role")]
		[Version (since = "3.2")]
		public class void set_accessible_role (Atk.Role role);
		[CCode (cname = "gtk_widget_class_set_accessible_type")]
		[Version (since = "3.2")]
		public class void set_accessible_type (GLib.Type type);
		[Version (since = "2.18")]
		public void set_allocation (Gtk.Allocation allocation);
		[Version (since = "2.18")]
		public void set_can_default (bool can_default);
		[Version (since = "2.18")]
		public void set_can_focus (bool can_focus);
		public void set_child_visible (bool is_visible);
		[Version (since = "3.14")]
		public void set_clip (Gtk.Allocation clip);
		[CCode (cname = "gtk_widget_class_set_connect_func")]
		[Version (since = "3.10")]
		public class void set_connect_func (owned Gtk.BuilderConnectFunc connect_func);
		[CCode (cname = "gtk_widget_class_set_css_name")]
		[Version (since = "3.20")]
		public class void set_css_name (string name);
		public static void set_default_direction (Gtk.TextDirection dir);
		[Version (since = "3.0")]
		public void set_device_enabled (Gdk.Device device, bool enabled);
		[Version (since = "3.0")]
		public void set_device_events (Gdk.Device device, Gdk.EventMask events);
		public void set_direction (Gtk.TextDirection dir);
		public void set_events (int events);
		public void set_focus_child (Gtk.Widget child);
		[Version (since = "3.20")]
		public void set_focus_on_click (bool focus_on_click);
		[Version (since = "3.18")]
		public void set_font_map (Pango.FontMap? font_map);
		[Version (since = "3.18")]
		public void set_font_options (Cairo.FontOptions? options);
		public void set_halign (Gtk.Align align);
		[Version (since = "2.12")]
		public void set_has_tooltip (bool has_tooltip);
		[Version (since = "2.18")]
		public void set_has_window (bool has_window);
		public void set_hexpand (bool expand);
		public void set_hexpand_set (bool @set);
		[Version (since = "3.0")]
		public void set_margin_bottom (int margin);
		[Version (since = "3.12")]
		public void set_margin_end (int margin);
		[Version (since = "3.12")]
		public void set_margin_start (int margin);
		[Version (since = "3.0")]
		public void set_margin_top (int margin);
		[Version (since = "2.4")]
		public void set_no_show_all (bool no_show_all);
		[Version (since = "3.8")]
		public void set_opacity (double opacity);
		public void set_parent (Gtk.Widget parent);
		public void set_parent_window (Gdk.Window parent_window);
		[Version (since = "2.20")]
		public void set_realized (bool realized);
		[Version (since = "2.18")]
		public void set_receives_default (bool receives_default);
		public void set_redraw_on_allocate (bool redraw_on_allocate);
		public void set_sensitive (bool sensitive);
		public void set_size_request (int width, int height);
		[Version (since = "3.0")]
		public void set_state_flags (Gtk.StateFlags flags, bool clear);
		[Version (since = "3.0")]
		public void set_support_multidevice (bool support_multidevice);
		[CCode (cname = "gtk_widget_class_set_template")]
		[Version (since = "3.10")]
		public class void set_template (GLib.Bytes template_bytes);
		[CCode (cname = "gtk_widget_class_set_template_from_resource")]
		[Version (since = "3.10")]
		public class void set_template_from_resource (string resource_name);
		[Version (since = "2.12")]
		public void set_tooltip_markup (string? markup);
		[Version (since = "2.12")]
		public void set_tooltip_text (string? text);
		[Version (since = "2.12")]
		public void set_tooltip_window (Gtk.Window? custom_window);
		public void set_valign (Gtk.Align align);
		public void set_vexpand (bool expand);
		public void set_vexpand_set (bool @set);
		[Version (since = "2.18")]
		public void set_visible (bool visible);
		[Version (since = "2.18")]
		public void set_window (owned Gdk.Window window);
		[Version (since = "3.0")]
		public void shape_combine_region (Cairo.Region? region);
		public virtual void show_all ();
		public void show_now ();
		[Version (since = "3.10")]
		public void size_allocate_with_baseline (Gtk.Allocation allocation, int baseline);
		[NoWrapper]
		public virtual void snapshot (Gtk.Snapshot snapshot);
		public void snapshot_child (Gtk.Widget child, Gtk.Snapshot snapshot);
		public void style_get (...);
		public void style_get_valist (string first_property_name, [CCode (type = "va_list")] va_list var_args);
		public void thaw_child_notify ();
		public bool translate_coordinates (Gtk.Widget dest_widget, int src_x, int src_y, out int dest_x, out int dest_y);
		[Version (since = "2.12")]
		public void trigger_tooltip_query ();
		public void unparent ();
		[Version (since = "3.8")]
		public void unregister_window (Gdk.Window window);
		[Version (since = "3.0")]
		public void unset_state_flags (Gtk.StateFlags flags);
		public bool can_default { get; set; }
		public bool can_focus { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.90")]
		public string css_name { owned get; construct; }
		public Gdk.EventMask events { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public bool expand { get; set; }
		[Version (since = "3.20")]
		public bool focus_on_click { get; set; }
		[Version (since = "3.0")]
		public Gtk.Align halign { get; set; }
		[NoAccessorMethod]
		public bool has_default { get; set; }
		[NoAccessorMethod]
		public bool has_focus { get; set; }
		[Version (since = "2.12")]
		public bool has_tooltip { get; set; }
		[NoAccessorMethod]
		public int height_request { get; set; }
		[Version (since = "3.0")]
		public bool hexpand { get; set; }
		[Version (since = "3.0")]
		public bool hexpand_set { get; set; }
		[NoAccessorMethod]
		public bool is_focus { get; set; }
		[NoAccessorMethod]
		[Version (since = "3.0")]
		public int margin { get; set; }
		[Version (since = "3.0")]
		public int margin_bottom { get; set; }
		[Version (since = "3.12")]
		public int margin_end { get; set; }
		[Version (since = "3.12")]
		public int margin_start { get; set; }
		[Version (since = "3.0")]
		public int margin_top { get; set; }
		public string name { get; set; }
		public bool no_show_all { get; set; }
		[Version (since = "3.8")]
		public double opacity { get; set; }
		public Gtk.Widget parent { get; set; }
		public bool receives_default { get; set; }
		[Version (since = "3.10")]
		public int scale_factor { get; }
		public bool sensitive { get; set; }
		[Version (since = "2.12")]
		public string tooltip_markup { owned get; set; }
		[Version (since = "2.12")]
		public string tooltip_text { owned get; set; }
		[Version (since = "3.0")]
		public Gtk.Align valign { get; set; }
		[Version (since = "3.0")]
		public bool vexpand { get; set; }
		[Version (since = "3.0")]
		public bool vexpand_set { get; set; }
		public bool visible { get; set; }
		[NoAccessorMethod]
		public int width_request { get; set; }
		[Version (since = "2.14")]
		public Gdk.Window window { get; }
		public signal void accel_closures_changed ();
		public virtual signal bool button_press_event (Gdk.EventButton event);
		public virtual signal bool button_release_event (Gdk.EventButton event);
		[HasEmitter]
		public virtual signal bool can_activate_accel (uint signal_id);
		[HasEmitter]
		public virtual signal void child_notify (GLib.ParamSpec child_property);
		public virtual signal bool configure_event (Gdk.EventConfigure event);
		public virtual signal bool delete_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal void destroy ();
		public virtual signal bool destroy_event (Gdk.EventAny event);
		public virtual signal void direction_changed (Gtk.TextDirection previous_direction);
		public virtual signal void drag_begin (Gdk.DragContext context);
		public virtual signal void drag_data_delete (Gdk.DragContext context);
		public virtual signal void drag_data_get (Gdk.DragContext context, Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal void drag_data_received (Gdk.DragContext context, int x, int y, Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal bool drag_drop (Gdk.DragContext context, int x, int y, uint time_);
		public virtual signal void drag_end (Gdk.DragContext context);
		[Version (since = "2.12")]
		public virtual signal bool drag_failed (Gdk.DragContext context, Gtk.DragResult result);
		public virtual signal void drag_leave (Gdk.DragContext context, uint time_);
		public virtual signal bool drag_motion (Gdk.DragContext context, int x, int y, uint time_);
		[Version (since = "3.0")]
		public virtual signal bool draw (Cairo.Context cr);
		public virtual signal bool enter_notify_event (Gdk.EventCrossing event);
		[HasEmitter]
		public virtual signal bool event (Gdk.Event event);
		public signal void event_after (Gdk.Event event);
		public virtual signal bool focus (Gtk.DirectionType direction);
		public virtual signal bool focus_in_event (Gdk.EventFocus event);
		public virtual signal bool focus_out_event (Gdk.EventFocus event);
		[Version (since = "2.8")]
		public virtual signal bool grab_broken_event (Gdk.EventGrabBroken event);
		[HasEmitter]
		public virtual signal void grab_focus ();
		public virtual signal void grab_notify (bool was_grabbed);
		[HasEmitter]
		public virtual signal void hide ();
		public virtual signal void hierarchy_changed (Gtk.Widget? previous_toplevel);
		public virtual signal bool key_press_event (Gdk.EventKey event);
		public virtual signal bool key_release_event (Gdk.EventKey event);
		[HasEmitter]
		[Version (since = "2.12")]
		public virtual signal bool keynav_failed (Gtk.DirectionType direction);
		public virtual signal bool leave_notify_event (Gdk.EventCrossing event);
		[HasEmitter]
		public virtual signal void map ();
		public virtual signal bool map_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal bool mnemonic_activate (bool group_cycling);
		public virtual signal bool motion_notify_event (Gdk.EventMotion event);
		public virtual signal void move_focus (Gtk.DirectionType direction);
		public virtual signal void parent_set (Gtk.Widget? previous_parent);
		public virtual signal bool popup_menu ();
		public virtual signal bool property_notify_event (Gdk.EventProperty event);
		public virtual signal bool proximity_in_event (Gdk.EventProximity event);
		public virtual signal bool proximity_out_event (Gdk.EventProximity event);
		[Version (since = "2.12")]
		public virtual signal bool query_tooltip (int x, int y, bool keyboard_tooltip, Gtk.Tooltip tooltip);
		[HasEmitter]
		public virtual signal void realize ();
		public virtual signal void screen_changed (Gdk.Screen? previous_screen);
		public virtual signal bool scroll_event (Gdk.EventScroll event);
		public virtual signal bool selection_clear_event (Gdk.EventSelection event);
		public virtual signal void selection_get (Gtk.SelectionData selection_data, uint info, uint time_);
		public virtual signal bool selection_notify_event (Gdk.EventSelection event);
		public virtual signal void selection_received (Gtk.SelectionData selection_data, uint time_);
		public virtual signal bool selection_request_event (Gdk.EventSelection event);
		[HasEmitter]
		public virtual signal void show ();
		[HasEmitter]
		public virtual signal void size_allocate (Gtk.Allocation allocation);
		[Version (since = "3.0")]
		public virtual signal void state_flags_changed (Gtk.StateFlags previous_state_flags);
		[Version (since = "3.0")]
		public virtual signal void style_updated ();
		public virtual signal bool touch_event (Gdk.Event event);
		[HasEmitter]
		public virtual signal void unmap ();
		public virtual signal bool unmap_event (Gdk.EventAny event);
		[HasEmitter]
		public virtual signal void unrealize ();
		public virtual signal bool window_state_event (Gdk.EventWindowState event);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_widget_accessible_get_type ()")]
	public class WidgetAccessible : Gtk.Accessible, Atk.Component {
		[CCode (has_construct_function = false)]
		protected WidgetAccessible ();
		[NoWrapper]
		public virtual void notify_gtk (GLib.ParamSpec pspec);
	}
	[CCode (cheader_filename = "gtk/gtk.h", ref_function = "gtk_widget_path_ref", type_id = "gtk_widget_path_get_type ()", unref_function = "gtk_widget_path_unref")]
	[Compact]
	public class WidgetPath {
		[CCode (has_construct_function = false)]
		[Version (since = "3.0")]
		public WidgetPath ();
		[Version (since = "3.2")]
		public int append_for_widget (Gtk.Widget widget);
		[Version (since = "3.0")]
		public int append_type (GLib.Type type);
		[Version (since = "3.2")]
		public int append_with_siblings (Gtk.WidgetPath siblings, uint sibling_index);
		[Version (since = "3.0")]
		public Gtk.WidgetPath copy ();
		[Version (since = "3.0")]
		public void free ();
		[Version (since = "3.0")]
		public GLib.Type get_object_type ();
		[Version (since = "3.0")]
		public bool has_parent (GLib.Type type);
		[Version (since = "3.0")]
		public bool is_type (GLib.Type type);
		[Version (since = "3.0")]
		public void iter_add_class (int pos, string name);
		[Version (since = "3.0")]
		public void iter_clear_classes (int pos);
		public unowned string? iter_get_name (int pos);
		[Version (since = "3.20")]
		public unowned string? iter_get_object_name (int pos);
		[Version (since = "3.0")]
		public GLib.Type iter_get_object_type (int pos);
		public uint iter_get_sibling_index (int pos);
		public unowned Gtk.WidgetPath iter_get_siblings (int pos);
		[Version (since = "3.14")]
		public Gtk.StateFlags iter_get_state (int pos);
		[Version (since = "3.0")]
		public bool iter_has_class (int pos, string name);
		[Version (since = "3.0")]
		public bool iter_has_name (int pos, string name);
		[Version (since = "3.0")]
		public bool iter_has_qclass (int pos, GLib.Quark qname);
		[Version (since = "3.0")]
		public bool iter_has_qname (int pos, GLib.Quark qname);
		[Version (since = "3.0")]
		public GLib.SList<weak string> iter_list_classes (int pos);
		[Version (since = "3.0")]
		public void iter_remove_class (int pos, string name);
		[Version (since = "3.0")]
		public void iter_set_name (int pos, string name);
		[Version (since = "3.20")]
		public void iter_set_object_name (int pos, string? name);
		[Version (since = "3.0")]
		public void iter_set_object_type (int pos, GLib.Type type);
		[Version (since = "3.14")]
		public void iter_set_state (int pos, Gtk.StateFlags state);
		[Version (since = "3.0")]
		public int length ();
		[Version (since = "3.0")]
		public void prepend_type (GLib.Type type);
		[Version (since = "3.2")]
		public Gtk.WidgetPath @ref ();
		[Version (since = "3.2")]
		public string to_string ();
		[Version (since = "3.2")]
		public void unref ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_window_get_type ()")]
	public class Window : Gtk.Bin, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Window (Gtk.WindowType type = Gtk.WindowType.TOPLEVEL);
		[Version (since = "2.4")]
		public bool activate_key (Gdk.EventKey event);
		public void add_accel_group (Gtk.AccelGroup accel_group);
		public void add_mnemonic (uint keyval, Gtk.Widget target);
		public void begin_move_drag (int button, int root_x, int root_y, uint32 timestamp);
		public void begin_resize_drag (Gdk.WindowEdge edge, int button, int root_x, int root_y, uint32 timestamp);
		[Version (since = "3.10")]
		public void close ();
		public void deiconify ();
		[Version (since = "2.2")]
		public void fullscreen ();
		[Version (since = "3.18")]
		public void fullscreen_on_monitor (Gdk.Screen screen, int monitor);
		[Version (since = "2.4")]
		public bool get_accept_focus ();
		[Version (since = "3.0")]
		public unowned Gtk.Application? get_application ();
		[Version (since = "3.4")]
		public unowned Gtk.Widget? get_attached_to ();
		public bool get_decorated ();
		public static GLib.List<weak Gdk.Pixbuf> get_default_icon_list ();
		[Version (since = "2.16")]
		public static unowned string get_default_icon_name ();
		public void get_default_size (out int width, out int height);
		[Version (since = "2.14")]
		public unowned Gtk.Widget? get_default_widget ();
		[Version (since = "2.10")]
		public bool get_deletable ();
		public bool get_destroy_with_parent ();
		public unowned Gtk.Widget? get_focus ();
		[Version (since = "2.6")]
		public bool get_focus_on_map ();
		[Version (since = "3.2")]
		public bool get_focus_visible ();
		public Gdk.Gravity get_gravity ();
		[Version (since = "2.10")]
		public unowned Gtk.WindowGroup get_group ();
		[Version (since = "3.4")]
		public bool get_hide_titlebar_when_maximized ();
		public unowned Gdk.Pixbuf get_icon ();
		public GLib.List<weak Gdk.Pixbuf> get_icon_list ();
		[Version (since = "2.6")]
		public unowned string? get_icon_name ();
		public Gdk.ModifierType get_mnemonic_modifier ();
		[Version (since = "2.20")]
		public bool get_mnemonics_visible ();
		public bool get_modal ();
		public void get_position (out int root_x, out int root_y);
		public bool get_resizable ();
		public unowned string? get_role ();
		[Version (since = "2.2")]
		public unowned Gdk.Screen get_screen ();
		public void get_size (out int? width, out int? height);
		[Version (since = "2.2")]
		public bool get_skip_pager_hint ();
		[Version (since = "2.2")]
		public bool get_skip_taskbar_hint ();
		public unowned string? get_title ();
		[Version (since = "3.16")]
		public unowned Gtk.Widget? get_titlebar ();
		public unowned Gtk.Window? get_transient_for ();
		public Gdk.WindowTypeHint get_type_hint ();
		[Version (since = "2.8")]
		public bool get_urgency_hint ();
		[Version (since = "2.20")]
		public Gtk.WindowType get_window_type ();
		public bool has_group ();
		public void iconify ();
		public static GLib.List<weak Gtk.Window> list_toplevels ();
		public void maximize ();
		public bool mnemonic_activate (uint keyval, Gdk.ModifierType modifier);
		public void move (int x, int y);
		public void present ();
		[Version (since = "2.8")]
		public void present_with_time (uint32 timestamp);
		[Version (since = "2.4")]
		public bool propagate_key_event (Gdk.EventKey event);
		public void remove_accel_group (Gtk.AccelGroup accel_group);
		public void remove_mnemonic (uint keyval, Gtk.Widget target);
		public void resize (int width, int height);
		[Version (since = "2.4")]
		public void set_accept_focus (bool setting);
		[Version (since = "3.0")]
		public void set_application (Gtk.Application? application);
		[Version (since = "3.4")]
		public void set_attached_to (Gtk.Widget? attach_widget);
		[Version (since = "2.2")]
		public static void set_auto_startup_notification (bool setting);
		public void set_decorated (bool setting);
		public void set_default (Gtk.Widget? default_widget);
		[Version (since = "2.4")]
		public static void set_default_icon (Gdk.Pixbuf icon);
		[Version (since = "2.2")]
		public static bool set_default_icon_from_file (string filename) throws GLib.Error;
		public static void set_default_icon_list (owned GLib.List<weak Gdk.Pixbuf> list);
		[Version (since = "2.6")]
		public static void set_default_icon_name (string name);
		public void set_default_size (int width, int height);
		[Version (since = "2.10")]
		public void set_deletable (bool setting);
		public void set_destroy_with_parent (bool setting);
		[Version (since = "2.6")]
		public void set_focus_on_map (bool setting);
		[Version (since = "3.2")]
		public void set_focus_visible (bool setting);
		public void set_gravity (Gdk.Gravity gravity);
		[Version (since = "3.0")]
		public void set_has_user_ref_count (bool setting);
		[Version (since = "3.4")]
		public void set_hide_titlebar_when_maximized (bool setting);
		public void set_icon (Gdk.Pixbuf? icon);
		[Version (since = "2.2")]
		public bool set_icon_from_file (string filename) throws GLib.Error;
		public void set_icon_list (GLib.List<Gdk.Pixbuf> list);
		[Version (since = "2.6")]
		public void set_icon_name (string? name);
		[Version (since = "3.14")]
		public static void set_interactive_debugging (bool enable);
		[Version (since = "2.4")]
		public void set_keep_above (bool setting);
		[Version (since = "2.4")]
		public void set_keep_below (bool setting);
		public void set_mnemonic_modifier (Gdk.ModifierType modifier);
		[Version (since = "2.20")]
		public void set_mnemonics_visible (bool setting);
		public void set_modal (bool modal);
		public void set_position (Gtk.WindowPosition position);
		public void set_resizable (bool resizable);
		public void set_role (string role);
		[Version (since = "2.2")]
		public void set_screen (Gdk.Screen screen);
		[Version (since = "2.2")]
		public void set_skip_pager_hint (bool setting);
		[Version (since = "2.2")]
		public void set_skip_taskbar_hint (bool setting);
		[Version (since = "2.12")]
		public void set_startup_id (string startup_id);
		public void set_title (string title);
		[Version (since = "3.10")]
		public void set_titlebar (Gtk.Widget? titlebar);
		public void set_transient_for (Gtk.Window? parent);
		public void set_type_hint (Gdk.WindowTypeHint hint);
		[Version (since = "2.8")]
		public void set_urgency_hint (bool setting);
		public void stick ();
		[CCode (cname = "gtk_window_activate_default")]
		public bool try_activate_default ();
		[CCode (cname = "gtk_window_activate_focus")]
		public bool try_activate_focus ();
		[Version (since = "2.2")]
		public void unfullscreen ();
		public void unmaximize ();
		public void unstick ();
		[Version (since = "2.4")]
		public bool accept_focus { get; set; }
		[Version (since = "3.0")]
		public Gtk.Application application { get; set; }
		[Version (since = "3.4")]
		public Gtk.Widget attached_to { get; set construct; }
		[Version (since = "2.4")]
		public bool decorated { get; set; }
		[NoAccessorMethod]
		public int default_height { get; set; }
		[NoAccessorMethod]
		public int default_width { get; set; }
		[Version (since = "2.10")]
		public bool deletable { get; set; }
		public bool destroy_with_parent { get; set; }
		[Version (since = "2.6")]
		public bool focus_on_map { get; set; }
		[Version (since = "2.20")]
		public bool focus_visible { get; set; }
		[Version (since = "2.4")]
		public Gdk.Gravity gravity { get; set; }
		[NoAccessorMethod]
		public bool has_toplevel_focus { get; }
		[Version (since = "3.4")]
		public bool hide_titlebar_when_maximized { get; set; }
		public Gdk.Pixbuf icon { get; set; }
		[Version (since = "2.6")]
		public string icon_name { get; set; }
		[NoAccessorMethod]
		public bool is_active { get; }
		[NoAccessorMethod]
		public bool is_maximized { get; }
		[Version (since = "2.20")]
		public bool mnemonics_visible { get; set; }
		public bool modal { get; set; }
		public bool resizable { get; set; }
		public string role { get; set; }
		public Gdk.Screen screen { get; set; }
		public bool skip_pager_hint { get; set; }
		public bool skip_taskbar_hint { get; set; }
		[Version (since = "2.12")]
		public string startup_id { set; }
		public string title { get; set; }
		[Version (since = "2.10")]
		public Gtk.Window transient_for { get; set construct; }
		[NoAccessorMethod]
		public Gtk.WindowType type { get; construct; }
		public Gdk.WindowTypeHint type_hint { get; set; }
		public bool urgency_hint { get; set; }
		[NoAccessorMethod]
		public Gtk.WindowPosition window_position { get; set; }
		public virtual signal void activate_default ();
		public virtual signal void activate_focus ();
		public virtual signal bool enable_debugging (bool toggle);
		public virtual signal void keys_changed ();
		[HasEmitter]
		public virtual signal void set_focus (Gtk.Widget? focus);
	}
	[CCode (cheader_filename = "gtk/gtk.h,gtk/gtk-a11y.h", type_id = "gtk_window_accessible_get_type ()")]
	public class WindowAccessible : Gtk.ContainerAccessible, Atk.Component, Atk.Window {
		[CCode (has_construct_function = false)]
		protected WindowAccessible ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	[Compact]
	public class WindowGeometryInfo {
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_window_group_get_type ()")]
	public class WindowGroup : GLib.Object {
		[CCode (has_construct_function = false)]
		public WindowGroup ();
		public void add_window (Gtk.Window window);
		[Version (since = "3.0")]
		public unowned Gtk.Widget? get_current_device_grab (Gdk.Device device);
		[Version (since = "2.22")]
		public unowned Gtk.Widget get_current_grab ();
		[Version (since = "2.14")]
		public GLib.List<weak Gtk.Window> list_windows ();
		public void remove_window (Gtk.Window window);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkActionableInterface", type_id = "gtk_actionable_get_type ()")]
	public interface Actionable : Gtk.Widget {
		[Version (since = "3.4")]
		public abstract unowned string? get_action_name ();
		[Version (since = "3.4")]
		public abstract unowned GLib.Variant get_action_target_value ();
		[Version (since = "3.4")]
		public abstract void set_action_name (string? action_name);
		[Version (since = "3.4")]
		public void set_action_target (string format_string, ...);
		[Version (since = "3.4")]
		public abstract void set_action_target_value (GLib.Variant target_value);
		[Version (since = "3.4")]
		public void set_detailed_action_name (string detailed_action_name);
		public abstract string action_name { get; set; }
		[NoAccessorMethod]
		public abstract GLib.Variant action_target { owned get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_app_chooser_get_type ()")]
	public interface AppChooser : Gtk.Widget {
		[Version (since = "3.0")]
		public GLib.AppInfo? get_app_info ();
		[Version (since = "3.0")]
		public string get_content_type ();
		[Version (since = "3.0")]
		public void refresh ();
		[ConcreteAccessor]
		public abstract string content_type { owned get; construct; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_buildable_get_type ()")]
	public interface Buildable : GLib.Object {
		[Version (since = "2.12")]
		public abstract void add_child (Gtk.Builder builder, GLib.Object child, string? type);
		[Version (since = "2.12")]
		public abstract GLib.Object construct_child (Gtk.Builder builder, string name);
		[Version (since = "2.12")]
		public abstract void custom_finished (Gtk.Builder builder, GLib.Object? child, string tagname, void* data);
		[Version (since = "2.12")]
		public abstract void custom_tag_end (Gtk.Builder builder, GLib.Object? child, string tagname, void* data);
		[Version (since = "2.12")]
		public abstract bool custom_tag_start (Gtk.Builder builder, GLib.Object? child, string tagname, out GLib.MarkupParser parser, out void* data);
		[Version (since = "2.12")]
		public abstract unowned GLib.Object get_internal_child (Gtk.Builder builder, string childname);
		[Version (since = "2.12")]
		public abstract unowned string get_name ();
		[Version (since = "2.12")]
		public abstract void parser_finished (Gtk.Builder builder);
		[Version (since = "2.12")]
		public abstract void set_buildable_property (Gtk.Builder builder, string name, GLib.Value value);
		[Version (since = "2.12")]
		public abstract void set_name (string name);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_accessible_parent_get_type ()")]
	public interface CellAccessibleParent : GLib.Object {
		public abstract void activate (Gtk.CellAccessible cell);
		public abstract void edit (Gtk.CellAccessible cell);
		public abstract void expand_collapse (Gtk.CellAccessible cell);
		public abstract void get_cell_area (Gtk.CellAccessible cell, Gdk.Rectangle cell_rect);
		public abstract void get_cell_extents (Gtk.CellAccessible cell, int x, int y, int width, int height, Atk.CoordType coord_type);
		public abstract int get_child_index (Gtk.CellAccessible cell);
		public abstract Gtk.CellRendererState get_renderer_state (Gtk.CellAccessible cell);
		public abstract bool grab_focus (Gtk.CellAccessible cell);
		public abstract void update_relationset (Gtk.CellAccessible cell, Atk.RelationSet relationset);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_editable_get_type ()")]
	public interface CellEditable : Gtk.Widget {
		public abstract void start_editing (Gdk.Event? event);
		[NoAccessorMethod]
		[Version (since = "2.20")]
		public abstract bool editing_canceled { get; set; }
		[HasEmitter]
		public virtual signal void editing_done ();
		[HasEmitter]
		public virtual signal void remove_widget ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_cell_layout_get_type ()")]
	public interface CellLayout : GLib.Object {
		[Version (since = "2.4")]
		public abstract void add_attribute (Gtk.CellRenderer cell, string attribute, int column);
		[Version (since = "2.4")]
		public abstract void clear ();
		[Version (since = "2.4")]
		public abstract void clear_attributes (Gtk.CellRenderer cell);
		[Version (since = "3.0")]
		public abstract unowned Gtk.CellArea? get_area ();
		[Version (since = "2.12")]
		public abstract GLib.List<weak Gtk.CellRenderer> get_cells ();
		[Version (since = "2.4")]
		public abstract void pack_end (Gtk.CellRenderer cell, bool expand);
		[Version (since = "2.4")]
		public abstract void pack_start (Gtk.CellRenderer cell, bool expand);
		[Version (since = "2.4")]
		public abstract void reorder (Gtk.CellRenderer cell, int position);
		[Version (since = "2.4")]
		public void set_attributes (Gtk.CellRenderer cell, ...);
		[Version (since = "2.4")]
		public abstract void set_cell_data_func (Gtk.CellRenderer cell, owned Gtk.CellLayoutDataFunc? func);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkColorChooserInterface", type_id = "gtk_color_chooser_get_type ()")]
	public interface ColorChooser : GLib.Object {
		[Version (since = "3.4")]
		public abstract void add_palette (Gtk.Orientation orientation, int colors_per_line, [CCode (array_length_cname = "n_colors", array_length_pos = 2.5)] Gdk.RGBA[]? colors);
		[Version (since = "3.4")]
		public abstract Gdk.RGBA get_rgba ();
		[Version (since = "3.4")]
		public bool get_use_alpha ();
		[Version (since = "3.4")]
		public abstract void set_rgba (Gdk.RGBA color);
		[Version (since = "3.4")]
		public void set_use_alpha (bool use_alpha);
		[ConcreteAccessor]
		[Version (since = "3.4")]
		public abstract Gdk.RGBA rgba { get; set; }
		[ConcreteAccessor]
		[Version (since = "3.4")]
		public abstract bool use_alpha { get; set; }
		[Version (since = "3.4")]
		public virtual signal void color_activated (Gdk.RGBA color);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkEditableInterface", type_id = "gtk_editable_get_type ()")]
	public interface Editable : GLib.Object {
		public void copy_clipboard ();
		public void cut_clipboard ();
		public void delete_selection ();
		[NoWrapper]
		public abstract void do_delete_text (int start_pos, int end_pos);
		[NoWrapper]
		public abstract void do_insert_text (string new_text, int new_text_length, ref int position);
		public abstract string get_chars (int start_pos = 0, int end_pos = -1);
		public bool get_editable ();
		public abstract int get_position ();
		public abstract bool get_selection_bounds (out int start_pos, out int end_pos);
		public void paste_clipboard ();
		[CCode (vfunc_name = "set_selection_bounds")]
		public abstract void select_region (int start_pos, int end_pos);
		public void set_editable (bool is_editable);
		public abstract void set_position (int position);
		public virtual signal void changed ();
		public virtual signal void delete_text (int start_pos, int end_pos);
		public virtual signal void insert_text (string new_text, int new_text_length, ref int position);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_file_chooser_get_type ()")]
	public interface FileChooser : GLib.Object {
		[Version (since = "3.22")]
		public void add_choice (string id, string label, string options, string option_labels);
		[Version (since = "2.4")]
		public void add_filter (owned Gtk.FileFilter filter);
		[Version (since = "2.4")]
		public bool add_shortcut_folder (string folder) throws GLib.Error;
		[Version (since = "2.4")]
		public bool add_shortcut_folder_uri (string uri) throws GLib.Error;
		[Version (since = "2.4")]
		public Gtk.FileChooserAction get_action ();
		[Version (since = "3.22")]
		public unowned string get_choice (string id);
		[Version (since = "2.18")]
		public bool get_create_folders ();
		[Version (since = "2.4")]
		public string? get_current_folder ();
		[Version (since = "2.14")]
		public GLib.File get_current_folder_file ();
		[Version (since = "2.4")]
		public string? get_current_folder_uri ();
		[Version (since = "3.10")]
		public string get_current_name ();
		[Version (since = "2.8")]
		public bool get_do_overwrite_confirmation ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_extra_widget ();
		[Version (since = "2.14")]
		public GLib.File get_file ();
		[Version (since = "2.4")]
		public string? get_filename ();
		[Version (since = "2.4")]
		public GLib.SList<string> get_filenames ();
		[Version (since = "2.14")]
		public GLib.SList<GLib.File> get_files ();
		[Version (since = "2.4")]
		public unowned Gtk.FileFilter? get_filter ();
		[Version (since = "2.4")]
		public bool get_local_only ();
		[Version (since = "2.14")]
		public GLib.File? get_preview_file ();
		[Version (since = "2.4")]
		public string? get_preview_filename ();
		[Version (since = "2.4")]
		public string? get_preview_uri ();
		[Version (since = "2.4")]
		public unowned Gtk.Widget? get_preview_widget ();
		[Version (since = "2.4")]
		public bool get_preview_widget_active ();
		[Version (since = "2.4")]
		public bool get_select_multiple ();
		[Version (since = "2.6")]
		public bool get_show_hidden ();
		[Version (since = "2.4")]
		public string? get_uri ();
		[Version (since = "2.4")]
		public GLib.SList<string> get_uris ();
		public bool get_use_preview_label ();
		[Version (since = "2.4")]
		public GLib.SList<weak Gtk.FileFilter> list_filters ();
		[Version (since = "2.4")]
		public GLib.SList<string>? list_shortcut_folder_uris ();
		[Version (since = "2.4")]
		public GLib.SList<string>? list_shortcut_folders ();
		[Version (since = "3.22")]
		public void remove_choice (string id);
		[Version (since = "2.4")]
		public void remove_filter (Gtk.FileFilter filter);
		[Version (since = "2.4")]
		public bool remove_shortcut_folder (string folder) throws GLib.Error;
		[Version (since = "2.4")]
		public bool remove_shortcut_folder_uri (string uri) throws GLib.Error;
		[Version (since = "2.4")]
		public void select_all ();
		[Version (since = "2.14")]
		public bool select_file (GLib.File file) throws GLib.Error;
		[Version (since = "2.4")]
		public bool select_filename (string filename);
		[Version (since = "2.4")]
		public bool select_uri (string uri);
		[Version (since = "2.4")]
		public void set_action (Gtk.FileChooserAction action);
		[Version (since = "3.22")]
		public void set_choice (string id, string option);
		[Version (since = "2.18")]
		public void set_create_folders (bool create_folders);
		[Version (since = "2.4")]
		public bool set_current_folder (string filename);
		[Version (since = "2.14")]
		public bool set_current_folder_file (GLib.File file) throws GLib.Error;
		[Version (since = "2.4")]
		public bool set_current_folder_uri (string uri);
		[Version (since = "2.4")]
		public void set_current_name (string name);
		[Version (since = "2.8")]
		public void set_do_overwrite_confirmation (bool do_overwrite_confirmation);
		[Version (since = "2.4")]
		public void set_extra_widget (Gtk.Widget extra_widget);
		[Version (since = "2.14")]
		public bool set_file (GLib.File file) throws GLib.Error;
		[Version (since = "2.4")]
		public bool set_filename (string filename);
		[Version (since = "2.4")]
		public void set_filter (Gtk.FileFilter filter);
		[Version (since = "2.4")]
		public void set_local_only (bool local_only);
		[Version (since = "2.4")]
		public void set_preview_widget (Gtk.Widget preview_widget);
		[Version (since = "2.4")]
		public void set_preview_widget_active (bool active);
		[Version (since = "2.4")]
		public void set_select_multiple (bool select_multiple);
		[Version (since = "2.6")]
		public void set_show_hidden (bool show_hidden);
		[Version (since = "2.4")]
		public bool set_uri (string uri);
		[Version (since = "2.4")]
		public void set_use_preview_label (bool use_label);
		[Version (since = "2.4")]
		public void unselect_all ();
		[Version (since = "2.14")]
		public void unselect_file (GLib.File file);
		[Version (since = "2.4")]
		public void unselect_filename (string filename);
		[Version (since = "2.4")]
		public void unselect_uri (string uri);
		[ConcreteAccessor]
		public abstract Gtk.FileChooserAction action { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.18")]
		public abstract bool create_folders { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.8")]
		public abstract bool do_overwrite_confirmation { get; set; }
		[ConcreteAccessor]
		public abstract Gtk.Widget extra_widget { get; set; }
		[ConcreteAccessor]
		public abstract Gtk.FileFilter filter { get; set; }
		[ConcreteAccessor]
		public abstract bool local_only { get; set; }
		[ConcreteAccessor]
		public abstract Gtk.Widget preview_widget { get; set; }
		[ConcreteAccessor]
		public abstract bool preview_widget_active { get; set; }
		[ConcreteAccessor]
		public abstract bool select_multiple { get; set; }
		[ConcreteAccessor]
		public abstract bool show_hidden { get; set; }
		[ConcreteAccessor]
		public abstract bool use_preview_label { get; set; }
		[Version (since = "2.8")]
		public signal Gtk.FileChooserConfirmation confirm_overwrite ();
		public signal void current_folder_changed ();
		public signal void file_activated ();
		public signal void selection_changed ();
		public signal void update_preview ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_font_chooser_get_type ()")]
	public interface FontChooser : GLib.Object {
		[Version (since = "3.2")]
		public string? get_font ();
		[Version (since = "3.2")]
		public Pango.FontDescription? get_font_desc ();
		[Version (since = "3.2")]
		public abstract unowned Pango.FontFace? get_font_face ();
		[Version (since = "3.2")]
		public abstract unowned Pango.FontFamily? get_font_family ();
		[Version (since = "3.18")]
		public abstract Pango.FontMap? get_font_map ();
		[Version (since = "3.2")]
		public abstract int get_font_size ();
		[Version (since = "3.2")]
		public string get_preview_text ();
		[Version (since = "3.2")]
		public bool get_show_preview_entry ();
		[Version (since = "3.2")]
		public abstract void set_filter_func (owned Gtk.FontFilterFunc? filter);
		[Version (since = "3.2")]
		public void set_font (string fontname);
		[Version (since = "3.2")]
		public void set_font_desc (Pango.FontDescription font_desc);
		[Version (since = "3.18")]
		public abstract void set_font_map (Pango.FontMap? fontmap);
		[Version (since = "3.2")]
		public void set_preview_text (string text);
		[Version (since = "3.2")]
		public void set_show_preview_entry (bool show_preview_entry);
		[ConcreteAccessor]
		public abstract string font { owned get; set; }
		[ConcreteAccessor]
		public abstract Pango.FontDescription font_desc { owned get; set; }
		[ConcreteAccessor]
		public abstract string preview_text { owned get; set; }
		[ConcreteAccessor]
		public abstract bool show_preview_entry { get; set; }
		public virtual signal void font_activated (string fontname);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_orientable_get_type ()")]
	public interface Orientable : GLib.Object {
		[Version (since = "2.16")]
		public Gtk.Orientation get_orientation ();
		[Version (since = "2.16")]
		public void set_orientation (Gtk.Orientation orientation);
		[ConcreteAccessor]
		[Version (since = "2.16")]
		public abstract Gtk.Orientation orientation { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_print_operation_preview_get_type ()")]
	public interface PrintOperationPreview : GLib.Object {
		[Version (since = "2.10")]
		public abstract void end_preview ();
		[Version (since = "2.10")]
		public abstract bool is_selected (int page_nr);
		[Version (since = "2.10")]
		public abstract void render_page (int page_nr);
		public virtual signal void got_page_size (Gtk.PrintContext context, Gtk.PageSetup page_setup);
		public virtual signal void ready (Gtk.PrintContext context);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_recent_chooser_get_type ()")]
	public interface RecentChooser : GLib.Object {
		[Version (since = "2.10")]
		public abstract void add_filter (Gtk.RecentFilter filter);
		[Version (since = "2.10")]
		public Gtk.RecentInfo get_current_item ();
		[Version (since = "2.10")]
		public abstract string get_current_uri ();
		[Version (since = "2.10")]
		public unowned Gtk.RecentFilter get_filter ();
		[Version (since = "2.10")]
		public abstract GLib.List<Gtk.RecentInfo> get_items ();
		[Version (since = "2.10")]
		public int get_limit ();
		[Version (since = "2.10")]
		public bool get_local_only ();
		[NoWrapper]
		public abstract unowned Gtk.RecentManager get_recent_manager ();
		[Version (since = "2.10")]
		public bool get_select_multiple ();
		[Version (since = "2.10")]
		public bool get_show_icons ();
		[Version (since = "2.10")]
		public bool get_show_not_found ();
		[Version (since = "2.10")]
		public bool get_show_private ();
		[Version (since = "2.10")]
		public bool get_show_tips ();
		[Version (since = "2.10")]
		public Gtk.RecentSortType get_sort_type ();
		[CCode (array_length_pos = 0.1, array_length_type = "gsize", array_null_terminated = true)]
		[Version (since = "2.10")]
		public string[] get_uris ();
		[Version (since = "2.10")]
		public abstract GLib.SList<weak Gtk.RecentFilter> list_filters ();
		[Version (since = "2.10")]
		public abstract void remove_filter (Gtk.RecentFilter filter);
		[Version (since = "2.10")]
		public abstract void select_all ();
		[Version (since = "2.10")]
		public abstract bool select_uri (string uri) throws GLib.Error;
		[Version (since = "2.10")]
		public abstract bool set_current_uri (string uri) throws GLib.Error;
		[Version (since = "2.10")]
		public void set_filter (Gtk.RecentFilter? filter);
		[Version (since = "2.10")]
		public void set_limit (int limit);
		[Version (since = "2.10")]
		public void set_local_only (bool local_only);
		[Version (since = "2.10")]
		public void set_select_multiple (bool select_multiple);
		[Version (since = "2.10")]
		public void set_show_icons (bool show_icons);
		[Version (since = "2.10")]
		public void set_show_not_found (bool show_not_found);
		[Version (since = "2.10")]
		public void set_show_private (bool show_private);
		[Version (since = "2.10")]
		public void set_show_tips (bool show_tips);
		[Version (since = "2.10")]
		public abstract void set_sort_func (owned Gtk.RecentSortFunc sort_func);
		[Version (since = "2.10")]
		public void set_sort_type (Gtk.RecentSortType sort_type);
		[Version (since = "2.10")]
		public abstract void unselect_all ();
		[Version (since = "2.10")]
		public abstract void unselect_uri (string uri);
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract Gtk.RecentFilter filter { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract int limit { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract bool local_only { get; set; }
		[Version (since = "2.10")]
		public abstract Gtk.RecentManager recent_manager { construct; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract bool select_multiple { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract bool show_icons { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract bool show_not_found { get; set; }
		[ConcreteAccessor]
		public abstract bool show_private { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract bool show_tips { get; set; }
		[ConcreteAccessor]
		[Version (since = "2.10")]
		public abstract Gtk.RecentSortType sort_type { get; set; }
		[Version (since = "2.10")]
		public virtual signal void item_activated ();
		[Version (since = "2.10")]
		public virtual signal void selection_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_cname = "GtkScrollableInterface", type_id = "gtk_scrollable_get_type ()")]
	public interface Scrollable : GLib.Object {
		[Version (since = "3.16")]
		public abstract bool get_border (out Gtk.Border border);
		[Version (since = "3.0")]
		public unowned Gtk.Adjustment get_hadjustment ();
		[Version (since = "3.0")]
		public Gtk.ScrollablePolicy get_hscroll_policy ();
		[Version (since = "3.0")]
		public unowned Gtk.Adjustment get_vadjustment ();
		[Version (since = "3.0")]
		public Gtk.ScrollablePolicy get_vscroll_policy ();
		[Version (since = "3.0")]
		public void set_hadjustment (Gtk.Adjustment? hadjustment);
		[Version (since = "3.0")]
		public void set_hscroll_policy (Gtk.ScrollablePolicy policy);
		[Version (since = "3.0")]
		public void set_vadjustment (Gtk.Adjustment? vadjustment);
		[Version (since = "3.0")]
		public void set_vscroll_policy (Gtk.ScrollablePolicy policy);
		[ConcreteAccessor]
		[Version (since = "3.0")]
		public abstract Gtk.Adjustment hadjustment { get; set construct; }
		[ConcreteAccessor]
		[Version (since = "3.0")]
		public abstract Gtk.ScrollablePolicy hscroll_policy { get; set; }
		[ConcreteAccessor]
		[Version (since = "3.0")]
		public abstract Gtk.Adjustment vadjustment { get; set construct; }
		[ConcreteAccessor]
		[Version (since = "3.0")]
		public abstract Gtk.ScrollablePolicy vscroll_policy { get; set; }
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_style_provider_get_type ()")]
	public interface StyleProvider : GLib.Object {
		[Version (since = "3.0")]
		public abstract bool get_style_property (Gtk.WidgetPath path, Gtk.StateFlags state, GLib.ParamSpec pspec, out GLib.Value value);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tool_shell_get_type ()")]
	public interface ToolShell : Gtk.Widget {
		[Version (since = "2.20")]
		public abstract Pango.EllipsizeMode get_ellipsize_mode ();
		[NoWrapper]
		public abstract Gtk.IconSize get_icon_size ();
		[Version (since = "2.14")]
		public abstract Gtk.Orientation get_orientation ();
		[Version (since = "2.14")]
		public abstract Gtk.ToolbarStyle get_style ();
		[Version (since = "2.20")]
		public abstract float get_text_alignment ();
		[Version (since = "2.20")]
		public abstract Gtk.Orientation get_text_orientation ();
		[Version (since = "2.20")]
		public abstract unowned Gtk.SizeGroup get_text_size_group ();
		[Version (since = "2.14")]
		public abstract void rebuild_menu ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_drag_dest_get_type ()")]
	public interface TreeDragDest : GLib.Object {
		public abstract bool drag_data_received (Gtk.TreePath dest, Gtk.SelectionData selection_data);
		public abstract bool row_drop_possible (Gtk.TreePath dest_path, Gtk.SelectionData selection_data);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_drag_source_get_type ()")]
	public interface TreeDragSource : GLib.Object {
		public abstract bool drag_data_delete (Gtk.TreePath path);
		public abstract bool drag_data_get (Gtk.TreePath path, Gtk.SelectionData selection_data);
		public abstract bool row_draggable (Gtk.TreePath path);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_model_get_type ()")]
	public interface TreeModel : GLib.Object {
		public void @foreach (Gtk.TreeModelForeachFunc func);
		[CCode (sentinel = "-1")]
		public void @get (Gtk.TreeIter iter, ...);
		public abstract GLib.Type get_column_type (int index_);
		public abstract Gtk.TreeModelFlags get_flags ();
		public abstract bool get_iter (out Gtk.TreeIter iter, Gtk.TreePath path);
		public bool get_iter_first (out Gtk.TreeIter iter);
		public bool get_iter_from_string (out Gtk.TreeIter iter, string path_string);
		public abstract int get_n_columns ();
		public abstract Gtk.TreePath? get_path (Gtk.TreeIter iter);
		[Version (since = "2.2")]
		public string get_string_from_iter (Gtk.TreeIter iter);
		public void get_valist (Gtk.TreeIter iter, [CCode (type = "va_list")] va_list var_args);
		public abstract void get_value (Gtk.TreeIter iter, int column, out GLib.Value value);
		public abstract bool iter_children (out Gtk.TreeIter iter, Gtk.TreeIter? parent);
		public abstract bool iter_has_child (Gtk.TreeIter iter);
		public abstract int iter_n_children (Gtk.TreeIter? iter);
		public abstract bool iter_next (ref Gtk.TreeIter iter);
		public abstract bool iter_nth_child (out Gtk.TreeIter iter, Gtk.TreeIter? parent, int n);
		public abstract bool iter_parent (out Gtk.TreeIter iter, Gtk.TreeIter child);
		[Version (since = "3.0")]
		public virtual bool iter_previous (ref Gtk.TreeIter iter);
		public virtual void ref_node (Gtk.TreeIter iter);
		[Version (since = "3.10")]
		public void rows_reordered_with_length (Gtk.TreePath path, Gtk.TreeIter? iter, [CCode (array_length_cname = "length", array_length_pos = 3.1)] int[] new_order);
		public virtual void unref_node (Gtk.TreeIter iter);
		[HasEmitter]
		public virtual signal void row_changed (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public virtual signal void row_deleted (Gtk.TreePath path);
		[HasEmitter]
		public virtual signal void row_has_child_toggled (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public virtual signal void row_inserted (Gtk.TreePath path, Gtk.TreeIter iter);
		[HasEmitter]
		public virtual signal void rows_reordered (Gtk.TreePath path, Gtk.TreeIter iter, [CCode (array_length = false)] int[] new_order);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_sortable_get_type ()")]
	public interface TreeSortable : Gtk.TreeModel, GLib.Object {
		public abstract bool get_sort_column_id (out int sort_column_id, out Gtk.SortType order);
		public abstract bool has_default_sort_func ();
		public abstract void set_default_sort_func (owned Gtk.TreeIterCompareFunc sort_func);
		public abstract void set_sort_column_id (int sort_column_id, Gtk.SortType order);
		public abstract void set_sort_func (int sort_column_id, owned Gtk.TreeIterCompareFunc sort_func);
		[HasEmitter]
		public virtual signal void sort_column_changed ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct AccelGroupEntry {
		public Gtk.AccelKey key;
		public weak GLib.Closure closure;
		public GLib.Quark accel_path_quark;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct AccelKey {
		public uint accel_key;
		public Gdk.ModifierType accel_mods;
		public uint accel_flags;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gdk_rectangle_get_type ()")]
	public struct Allocation : Gdk.Rectangle {
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct BindingArg {
		[CCode (cname = "d.long_data")]
		public long long_data;
		[CCode (cname = "d.double_data")]
		public double double_data;
		[CCode (cname = "d.string_data")]
		public weak string string_data;
		public GLib.Type arg_type;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_border_get_type ()")]
	public struct Border {
		public int16 left;
		public int16 right;
		public int16 top;
		public int16 bottom;
		[CCode (has_construct_function = false, type = "GtkBorder*")]
		[Version (since = "2.14")]
		public Border ();
		public Gtk.Border? copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct IMContextInfo {
		public weak string context_id;
		public weak string context_name;
		public weak string domain;
		public weak string domain_dirname;
		public weak string default_locales;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct PadActionEntry {
		public Gtk.PadActionType type;
		public int index;
		public int mode;
		public weak string label;
		public weak string action_name;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct PageRange {
		public int start;
		public int end;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_copy_function = false, has_destroy_function = false, has_type_id = false)]
	public struct RecentData {
		public string? display_name;
		public string? description;
		public string mime_type;
		public string app_name;
		public string app_exec;
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] groups;
		public bool is_private;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct RecentFilterInfo {
		public Gtk.RecentFilterFlags contains;
		public weak string? uri;
		public weak string? display_name;
		public weak string? mime_type;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[]? applications;
		[CCode (array_length = false, array_null_terminated = true)]
		public weak string[]? groups;
		public int age;
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct RequestedSize {
		public void* data;
		public int minimum_size;
		public int natural_size;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_requisition_get_type ()")]
	public struct Requisition {
		public int width;
		public int height;
		[CCode (has_construct_function = false, type = "GtkRequisition*")]
		[Version (since = "3.0")]
		public Requisition ();
		public Gtk.Requisition? copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", has_type_id = false)]
	public struct SettingsValue {
		public weak string origin;
		public GLib.Value value;
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_target_entry_get_type ()")]
	public struct TargetEntry {
		public weak string target;
		public uint flags;
		public uint info;
		[CCode (has_construct_function = false, type = "GtkTargetEntry*")]
		public TargetEntry (string target, uint flags, uint info);
		public Gtk.TargetEntry? copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_text_iter_get_type ()")]
	public struct TextIter {
		[Version (since = "3.2")]
		public void assign (Gtk.TextIter other);
		public bool backward_char ();
		public bool backward_chars (int count);
		public bool backward_cursor_position ();
		public bool backward_cursor_positions (int count);
		public bool backward_find_char ([CCode (delegate_target_pos = 1.5)] Gtk.TextCharPredicate pred, Gtk.TextIter? limit);
		public bool backward_line ();
		public bool backward_lines (int count);
		public bool backward_search (string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter? limit);
		public bool backward_sentence_start ();
		public bool backward_sentence_starts (int count);
		public bool backward_to_tag_toggle (Gtk.TextTag? tag);
		[Version (since = "2.4")]
		public bool backward_visible_cursor_position ();
		[Version (since = "2.4")]
		public bool backward_visible_cursor_positions (int count);
		[Version (since = "2.8")]
		public bool backward_visible_line ();
		[Version (since = "2.8")]
		public bool backward_visible_lines (int count);
		[Version (since = "2.4")]
		public bool backward_visible_word_start ();
		[Version (since = "2.4")]
		public bool backward_visible_word_starts (int count);
		public bool backward_word_start ();
		public bool backward_word_starts (int count);
		public bool can_insert (bool default_editability);
		public int compare (Gtk.TextIter rhs);
		public Gtk.TextIter? copy ();
		public bool editable (bool default_setting);
		public bool ends_line ();
		public bool ends_sentence ();
		public bool ends_tag (Gtk.TextTag? tag);
		public bool ends_word ();
		public bool equal (Gtk.TextIter rhs);
		public bool forward_char ();
		public bool forward_chars (int count);
		public bool forward_cursor_position ();
		public bool forward_cursor_positions (int count);
		public bool forward_find_char ([CCode (delegate_target_pos = 1.5)] Gtk.TextCharPredicate pred, Gtk.TextIter? limit);
		public bool forward_line ();
		public bool forward_lines (int count);
		public bool forward_search (string str, Gtk.TextSearchFlags flags, out Gtk.TextIter match_start, out Gtk.TextIter match_end, Gtk.TextIter? limit);
		public bool forward_sentence_end ();
		public bool forward_sentence_ends (int count);
		public void forward_to_end ();
		public bool forward_to_line_end ();
		public bool forward_to_tag_toggle (Gtk.TextTag? tag);
		[Version (since = "2.4")]
		public bool forward_visible_cursor_position ();
		[Version (since = "2.4")]
		public bool forward_visible_cursor_positions (int count);
		[Version (since = "2.8")]
		public bool forward_visible_line ();
		[Version (since = "2.8")]
		public bool forward_visible_lines (int count);
		[Version (since = "2.4")]
		public bool forward_visible_word_end ();
		[Version (since = "2.4")]
		public bool forward_visible_word_ends (int count);
		public bool forward_word_end ();
		public bool forward_word_ends (int count);
		public void free ();
		public unowned Gtk.TextBuffer get_buffer ();
		public int get_bytes_in_line ();
		public unichar get_char ();
		public int get_chars_in_line ();
		public unowned Gtk.TextChildAnchor get_child_anchor ();
		public Pango.Language get_language ();
		public int get_line ();
		public int get_line_index ();
		public int get_line_offset ();
		public GLib.SList<weak Gtk.TextMark> get_marks ();
		public int get_offset ();
		public unowned Gdk.Pixbuf get_pixbuf ();
		public string get_slice (Gtk.TextIter end);
		public GLib.SList<weak Gtk.TextTag> get_tags ();
		public string get_text (Gtk.TextIter end);
		public GLib.SList<weak Gtk.TextTag> get_toggled_tags (bool toggled_on);
		public int get_visible_line_index ();
		public int get_visible_line_offset ();
		public string get_visible_slice (Gtk.TextIter end);
		public string get_visible_text (Gtk.TextIter end);
		public bool has_tag (Gtk.TextTag tag);
		public bool in_range (Gtk.TextIter start, Gtk.TextIter end);
		public bool inside_sentence ();
		public bool inside_word ();
		public bool is_cursor_position ();
		public bool is_end ();
		public bool is_start ();
		public void order (Gtk.TextIter second);
		public void set_line (int line_number);
		public void set_line_index (int byte_on_line);
		public void set_line_offset (int char_on_line);
		public void set_offset (int char_offset);
		public void set_visible_line_index (int byte_on_line);
		public void set_visible_line_offset (int char_on_line);
		public bool starts_line ();
		public bool starts_sentence ();
		[Version (since = "3.20")]
		public bool starts_tag (Gtk.TextTag? tag);
		public bool starts_word ();
		public bool toggles_tag (Gtk.TextTag? tag);
	}
	[CCode (cheader_filename = "gtk/gtk.h", type_id = "gtk_tree_iter_get_type ()")]
	public struct TreeIter {
		public int stamp;
		public void* user_data;
		public void* user_data2;
		public void* user_data3;
		public Gtk.TreeIter? copy ();
		public void free ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ACCEL_", type_id = "gtk_accel_flags_get_type ()")]
	[Flags]
	public enum AccelFlags {
		VISIBLE,
		LOCKED,
		MASK
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ALIGN_", type_id = "gtk_align_get_type ()")]
	public enum Align {
		FILL,
		START,
		END,
		CENTER,
		BASELINE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_APPLICATION_INHIBIT_", type_id = "gtk_application_inhibit_flags_get_type ()")]
	[Flags]
	[Version (since = "3.4")]
	public enum ApplicationInhibitFlags {
		LOGOUT,
		SWITCH,
		SUSPEND,
		IDLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ARROWS_", type_id = "gtk_arrow_placement_get_type ()")]
	public enum ArrowPlacement {
		BOTH,
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ARROW_", type_id = "gtk_arrow_type_get_type ()")]
	public enum ArrowType {
		UP,
		DOWN,
		LEFT,
		RIGHT,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ASSISTANT_PAGE_", type_id = "gtk_assistant_page_type_get_type ()")]
	public enum AssistantPageType {
		CONTENT,
		INTRO,
		CONFIRM,
		SUMMARY,
		PROGRESS,
		CUSTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BASELINE_POSITION_", type_id = "gtk_baseline_position_get_type ()")]
	[Version (since = "3.10")]
	public enum BaselinePosition {
		TOP,
		CENTER,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BORDER_STYLE_", type_id = "gtk_border_style_get_type ()")]
	public enum BorderStyle {
		NONE,
		SOLID,
		INSET,
		OUTSET,
		HIDDEN,
		DOTTED,
		DASHED,
		DOUBLE,
		GROOVE,
		RIDGE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTONBOX_", type_id = "gtk_button_box_style_get_type ()")]
	public enum ButtonBoxStyle {
		SPREAD,
		EDGE,
		START,
		END,
		CENTER,
		EXPAND
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTON_ROLE_", type_id = "gtk_button_role_get_type ()")]
	public enum ButtonRole {
		NORMAL,
		CHECK,
		RADIO
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUTTONS_", type_id = "gtk_buttons_type_get_type ()")]
	public enum ButtonsType {
		NONE,
		OK,
		CLOSE,
		CANCEL,
		YES_NO,
		OK_CANCEL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CALENDAR_", type_id = "gtk_calendar_display_options_get_type ()")]
	[Flags]
	public enum CalendarDisplayOptions {
		SHOW_HEADING,
		SHOW_DAY_NAMES,
		NO_MONTH_CHANGE,
		SHOW_WEEK_NUMBERS,
		SHOW_DETAILS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_ACCEL_MODE_", type_id = "gtk_cell_renderer_accel_mode_get_type ()")]
	public enum CellRendererAccelMode {
		GTK,
		OTHER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_MODE_", type_id = "gtk_cell_renderer_mode_get_type ()")]
	public enum CellRendererMode {
		INERT,
		ACTIVATABLE,
		EDITABLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CELL_RENDERER_", type_id = "gtk_cell_renderer_state_get_type ()")]
	[Flags]
	public enum CellRendererState {
		SELECTED,
		PRELIT,
		INSENSITIVE,
		SORTED,
		FOCUSED,
		EXPANDABLE,
		EXPANDED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CORNER_", type_id = "gtk_corner_type_get_type ()")]
	public enum CornerType {
		TOP_LEFT,
		BOTTOM_LEFT,
		TOP_RIGHT,
		BOTTOM_RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CSS_SECTION_", type_id = "gtk_css_section_type_get_type ()")]
	[Version (since = "3.2")]
	public enum CssSectionType {
		DOCUMENT,
		IMPORT,
		COLOR_DEFINITION,
		BINDING_SET,
		RULESET,
		SELECTOR,
		DECLARATION,
		VALUE,
		KEYFRAMES
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DEBUG_", type_id = "gtk_debug_flag_get_type ()")]
	[Flags]
	public enum DebugFlag {
		MISC,
		TEXT,
		TREE,
		UPDATES,
		KEYBINDINGS,
		MULTIHEAD,
		MODULES,
		GEOMETRY,
		ICONTHEME,
		PRINTING,
		BUILDER,
		SIZE_REQUEST,
		NO_CSS_CACHE,
		BASELINES,
		INTERACTIVE,
		TOUCHSCREEN,
		ACTIONS,
		RESIZE,
		LAYOUT,
		SNAPSHOT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DELETE_", type_id = "gtk_delete_type_get_type ()")]
	public enum DeleteType {
		CHARS,
		WORD_ENDS,
		WORDS,
		DISPLAY_LINES,
		DISPLAY_LINE_ENDS,
		PARAGRAPH_ENDS,
		PARAGRAPHS,
		WHITESPACE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DEST_DEFAULT_", type_id = "gtk_dest_defaults_get_type ()")]
	[Flags]
	public enum DestDefaults {
		MOTION,
		HIGHLIGHT,
		DROP,
		ALL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DIALOG_", type_id = "gtk_dialog_flags_get_type ()")]
	[Flags]
	public enum DialogFlags {
		MODAL,
		DESTROY_WITH_PARENT,
		USE_HEADER_BAR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DIR_", type_id = "gtk_direction_type_get_type ()")]
	public enum DirectionType {
		TAB_FORWARD,
		TAB_BACKWARD,
		UP,
		DOWN,
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_DRAG_RESULT_", type_id = "gtk_drag_result_get_type ()")]
	public enum DragResult {
		SUCCESS,
		NO_TARGET,
		USER_CANCELLED,
		TIMEOUT_EXPIRED,
		GRAB_BROKEN,
		ERROR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ENTRY_ICON_", type_id = "gtk_entry_icon_position_get_type ()")]
	[Version (since = "2.16")]
	public enum EntryIconPosition {
		PRIMARY,
		SECONDARY
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_EVENT_SEQUENCE_", type_id = "gtk_event_sequence_state_get_type ()")]
	[Version (since = "3.14")]
	public enum EventSequenceState {
		NONE,
		CLAIMED,
		DENIED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_ACTION_", type_id = "gtk_file_chooser_action_get_type ()")]
	public enum FileChooserAction {
		OPEN,
		SAVE,
		SELECT_FOLDER,
		CREATE_FOLDER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_CONFIRMATION_", type_id = "gtk_file_chooser_confirmation_get_type ()")]
	[Version (since = "2.8")]
	public enum FileChooserConfirmation {
		CONFIRM,
		ACCEPT_FILENAME,
		SELECT_AGAIN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_FILTER_", type_id = "gtk_file_filter_flags_get_type ()")]
	[Flags]
	public enum FileFilterFlags {
		FILENAME,
		URI,
		DISPLAY_NAME,
		MIME_TYPE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_LOOKUP_", type_id = "gtk_icon_lookup_flags_get_type ()")]
	[Flags]
	public enum IconLookupFlags {
		NO_SVG,
		FORCE_SVG,
		USE_BUILTIN,
		GENERIC_FALLBACK,
		FORCE_SIZE,
		FORCE_REGULAR,
		FORCE_SYMBOLIC,
		DIR_LTR,
		DIR_RTL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_SIZE_", type_id = "gtk_icon_size_get_type ()")]
	public enum IconSize {
		INVALID,
		MENU,
		SMALL_TOOLBAR,
		LARGE_TOOLBAR,
		BUTTON,
		DND,
		DIALOG
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_VIEW_", type_id = "gtk_icon_view_drop_position_get_type ()")]
	public enum IconViewDropPosition {
		NO_DROP,
		DROP_INTO,
		DROP_LEFT,
		DROP_RIGHT,
		DROP_ABOVE,
		DROP_BELOW
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_IMAGE_", type_id = "gtk_image_type_get_type ()")]
	public enum ImageType {
		EMPTY,
		PIXBUF,
		ANIMATION,
		ICON_NAME,
		GICON,
		SURFACE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_INPUT_HINT_", type_id = "gtk_input_hints_get_type ()")]
	[Flags]
	[Version (since = "3.6")]
	public enum InputHints {
		NONE,
		SPELLCHECK,
		NO_SPELLCHECK,
		WORD_COMPLETION,
		LOWERCASE,
		UPPERCASE_CHARS,
		UPPERCASE_WORDS,
		UPPERCASE_SENTENCES,
		INHIBIT_OSK,
		VERTICAL_WRITING
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_INPUT_PURPOSE_", type_id = "gtk_input_purpose_get_type ()")]
	[Version (since = "3.6")]
	public enum InputPurpose {
		FREE_FORM,
		ALPHA,
		DIGITS,
		NUMBER,
		PHONE,
		URL,
		EMAIL,
		NAME,
		PASSWORD,
		PIN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_JUSTIFY_", type_id = "gtk_justification_get_type ()")]
	public enum Justification {
		LEFT,
		RIGHT,
		CENTER,
		FILL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_LEVEL_BAR_MODE_", type_id = "gtk_level_bar_mode_get_type ()")]
	[Version (since = "3.6")]
	public enum LevelBarMode {
		CONTINUOUS,
		DISCRETE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_LICENSE_", type_id = "gtk_license_get_type ()")]
	[Version (since = "3.0")]
	public enum License {
		UNKNOWN,
		CUSTOM,
		GPL_2_0,
		GPL_3_0,
		LGPL_2_1,
		LGPL_3_0,
		BSD,
		MIT_X11,
		ARTISTIC,
		GPL_2_0_ONLY,
		GPL_3_0_ONLY,
		LGPL_2_1_ONLY,
		LGPL_3_0_ONLY,
		AGPL_3_0
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MENU_DIR_", type_id = "gtk_menu_direction_type_get_type ()")]
	public enum MenuDirectionType {
		PARENT,
		CHILD,
		NEXT,
		PREV
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MESSAGE_", type_id = "gtk_message_type_get_type ()")]
	public enum MessageType {
		INFO,
		WARNING,
		QUESTION,
		ERROR,
		OTHER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_MOVEMENT_", type_id = "gtk_movement_step_get_type ()")]
	public enum MovementStep {
		LOGICAL_POSITIONS,
		VISUAL_POSITIONS,
		WORDS,
		DISPLAY_LINES,
		DISPLAY_LINE_ENDS,
		PARAGRAPHS,
		PARAGRAPH_ENDS,
		PAGES,
		BUFFER_ENDS,
		HORIZONTAL_PAGES
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_NOTEBOOK_TAB_", type_id = "gtk_notebook_tab_get_type ()")]
	public enum NotebookTab {
		FIRST,
		LAST
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_NUMBER_UP_LAYOUT_", type_id = "gtk_number_up_layout_get_type ()")]
	public enum NumberUpLayout {
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM")]
		LRTB,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP")]
		LRBT,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM")]
		RLTB,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP")]
		RLBT,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT")]
		TBLR,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT")]
		TBRL,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT")]
		BTLR,
		[CCode (cname = "GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT")]
		BTRL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ORIENTATION_", type_id = "gtk_orientation_get_type ()")]
	public enum Orientation {
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PACK_DIRECTION_", type_id = "gtk_pack_direction_get_type ()")]
	public enum PackDirection {
		LTR,
		RTL,
		TTB,
		BTT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PACK_", type_id = "gtk_pack_type_get_type ()")]
	public enum PackType {
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAD_ACTION_", type_id = "gtk_pad_action_type_get_type ()")]
	public enum PadActionType {
		BUTTON,
		RING,
		STRIP
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAGE_ORIENTATION_", type_id = "gtk_page_orientation_get_type ()")]
	public enum PageOrientation {
		PORTRAIT,
		LANDSCAPE,
		REVERSE_PORTRAIT,
		REVERSE_LANDSCAPE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAGE_SET_", type_id = "gtk_page_set_get_type ()")]
	public enum PageSet {
		ALL,
		EVEN,
		ODD
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PAN_DIRECTION_", type_id = "gtk_pan_direction_get_type ()")]
	[Version (since = "3.14")]
	public enum PanDirection {
		LEFT,
		RIGHT,
		UP,
		DOWN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PLACES_OPEN_", type_id = "gtk_places_open_flags_get_type ()")]
	[Flags]
	public enum PlacesOpenFlags {
		NORMAL,
		NEW_TAB,
		NEW_WINDOW
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_POLICY_", type_id = "gtk_policy_type_get_type ()")]
	public enum PolicyType {
		ALWAYS,
		AUTOMATIC,
		NEVER,
		EXTERNAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_POPOVER_CONSTRAINT_", type_id = "gtk_popover_constraint_get_type ()")]
	[Version (since = "3.20")]
	public enum PopoverConstraint {
		NONE,
		WINDOW
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_POS_", type_id = "gtk_position_type_get_type ()")]
	public enum PositionType {
		LEFT,
		RIGHT,
		TOP,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_DUPLEX_", type_id = "gtk_print_duplex_get_type ()")]
	public enum PrintDuplex {
		SIMPLEX,
		HORIZONTAL,
		VERTICAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_OPERATION_ACTION_", type_id = "gtk_print_operation_action_get_type ()")]
	public enum PrintOperationAction {
		PRINT_DIALOG,
		PRINT,
		PREVIEW,
		EXPORT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_OPERATION_RESULT_", type_id = "gtk_print_operation_result_get_type ()")]
	public enum PrintOperationResult {
		ERROR,
		APPLY,
		CANCEL,
		IN_PROGRESS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_PAGES_", type_id = "gtk_print_pages_get_type ()")]
	public enum PrintPages {
		ALL,
		CURRENT,
		RANGES,
		SELECTION
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_QUALITY_", type_id = "gtk_print_quality_get_type ()")]
	public enum PrintQuality {
		LOW,
		NORMAL,
		HIGH,
		DRAFT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_STATUS_", type_id = "gtk_print_status_get_type ()")]
	public enum PrintStatus {
		INITIAL,
		PREPARING,
		GENERATING_DATA,
		SENDING_DATA,
		PENDING,
		PENDING_ISSUE,
		PRINTING,
		FINISHED,
		FINISHED_ABORTED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PHASE_", type_id = "gtk_propagation_phase_get_type ()")]
	[Version (since = "3.14")]
	public enum PropagationPhase {
		NONE,
		CAPTURE,
		BUBBLE,
		TARGET
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_FILTER_", type_id = "gtk_recent_filter_flags_get_type ()")]
	[Flags]
	public enum RecentFilterFlags {
		URI,
		DISPLAY_NAME,
		MIME_TYPE,
		APPLICATION,
		GROUP,
		AGE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_SORT_", type_id = "gtk_recent_sort_type_get_type ()")]
	[Version (since = "2.10")]
	public enum RecentSortType {
		NONE,
		MRU,
		LRU,
		CUSTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RELIEF_", type_id = "gtk_relief_style_get_type ()")]
	public enum ReliefStyle {
		NORMAL,
		NONE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RESPONSE_", type_id = "gtk_response_type_get_type ()")]
	public enum ResponseType {
		NONE,
		REJECT,
		ACCEPT,
		DELETE_EVENT,
		OK,
		CANCEL,
		CLOSE,
		YES,
		NO,
		APPLY,
		HELP
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_REVEALER_TRANSITION_TYPE_", type_id = "gtk_revealer_transition_type_get_type ()")]
	public enum RevealerTransitionType {
		NONE,
		CROSSFADE,
		SLIDE_RIGHT,
		SLIDE_LEFT,
		SLIDE_UP,
		SLIDE_DOWN
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_", type_id = "gtk_scroll_step_get_type ()")]
	public enum ScrollStep {
		STEPS,
		PAGES,
		ENDS,
		HORIZONTAL_STEPS,
		HORIZONTAL_PAGES,
		HORIZONTAL_ENDS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_", type_id = "gtk_scroll_type_get_type ()")]
	public enum ScrollType {
		NONE,
		JUMP,
		STEP_BACKWARD,
		STEP_FORWARD,
		PAGE_BACKWARD,
		PAGE_FORWARD,
		STEP_UP,
		STEP_DOWN,
		PAGE_UP,
		PAGE_DOWN,
		STEP_LEFT,
		STEP_RIGHT,
		PAGE_LEFT,
		PAGE_RIGHT,
		START,
		END
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SCROLL_", type_id = "gtk_scrollable_policy_get_type ()")]
	public enum ScrollablePolicy {
		MINIMUM,
		NATURAL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SELECTION_", type_id = "gtk_selection_mode_get_type ()")]
	public enum SelectionMode {
		NONE,
		SINGLE,
		BROWSE,
		MULTIPLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SENSITIVITY_", type_id = "gtk_sensitivity_type_get_type ()")]
	public enum SensitivityType {
		AUTO,
		ON,
		OFF
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SHADOW_", type_id = "gtk_shadow_type_get_type ()")]
	public enum ShadowType {
		NONE,
		IN,
		OUT,
		ETCHED_IN,
		ETCHED_OUT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SHORTCUT_", type_id = "gtk_shortcut_type_get_type ()")]
	[Version (since = "3.20")]
	public enum ShortcutType {
		ACCELERATOR,
		GESTURE_PINCH,
		GESTURE_STRETCH,
		GESTURE_ROTATE_CLOCKWISE,
		GESTURE_ROTATE_COUNTERCLOCKWISE,
		GESTURE_TWO_FINGER_SWIPE_LEFT,
		GESTURE_TWO_FINGER_SWIPE_RIGHT,
		GESTURE,
		GESTURE_SWIPE_LEFT,
		GESTURE_SWIPE_RIGHT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SIZE_GROUP_", type_id = "gtk_size_group_mode_get_type ()")]
	public enum SizeGroupMode {
		NONE,
		HORIZONTAL,
		VERTICAL,
		BOTH
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SIZE_REQUEST_", type_id = "gtk_size_request_mode_get_type ()")]
	public enum SizeRequestMode {
		HEIGHT_FOR_WIDTH,
		WIDTH_FOR_HEIGHT,
		CONSTANT_SIZE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SORT_", type_id = "gtk_sort_type_get_type ()")]
	public enum SortType {
		ASCENDING,
		DESCENDING
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_UPDATE_", type_id = "gtk_spin_button_update_policy_get_type ()")]
	public enum SpinButtonUpdatePolicy {
		ALWAYS,
		IF_VALID
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_SPIN_", type_id = "gtk_spin_type_get_type ()")]
	public enum SpinType {
		STEP_FORWARD,
		STEP_BACKWARD,
		PAGE_FORWARD,
		PAGE_BACKWARD,
		HOME,
		END,
		USER_DEFINED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STACK_TRANSITION_TYPE_", type_id = "gtk_stack_transition_type_get_type ()")]
	public enum StackTransitionType {
		NONE,
		CROSSFADE,
		SLIDE_RIGHT,
		SLIDE_LEFT,
		SLIDE_UP,
		SLIDE_DOWN,
		SLIDE_LEFT_RIGHT,
		SLIDE_UP_DOWN,
		OVER_UP,
		OVER_DOWN,
		OVER_LEFT,
		OVER_RIGHT,
		UNDER_UP,
		UNDER_DOWN,
		UNDER_LEFT,
		UNDER_RIGHT,
		OVER_UP_DOWN,
		OVER_DOWN_UP,
		OVER_LEFT_RIGHT,
		OVER_RIGHT_LEFT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STATE_FLAG_", type_id = "gtk_state_flags_get_type ()")]
	[Flags]
	public enum StateFlags {
		NORMAL,
		ACTIVE,
		PRELIGHT,
		SELECTED,
		INSENSITIVE,
		INCONSISTENT,
		FOCUSED,
		BACKDROP,
		DIR_LTR,
		DIR_RTL,
		LINK,
		VISITED,
		CHECKED,
		DROP_ACTIVE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_STYLE_CONTEXT_PRINT_", type_id = "gtk_style_context_print_flags_get_type ()")]
	[Flags]
	public enum StyleContextPrintFlags {
		NONE,
		RECURSE,
		SHOW_STYLE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TARGET_", type_id = "gtk_target_flags_get_type ()")]
	[Flags]
	public enum TargetFlags {
		SAME_APP,
		SAME_WIDGET,
		OTHER_APP,
		OTHER_WIDGET
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_BUFFER_TARGET_INFO_", type_id = "gtk_text_buffer_target_info_get_type ()")]
	public enum TextBufferTargetInfo {
		BUFFER_CONTENTS,
		RICH_TEXT,
		TEXT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_DIR_", type_id = "gtk_text_direction_get_type ()")]
	public enum TextDirection {
		NONE,
		LTR,
		RTL
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_EXTEND_SELECTION_", type_id = "gtk_text_extend_selection_get_type ()")]
	[Version (since = "3.16")]
	public enum TextExtendSelection {
		WORD,
		LINE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_SEARCH_", type_id = "gtk_text_search_flags_get_type ()")]
	[Flags]
	public enum TextSearchFlags {
		VISIBLE_ONLY,
		TEXT_ONLY,
		CASE_INSENSITIVE
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_VIEW_LAYER_", type_id = "gtk_text_view_layer_get_type ()")]
	public enum TextViewLayer {
		BELOW,
		ABOVE,
		BELOW_TEXT,
		ABOVE_TEXT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TEXT_WINDOW_", type_id = "gtk_text_window_type_get_type ()")]
	public enum TextWindowType {
		PRIVATE,
		WIDGET,
		TEXT,
		LEFT,
		RIGHT,
		TOP,
		BOTTOM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TOOL_PALETTE_DRAG_", type_id = "gtk_tool_palette_drag_targets_get_type ()")]
	[Flags]
	public enum ToolPaletteDragTargets {
		ITEMS,
		GROUPS
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TOOLBAR_", type_id = "gtk_toolbar_style_get_type ()")]
	public enum ToolbarStyle {
		ICONS,
		TEXT,
		BOTH,
		BOTH_HORIZ
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_MODEL_", type_id = "gtk_tree_model_flags_get_type ()")]
	[Flags]
	public enum TreeModelFlags {
		ITERS_PERSIST,
		LIST_ONLY
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_COLUMN_", type_id = "gtk_tree_view_column_sizing_get_type ()")]
	public enum TreeViewColumnSizing {
		GROW_ONLY,
		AUTOSIZE,
		FIXED
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_DROP_", type_id = "gtk_tree_view_drop_position_get_type ()")]
	public enum TreeViewDropPosition {
		BEFORE,
		AFTER,
		INTO_OR_BEFORE,
		INTO_OR_AFTER
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_TREE_VIEW_GRID_LINES_", type_id = "gtk_tree_view_grid_lines_get_type ()")]
	public enum TreeViewGridLines {
		NONE,
		HORIZONTAL,
		VERTICAL,
		BOTH
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_UNIT_", type_id = "gtk_unit_get_type ()")]
	public enum Unit {
		NONE,
		POINTS,
		INCH,
		MM
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WIN_POS_", type_id = "gtk_window_position_get_type ()")]
	public enum WindowPosition {
		NONE,
		CENTER,
		MOUSE,
		CENTER_ALWAYS,
		CENTER_ON_PARENT
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WINDOW_", type_id = "gtk_window_type_get_type ()")]
	public enum WindowType {
		TOPLEVEL,
		POPUP
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_WRAP_", type_id = "gtk_wrap_mode_get_type ()")]
	public enum WrapMode {
		NONE,
		CHAR,
		WORD,
		WORD_CHAR
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_BUILDER_ERROR_")]
	public errordomain BuilderError {
		INVALID_TYPE_FUNCTION,
		UNHANDLED_TAG,
		MISSING_ATTRIBUTE,
		INVALID_ATTRIBUTE,
		INVALID_TAG,
		MISSING_PROPERTY_VALUE,
		INVALID_VALUE,
		VERSION_MISMATCH,
		DUPLICATE_ID,
		OBJECT_TYPE_REFUSED,
		TEMPLATE_MISMATCH,
		INVALID_PROPERTY,
		INVALID_SIGNAL,
		INVALID_ID;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_CSS_PROVIDER_ERROR_")]
	public errordomain CssProviderError {
		FAILED,
		SYNTAX,
		IMPORT,
		NAME,
		DEPRECATED,
		UNKNOWN_VALUE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_FILE_CHOOSER_ERROR_")]
	public errordomain FileChooserError {
		NONEXISTENT,
		BAD_FILENAME,
		ALREADY_EXISTS,
		INCOMPLETE_HOSTNAME;
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "2.4")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_ICON_THEME_")]
	public errordomain IconThemeError {
		NOT_FOUND,
		FAILED;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_PRINT_ERROR_")]
	public errordomain PrintError {
		GENERAL,
		INTERNAL_ERROR,
		NOMEM,
		INVALID_FILE;
		[CCode (cheader_filename = "gtk/gtk.h")]
		[Version (since = "2.10")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_CHOOSER_ERROR_")]
	[Version (since = "2.10")]
	public errordomain RecentChooserError {
		NOT_FOUND,
		INVALID_URI;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h", cprefix = "GTK_RECENT_MANAGER_ERROR_")]
	[Version (since = "2.10")]
	public errordomain RecentManagerError {
		NOT_FOUND,
		INVALID_URI,
		INVALID_ENCODING,
		NOT_REGISTERED,
		READ,
		WRITE,
		UNKNOWN;
		[CCode (cheader_filename = "gtk/gtk.h")]
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "gtk/gtk.h")]
	public delegate bool AccelGroupActivate (Gtk.AccelGroup accel_group, GLib.Object acceleratable, uint keyval, Gdk.ModifierType modifier);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "2.2")]
	public delegate bool AccelGroupFindFunc (Gtk.AccelKey key, GLib.Closure closure);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void AccelMapForeach (void* data, string accel_path, uint accel_key, Gdk.ModifierType accel_mods, bool changed);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate int AssistantPageFunc (int current_page);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 6.9)]
	[Version (since = "2.12")]
	public delegate void BuilderConnectFunc (Gtk.Builder builder, GLib.Object object, string signal_name, string handler_name, GLib.Object? connect_object, GLib.ConnectFlags flags);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	[Version (since = "2.14")]
	public delegate string? CalendarDetailFunc (Gtk.Calendar calendar, uint year, uint month, uint day);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate void Callback (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	public delegate bool CellAllocCallback (Gtk.CellRenderer renderer, Gdk.Rectangle cell_area, Gdk.Rectangle cell_background);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate bool CellCallback (Gtk.CellRenderer renderer);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate void CellLayoutDataFunc (Gtk.CellLayout cell_layout, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ClipboardClearFunc (Gtk.Clipboard clipboard, void* user_data_or_owner);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ClipboardGetFunc (Gtk.Clipboard clipboard, Gtk.SelectionData selection_data, uint info, void* user_data_or_owner);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "2.6")]
	public delegate void ClipboardImageReceivedFunc (Gtk.Clipboard clipboard, Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void ClipboardReceivedFunc (Gtk.Clipboard clipboard, Gtk.SelectionData selection_data);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	[Version (since = "2.10")]
	public delegate void ClipboardRichTextReceivedFunc (Gtk.Clipboard clipboard, Gdk.Atom format, [CCode (array_length_cname = "length", array_length_pos = 3.1, array_length_type = "gsize", type = "guint8*")] uint8[]? text);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "2.4")]
	public delegate void ClipboardTargetsReceivedFunc (Gtk.Clipboard clipboard, [CCode (array_length_cname = "n_atoms", array_length_pos = 2.1)] Gdk.Atom[]? atoms);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void ClipboardTextReceivedFunc (Gtk.Clipboard clipboard, string? text);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "2.14")]
	public delegate void ClipboardURIReceivedFunc (Gtk.Clipboard clipboard, [CCode (array_length = false, array_null_terminated = true)] string[] uris);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	[Version (since = "3.90")]
	public delegate void DrawingAreaDrawFunc (Gtk.DrawingArea drawing_area, Cairo.Context cr, int width, int height);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	public delegate bool EntryCompletionMatchFunc (Gtk.EntryCompletion completion, string key, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate bool FileFilterFunc (Gtk.FileFilterInfo filter_info);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	[Version (since = "3.18")]
	public delegate Gtk.Widget FlowBoxCreateWidgetFunc ([CCode (type = "gpointer")] GLib.Object item);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	[Version (since = "3.12")]
	public delegate bool FlowBoxFilterFunc (Gtk.FlowBoxChild child);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.12")]
	public delegate void FlowBoxForeachFunc (Gtk.FlowBox box, Gtk.FlowBoxChild child);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.12")]
	public delegate int FlowBoxSortFunc (Gtk.FlowBoxChild child1, Gtk.FlowBoxChild child2);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate bool FontFilterFunc (Pango.FontFamily family, Pango.FontFace face);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void IconViewForeachFunc (Gtk.IconView icon_view, Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	[Version (since = "3.16")]
	public delegate Gtk.Widget ListBoxCreateWidgetFunc (GLib.Object item);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	[Version (since = "3.10")]
	public delegate bool ListBoxFilterFunc (Gtk.ListBoxRow row);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.14")]
	public delegate void ListBoxForeachFunc (Gtk.ListBox box, Gtk.ListBoxRow row);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.10")]
	public delegate int ListBoxSortFunc (Gtk.ListBoxRow row1, Gtk.ListBoxRow row2);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.10")]
	public delegate void ListBoxUpdateHeaderFunc (Gtk.ListBoxRow row, Gtk.ListBoxRow? before);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void MenuDetachFunc (Gtk.Widget attach_widget, Gtk.Menu menu);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate void MenuPositionFunc (Gtk.Menu menu, ref int x, ref int y, out bool push_in);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	[Version (since = "2.2")]
	public delegate void ModuleDisplayInitFunc (Gdk.Display display);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate void ModuleInitFunc ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] string[]? argv);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate void PageSetupDoneFunc (Gtk.PageSetup page_setup);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void PrintSettingsFunc (string key, string value);
	[CCode (cheader_filename = "gtk/gtk.h", has_target = false)]
	public delegate bool RcPropertyParser (GLib.ParamSpec pspec, GLib.StringBuilder rc_string, GLib.Value property_value);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate bool RecentFilterFunc (Gtk.RecentFilterInfo filter_info);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate int RecentSortFunc (Gtk.RecentInfo a, Gtk.RecentInfo b);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 5.9)]
	public delegate bool TextBufferDeserializeFunc (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter iter, [CCode (array_length_cname = "length", array_length_pos = 4.5, array_length_type = "gsize")] uint8[] data, bool create_tags) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 5.9)]
	public delegate unowned uint8? TextBufferSerializeFunc (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter start, Gtk.TextIter end, size_t length);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate bool TextCharPredicate (unichar ch);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 1.9)]
	public delegate void TextTagTableForeach (Gtk.TextTag tag);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	[Version (since = "3.8")]
	public delegate bool TickCallback (Gtk.Widget widget, Gdk.FrameClock frame_clock);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate void TreeCellDataFunc (Gtk.TreeViewColumn tree_column, Gtk.CellRenderer cell, Gtk.TreeModel tree_model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	public delegate int TreeIterCompareFunc (Gtk.TreeModel model, Gtk.TreeIter a, Gtk.TreeIter b);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate void TreeModelFilterModifyFunc (Gtk.TreeModel model, Gtk.TreeIter iter, out GLib.Value value, int column);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate bool TreeModelFilterVisibleFunc (Gtk.TreeModel model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	public delegate bool TreeModelForeachFunc (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 3.9)]
	public delegate void TreeSelectionForeachFunc (Gtk.TreeModel model, Gtk.TreePath path, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate bool TreeSelectionFunc (Gtk.TreeSelection selection, Gtk.TreeModel model, Gtk.TreePath path, bool path_currently_selected);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate bool TreeViewColumnDropFunc (Gtk.TreeView tree_view, Gtk.TreeViewColumn column, Gtk.TreeViewColumn prev_column, Gtk.TreeViewColumn next_column);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void TreeViewMappingFunc (Gtk.TreeView tree_view, Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate bool TreeViewRowSeparatorFunc (Gtk.TreeModel model, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 4.9)]
	public delegate bool TreeViewSearchEqualFunc (Gtk.TreeModel model, int column, string key, Gtk.TreeIter iter);
	[CCode (cheader_filename = "gtk/gtk.h", instance_pos = 2.9)]
	public delegate void TreeViewSearchPositionFunc (Gtk.TreeView tree_view, Gtk.Widget search_dialog);
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_BINARY_AGE")]
	public const int BINARY_AGE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_INPUT_ERROR")]
	public const int INPUT_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_INTERFACE_AGE")]
	public const int INTERFACE_AGE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_LEVEL_BAR_OFFSET_FULL")]
	[Version (since = "3.20")]
	public const string LEVEL_BAR_OFFSET_FULL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_LEVEL_BAR_OFFSET_HIGH")]
	[Version (since = "3.6")]
	public const string LEVEL_BAR_OFFSET_HIGH;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_LEVEL_BAR_OFFSET_LOW")]
	[Version (since = "3.6")]
	public const string LEVEL_BAR_OFFSET_LOW;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_MAX_COMPOSE_LEN")]
	public const int MAX_COMPOSE_LEN;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_A3")]
	public const string PAPER_NAME_A3;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_A4")]
	public const string PAPER_NAME_A4;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_A5")]
	public const string PAPER_NAME_A5;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_B5")]
	public const string PAPER_NAME_B5;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_EXECUTIVE")]
	public const string PAPER_NAME_EXECUTIVE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_LEGAL")]
	public const string PAPER_NAME_LEGAL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PAPER_NAME_LETTER")]
	public const string PAPER_NAME_LETTER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_COLLATE")]
	public const string PRINT_SETTINGS_COLLATE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_DEFAULT_SOURCE")]
	public const string PRINT_SETTINGS_DEFAULT_SOURCE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_DITHER")]
	public const string PRINT_SETTINGS_DITHER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_DUPLEX")]
	public const string PRINT_SETTINGS_DUPLEX;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_FINISHINGS")]
	public const string PRINT_SETTINGS_FINISHINGS;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_MEDIA_TYPE")]
	public const string PRINT_SETTINGS_MEDIA_TYPE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_NUMBER_UP")]
	public const string PRINT_SETTINGS_NUMBER_UP;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT")]
	public const string PRINT_SETTINGS_NUMBER_UP_LAYOUT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_N_COPIES")]
	public const string PRINT_SETTINGS_N_COPIES;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_ORIENTATION")]
	public const string PRINT_SETTINGS_ORIENTATION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_OUTPUT_BASENAME")]
	[Version (since = "3.6")]
	public const string PRINT_SETTINGS_OUTPUT_BASENAME;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_OUTPUT_BIN")]
	public const string PRINT_SETTINGS_OUTPUT_BIN;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_OUTPUT_DIR")]
	[Version (since = "3.6")]
	public const string PRINT_SETTINGS_OUTPUT_DIR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT")]
	public const string PRINT_SETTINGS_OUTPUT_FILE_FORMAT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_OUTPUT_URI")]
	public const string PRINT_SETTINGS_OUTPUT_URI;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PAGE_RANGES")]
	public const string PRINT_SETTINGS_PAGE_RANGES;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PAGE_SET")]
	public const string PRINT_SETTINGS_PAGE_SET;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PAPER_FORMAT")]
	public const string PRINT_SETTINGS_PAPER_FORMAT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PAPER_HEIGHT")]
	public const string PRINT_SETTINGS_PAPER_HEIGHT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PAPER_WIDTH")]
	public const string PRINT_SETTINGS_PAPER_WIDTH;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PRINTER")]
	public const string PRINT_SETTINGS_PRINTER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PRINTER_LPI")]
	public const string PRINT_SETTINGS_PRINTER_LPI;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_PRINT_PAGES")]
	public const string PRINT_SETTINGS_PRINT_PAGES;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_QUALITY")]
	public const string PRINT_SETTINGS_QUALITY;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_RESOLUTION")]
	public const string PRINT_SETTINGS_RESOLUTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_RESOLUTION_X")]
	public const string PRINT_SETTINGS_RESOLUTION_X;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_RESOLUTION_Y")]
	public const string PRINT_SETTINGS_RESOLUTION_Y;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_REVERSE")]
	public const string PRINT_SETTINGS_REVERSE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_SCALE")]
	public const string PRINT_SETTINGS_SCALE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_USE_COLOR")]
	public const string PRINT_SETTINGS_USE_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA")]
	public const string PRINT_SETTINGS_WIN32_DRIVER_EXTRA;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION")]
	public const string PRINT_SETTINGS_WIN32_DRIVER_VERSION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_PRIORITY_RESIZE")]
	public const int PRIORITY_RESIZE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_ACCELERATOR")]
	public const string STYLE_CLASS_ACCELERATOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_ARROW")]
	public const string STYLE_CLASS_ARROW;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_BACKGROUND")]
	public const string STYLE_CLASS_BACKGROUND;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_BOTTOM")]
	public const string STYLE_CLASS_BOTTOM;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_BUTTON")]
	public const string STYLE_CLASS_BUTTON;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CALENDAR")]
	public const string STYLE_CLASS_CALENDAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CELL")]
	public const string STYLE_CLASS_CELL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CHECK")]
	public const string STYLE_CLASS_CHECK;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_COMBOBOX_ENTRY")]
	public const string STYLE_CLASS_COMBOBOX_ENTRY;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CONTEXT_MENU")]
	public const string STYLE_CLASS_CONTEXT_MENU;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CSD")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_CSD;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_CURSOR_HANDLE")]
	public const string STYLE_CLASS_CURSOR_HANDLE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_DEFAULT")]
	public const string STYLE_CLASS_DEFAULT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_DESTRUCTIVE_ACTION")]
	[Version (since = "3.12")]
	public const string STYLE_CLASS_DESTRUCTIVE_ACTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_DIM_LABEL")]
	public const string STYLE_CLASS_DIM_LABEL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_DND")]
	public const string STYLE_CLASS_DND;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_DOCK")]
	public const string STYLE_CLASS_DOCK;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_ENTRY")]
	public const string STYLE_CLASS_ENTRY;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_ERROR")]
	public const string STYLE_CLASS_ERROR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_EXPANDER")]
	public const string STYLE_CLASS_EXPANDER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_FLAT")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_FLAT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_FRAME")]
	public const string STYLE_CLASS_FRAME;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_HEADER")]
	public const string STYLE_CLASS_HEADER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_HIGHLIGHT")]
	public const string STYLE_CLASS_HIGHLIGHT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_HORIZONTAL")]
	public const string STYLE_CLASS_HORIZONTAL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_IMAGE")]
	public const string STYLE_CLASS_IMAGE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_INFO")]
	public const string STYLE_CLASS_INFO;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_INLINE_TOOLBAR")]
	public const string STYLE_CLASS_INLINE_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_INSERTION_CURSOR")]
	public const string STYLE_CLASS_INSERTION_CURSOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LABEL")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_LABEL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LEFT")]
	public const string STYLE_CLASS_LEFT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LEVEL_BAR")]
	public const string STYLE_CLASS_LEVEL_BAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LINKED")]
	public const string STYLE_CLASS_LINKED;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LIST")]
	public const string STYLE_CLASS_LIST;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_LIST_ROW")]
	public const string STYLE_CLASS_LIST_ROW;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MARK")]
	public const string STYLE_CLASS_MARK;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MENU")]
	public const string STYLE_CLASS_MENU;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MENUBAR")]
	public const string STYLE_CLASS_MENUBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MENUITEM")]
	public const string STYLE_CLASS_MENUITEM;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MESSAGE_DIALOG")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_MESSAGE_DIALOG;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_MONOSPACE")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_MONOSPACE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_NEEDS_ATTENTION")]
	[Version (since = "3.12")]
	public const string STYLE_CLASS_NEEDS_ATTENTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_NOTEBOOK")]
	public const string STYLE_CLASS_NOTEBOOK;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_OSD")]
	public const string STYLE_CLASS_OSD;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_OVERSHOOT")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_OVERSHOOT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_PANE_SEPARATOR")]
	public const string STYLE_CLASS_PANE_SEPARATOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_PAPER")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_PAPER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_POPOVER")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_POPOVER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_POPUP")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_POPUP;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_PRIMARY_TOOLBAR")]
	public const string STYLE_CLASS_PRIMARY_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_PROGRESSBAR")]
	public const string STYLE_CLASS_PROGRESSBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_PULSE")]
	public const string STYLE_CLASS_PULSE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_QUESTION")]
	public const string STYLE_CLASS_QUESTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_RADIO")]
	public const string STYLE_CLASS_RADIO;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_RAISED")]
	public const string STYLE_CLASS_RAISED;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_READ_ONLY")]
	public const string STYLE_CLASS_READ_ONLY;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_RIGHT")]
	public const string STYLE_CLASS_RIGHT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_RUBBERBAND")]
	public const string STYLE_CLASS_RUBBERBAND;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SCALE")]
	public const string STYLE_CLASS_SCALE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE")]
	public const string STYLE_CLASS_SCALE_HAS_MARKS_ABOVE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW")]
	public const string STYLE_CLASS_SCALE_HAS_MARKS_BELOW;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SCROLLBAR")]
	public const string STYLE_CLASS_SCROLLBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SCROLLBARS_JUNCTION")]
	public const string STYLE_CLASS_SCROLLBARS_JUNCTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SEPARATOR")]
	public const string STYLE_CLASS_SEPARATOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SIDEBAR")]
	public const string STYLE_CLASS_SIDEBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SLIDER")]
	public const string STYLE_CLASS_SLIDER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SPINBUTTON")]
	public const string STYLE_CLASS_SPINBUTTON;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SPINNER")]
	public const string STYLE_CLASS_SPINNER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_STATUSBAR")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_STATUSBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SUBTITLE")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_SUBTITLE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_SUGGESTED_ACTION")]
	[Version (since = "3.12")]
	public const string STYLE_CLASS_SUGGESTED_ACTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TITLE")]
	[Version (since = "3.14")]
	public const string STYLE_CLASS_TITLE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TITLEBAR")]
	public const string STYLE_CLASS_TITLEBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TOOLBAR")]
	public const string STYLE_CLASS_TOOLBAR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TOOLTIP")]
	public const string STYLE_CLASS_TOOLTIP;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TOP")]
	public const string STYLE_CLASS_TOP;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TOUCH_SELECTION")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_TOUCH_SELECTION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_TROUGH")]
	public const string STYLE_CLASS_TROUGH;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_UNDERSHOOT")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_UNDERSHOOT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_VERTICAL")]
	public const string STYLE_CLASS_VERTICAL;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_VIEW")]
	public const string STYLE_CLASS_VIEW;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_WARNING")]
	public const string STYLE_CLASS_WARNING;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_CLASS_WIDE")]
	[Version (since = "3.16")]
	public const string STYLE_CLASS_WIDE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BACKGROUND_COLOR")]
	public const string STYLE_PROPERTY_BACKGROUND_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BACKGROUND_IMAGE")]
	public const string STYLE_PROPERTY_BACKGROUND_IMAGE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BORDER_COLOR")]
	public const string STYLE_PROPERTY_BORDER_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BORDER_RADIUS")]
	public const string STYLE_PROPERTY_BORDER_RADIUS;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BORDER_STYLE")]
	public const string STYLE_PROPERTY_BORDER_STYLE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_BORDER_WIDTH")]
	public const string STYLE_PROPERTY_BORDER_WIDTH;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_COLOR")]
	public const string STYLE_PROPERTY_COLOR;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_FONT")]
	public const string STYLE_PROPERTY_FONT;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_MARGIN")]
	public const string STYLE_PROPERTY_MARGIN;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROPERTY_PADDING")]
	public const string STYLE_PROPERTY_PADDING;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROVIDER_PRIORITY_APPLICATION")]
	public const int STYLE_PROVIDER_PRIORITY_APPLICATION;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROVIDER_PRIORITY_FALLBACK")]
	public const int STYLE_PROVIDER_PRIORITY_FALLBACK;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROVIDER_PRIORITY_SETTINGS")]
	public const int STYLE_PROVIDER_PRIORITY_SETTINGS;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROVIDER_PRIORITY_THEME")]
	public const int STYLE_PROVIDER_PRIORITY_THEME;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_STYLE_PROVIDER_PRIORITY_USER")]
	public const int STYLE_PROVIDER_PRIORITY_USER;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_TEXT_VIEW_PRIORITY_VALIDATE")]
	public const int TEXT_VIEW_PRIORITY_VALIDATE;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID")]
	public const int TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID;
	[CCode (cheader_filename = "gtk/gtk.h", cname = "GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID")]
	public const int TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool accel_groups_activate (GLib.Object object, uint accel_key, Gdk.ModifierType accel_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned GLib.SList<Gtk.AccelGroup> accel_groups_from_object (GLib.Object object);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.ModifierType accelerator_get_default_mod_mask ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static string accelerator_get_label (uint accelerator_key, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.4")]
	public static string accelerator_get_label_with_keycode (Gdk.Display? display, uint accelerator_key, uint keycode, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static string accelerator_name (uint accelerator_key, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.4")]
	public static string accelerator_name_with_keycode (Gdk.Display? display, uint accelerator_key, uint keycode, Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void accelerator_parse (string accelerator, out uint accelerator_key, out Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.4")]
	public static void accelerator_parse_with_keycode (string accelerator, out uint accelerator_key, [CCode (array_length = false, array_null_terminated = true)] out uint[] accelerator_codes, out Gdk.ModifierType accelerator_mods);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void accelerator_set_default_mod_mask (Gdk.ModifierType default_mod_mask);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool accelerator_valid (uint keyval, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool bindings_activate (GLib.Object object, uint keyval, Gdk.ModifierType modifiers);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.4")]
	public static bool bindings_activate_event (GLib.Object object, Gdk.EventKey event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static void cairo_transform_to_window (Cairo.Context cr, Gtk.Widget widget, Gdk.Window window);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned string? check_version (uint required_major, uint required_minor, uint required_micro);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static void device_grab_add (Gtk.Widget widget, Gdk.Device device, bool block_others);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static void device_grab_remove (Gtk.Widget widget, Gdk.Device device);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void disable_setlocale ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static int distribute_natural_allocation (int extra_space, uint n_requested_sizes, Gtk.RequestedSize sizes);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.10")]
	public static unowned Gdk.DragContext drag_begin_with_coordinates (Gtk.Widget widget, Gtk.TargetList targets, Gdk.DragAction actions, int button, Gdk.Event? event, int x, int y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.16")]
	public static void drag_cancel (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool drag_check_threshold (Gtk.Widget widget, int start_x, int start_y, int current_x, int current_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_dest_add_image_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_dest_add_text_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_dest_add_uri_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.Atom drag_dest_find_target (Gtk.Widget widget, Gdk.DragContext context, Gtk.TargetList? target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.TargetList? drag_dest_get_target_list (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static bool drag_dest_get_track_motion (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set (Gtk.Widget widget, Gtk.DestDefaults flags, [CCode (array_length_cname = "n_targets", array_length_pos = 3.5)] Gtk.TargetEntry[]? targets, Gdk.DragAction actions);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_set_target_list (Gtk.Widget widget, Gtk.TargetList? target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static void drag_dest_set_track_motion (Gtk.Widget widget, bool track_motion);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_dest_unset (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_finish (Gdk.DragContext context, bool success, bool del, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_get_data (Gtk.Widget widget, Gdk.DragContext context, Gdk.Atom target, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget? drag_get_source_widget (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_highlight (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_default (Gdk.DragContext context);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.2")]
	public static void drag_set_icon_gicon (Gdk.DragContext context, GLib.Icon icon, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.8")]
	public static void drag_set_icon_name (Gdk.DragContext context, string icon_name, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_pixbuf (Gdk.DragContext context, Gdk.Pixbuf pixbuf, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_surface (Gdk.DragContext context, Cairo.Surface surface);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_set_icon_widget (Gdk.DragContext context, Gtk.Widget widget, int hot_x, int hot_y);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_source_add_image_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_source_add_text_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void drag_source_add_uri_targets (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.4")]
	public static unowned Gtk.TargetList? drag_source_get_target_list (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set (Gtk.Widget widget, Gdk.ModifierType start_button_mask, [CCode (array_length_cname = "n_targets", array_length_pos = 3.5)] Gtk.TargetEntry[]? targets, Gdk.DragAction actions);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.2")]
	public static void drag_source_set_icon_gicon (Gtk.Widget widget, GLib.Icon icon);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.8")]
	public static void drag_source_set_icon_name (Gtk.Widget widget, string icon_name);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_set_icon_pixbuf (Gtk.Widget widget, Gdk.Pixbuf pixbuf);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.4")]
	public static void drag_source_set_target_list (Gtk.Widget widget, Gtk.TargetList? target_list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_source_unset (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void drag_unhighlight (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool events_pending ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool @false ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static uint get_binary_age ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static Gdk.Event? get_current_event ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gdk.Device? get_current_event_device ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool get_current_event_state (out Gdk.ModifierType state);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint32 get_current_event_time ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint get_debug_flags ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Pango.Language get_default_language ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget? get_event_widget (Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static uint get_interface_age ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.12")]
	public static Gtk.TextDirection get_locale_direction ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static uint get_major_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static uint get_micro_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.0")]
	public static uint get_minor_version ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static GLib.OptionGroup get_option_group (bool open_default_display);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void grab_add (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static unowned Gtk.Widget? grab_get_current ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void grab_remove (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static void hsv_to_rgb (double h, double s, double v, out double r, out double g, out double b);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void init ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool init_check ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static bool init_with_args ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[]? argv, string? parameter_string, [CCode (array_length = false, array_null_terminated = true)] GLib.OptionEntry[] entries, string? translation_domain) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main_do_event (Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool main_iteration ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool main_iteration_do (bool blocking);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static uint main_level ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void main_quit ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool parse_args ([CCode (array_length_cname = "argc", array_length_pos = 0.5)] ref unowned string[] argv);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static Gtk.PageSetup print_run_page_setup_dialog (Gtk.Window? parent, Gtk.PageSetup? page_setup, Gtk.PrintSettings settings);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static void print_run_page_setup_dialog_async (Gtk.Window? parent, Gtk.PageSetup? page_setup, Gtk.PrintSettings settings, [CCode (scope = "async")] Gtk.PageSetupDoneFunc done_cb);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void propagate_event (Gtk.Widget widget, Gdk.Event event);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static void rgb_to_hsv (double r, double g, double b, out double h, out double s, out double v);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_add_target (Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint info);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_add_targets (Gtk.Widget widget, Gdk.Atom selection, [CCode (array_length_cname = "ntargets", array_length_pos = 3.1, array_length_type = "guint")] Gtk.TargetEntry[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_clear_targets (Gtk.Widget widget, Gdk.Atom selection);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool selection_convert (Gtk.Widget widget, Gdk.Atom selection, Gdk.Atom target, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool selection_owner_set (Gtk.Widget? widget, Gdk.Atom selection, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.2")]
	public static bool selection_owner_set_for_display (Gdk.Display display, Gtk.Widget? widget, Gdk.Atom selection, uint32 time_);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void selection_remove_all (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static void set_debug_flags (uint flags);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.6")]
	public static void show_about_dialog (Gtk.Window? parent, ...);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static bool show_uri (Gdk.Screen? screen, string uri, uint32 timestamp) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.22")]
	public static bool show_uri_on_window (Gtk.Window? parent, string uri, uint32 timestamp) throws GLib.Error;
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static void target_table_free ([CCode (array_length_cname = "n_targets", array_length_pos = 1.1)] Gtk.TargetEntry[] targets);
	[CCode (array_length_pos = 1.1, cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static Gtk.TargetEntry[] target_table_new_from_list (Gtk.TargetList list);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static bool targets_include_image ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5)] Gdk.Atom[] targets, bool writable);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static bool targets_include_rich_text ([CCode (array_length_cname = "n_targets", array_length_pos = 1.5)] Gdk.Atom[] targets, Gtk.TextBuffer buffer);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static bool targets_include_text ([CCode (array_length_cname = "n_targets", array_length_pos = 1.1)] Gdk.Atom[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.10")]
	public static bool targets_include_uri ([CCode (array_length_cname = "n_targets", array_length_pos = 1.1)] Gdk.Atom[] targets);
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static void test_init ([CCode (array_length_cname = "argcp", array_length_pos = 0.5)] ref unowned string[] argvp, ...);
	[CCode (array_length_pos = 0.1, array_length_type = "guint", array_null_terminated = true, cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static unowned GLib.Type[] test_list_all_types ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "2.14")]
	public static void test_register_all_types ();
	[CCode (cheader_filename = "gtk/gtk.h")]
	[Version (since = "3.10")]
	public static void test_widget_wait_for_draw (Gtk.Widget widget);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool tree_get_row_drag_data (Gtk.SelectionData selection_data, out unowned Gtk.TreeModel? tree_model, out Gtk.TreePath? path);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool tree_set_row_drag_data (Gtk.SelectionData selection_data, Gtk.TreeModel tree_model, Gtk.TreePath path);
	[CCode (cheader_filename = "gtk/gtk.h")]
	public static bool @true ();
}
